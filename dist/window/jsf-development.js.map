{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main/typescript/api/Jsf.ts","webpack:///./src/main/typescript/impl/AjaxImpl.ts","webpack:///./src/main/typescript/api/myfaces.ts","webpack:///./src/main/typescript/impl/xhrCore/Response.ts","webpack:///./src/main/typescript/ext/monadish/index.ts","webpack:///./src/main/typescript/ext/monadish/DomQuery.ts","webpack:///./src/main/typescript/ext/monadish/Monad.ts","webpack:///./src/main/typescript/ext/monadish/Lang.ts","webpack:///./src/main/typescript/ext/monadish/SourcesCollectors.ts","webpack:///./src/main/typescript/ext/monadish/Stream.ts","webpack:///./src/main/typescript/ext/monadish/XmlQuery.ts","webpack:///./src/main/typescript/impl/core/Const.ts","webpack:///./src/main/typescript/impl/xhrCore/ResponseProcessor.ts","webpack:///./src/main/typescript/impl/util/Assertions.ts","webpack:///./src/main/typescript/impl/util/Lang.ts","webpack:///./src/main/typescript/impl/i18n/Messages.ts","webpack:///./src/main/typescript/impl/xhrCore/ErrorData.ts","webpack:///./src/main/typescript/impl/xhrCore/EventData.ts","webpack:///./src/main/typescript/impl/core/ImplTypes.ts","webpack:///./src/main/typescript/impl/xhrCore/ResonseDataResolver.ts","webpack:///./src/main/typescript/impl/xhrCore/XhrRequest.ts","webpack:///./src/main/typescript/impl/xhrCore/XhrFormData.ts","webpack:///./src/main/typescript/impl/util/AsyncQueue.ts","webpack:///./src/main/typescript/impl/util/ExtDomQuery.ts","webpack:///./src/main/typescript/impl/PushImpl.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA,iBAAiB,mBAAO,CAAC,CAAkB;AAC3C,iBAAiB,mBAAO,CAAC,EAAkB;AAC3C,+KAA+K;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC,qBAAqB,iBAAiB;AACtC,qBAAqB,gBAAgB;AACrC,qBAAqB,cAAc;AACnC;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B,mBAAmB,MAAM;AACzB,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,aAAa;AAC9F;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,iFAAiF,aAAa;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA,mBAAmB,SAAS,yEAAyE,aAAa;AAClH;AACA;AACA;AACA;AACA;AACA,KAAK,mCAAmC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA,KAAK,mCAAmC;AACxC;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK,mCAAmC;AACxC,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;;;;;;;;AClQ3C;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,CAAgB;AAC5C,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,mBAAmB,mBAAO,CAAC,EAAsB;AACjD,mBAAmB,mBAAO,CAAC,EAAmB;AAC9C,cAAc,mBAAO,CAAC,CAAuB;AAC7C,cAAc,mBAAO,CAAC,EAAc;AACpC,mBAAmB,mBAAO,CAAC,EAAmB;AAC9C,oBAAoB,mBAAO,CAAC,EAAuB;AACnD,oBAAoB,mBAAO,CAAC,EAAoB;AAChD,kBAAkB,mBAAO,CAAC,EAAqB;AAC/C,iBAAiB,mBAAO,CAAC,CAA0B;AACnD,iBAAiB,mBAAO,CAAC,CAAiB;AAC1C,0BAA0B,mBAAO,CAAC,CAAmC;AACrE,aAAa,mBAAO,CAAC,EAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA,sWAAsW;AACtW;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,gCAAgC,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iCAAiC,GAAG;AAC1E;AACA;AACA,0CAA0C,iBAAiB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2BAA2B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iCAAiC,GAAG;AAC1E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,6DAA6D,yBAAyB;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iCAAiC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kCAAkC,EAAE;AACzE;AACA;AACA;AACA;AACA,uNAAuN;AACvN;AACA;AACA,qCAAqC,gDAAgD,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,yEAAyE;;;;;;;;ACliB7D;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;;;;;;;;AC/BxC;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,0BAA0B,mBAAO,CAAC,EAAqB;AACvD,4BAA4B,mBAAO,CAAC,EAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oEAAoE,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;;;;;;;;ACvJ3C;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAY;AACrC;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B;AACA,cAAc,mBAAO,CAAC,CAAS;AAC/B;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,EAAY;AACrC;AACA;AACA,eAAe,mBAAO,CAAC,CAAU;AACjC;AACA;AACA,0BAA0B,mBAAO,CAAC,CAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7Ba;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,CAAS;AAC/B,eAAe,mBAAO,CAAC,CAAU;AACjC,aAAa,mBAAO,CAAC,CAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,kGAAkG,qBAAqB,EAAE;AACzH,SAAS;AACT;AACA,yCAAyC,gCAAgC,EAAE;AAC3E,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B,eAAe,EAAE;AACxD;AACA,yCAAyC,oEAAoE,EAAE;AAC/G,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,uCAAuC,mCAAmC,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACbkCAAkC,oCAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAA2C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAA2C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mCAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oCAAoC,EAAE;AACjF;AACA,SAAS;AACT;AACA,2CAA2C,+BAA+B,EAAE;AAC5E,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,aAAa,GAAG;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,aAAa,GAAG;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uDAAuD,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sCAAsC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gEAAgE;AAChE,aAAa;AACb,uCAAuC,wBAAwB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4DAA4D;AAC5D,SAAS;AACT,mCAAmC,sBAAsB,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,6CAA6C,gCAAgC,EAAE;AAC/E;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,6CAA6C,qCAAqC,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B,EAAE;AAC3E;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;;;;;;;ACj7Ca;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,0BAA0B,mBAAO,CAAC,CAAqB;AACvD,eAAe,mBAAO,CAAC,CAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oCAAoC,8BAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0CAA0C;AAC1C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD,2BAA2B;AAC3B;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACphBa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,CAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6CAA6C,gCAAgC,EAAE;AAC/E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,2CAA2C;;;;;;;;ACtL/B;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,CAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAumGAAmG,yBAAyB,EAAE;AAC9H,iDAAiD,iCAAiC,EAAE;AACpF;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;;;;;;;;AC1Pa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA,cAAc,mBAAO,CAAC,CAAS;AAC/B,0BAA0B,mBAAO,CAAC,CAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,0EAA0E,yBAAyB,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAAuE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,8BAA8B,uEAAuE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAAuE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,0EAA0E,yBAAyB,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC/Xa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,CAAQ;AAC7B,iBAAiB,mBAAO,CAAC,CAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sBAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,+BAA+B,EAAE,eAAe,iCAAiC,EAAE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;AClGa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,wEAAwE,UAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA,sCAAsC;AACtC,CAAC,8CAA8C;;;;;;;;ACnIlC;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,iBAAiB,mBAAO,CAAC,CAAa;AACtC,mBAAmB,mBAAO,CAAC,EAAoB;AAC/C,kBAAkB,mBAAO,CAAC,EAAa;AACvC,iBAAiB,mBAAO,CAAC,CAA6B;AACtD,aAAa,mBAAO,CAAC,EAAc;AACnC;AACA;AACA,kBAAkB,mBAAO,CAAC,EAAmB;AAC7C,kBAAkB,mBAAO,CAAC,EAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA,mEAAmE,8EAA8E,EAAE;AACnJ;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wCAAwC,EAAE;AACnF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC9Ra;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,aAAa,mBAAO,CAAC,EAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,gCAAgC,aAAa;AAC7C,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,gCAAgC,aAAa;AAC7C,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,gCAAgC,aAAa;AAC7C,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA,CAAC,6DAA6D;;;;;;;;ACrFjD;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,CAAyB;AAC9C,iBAAiB,mBAAO,CAAC,EAAkB;AAC3C,iBAAiB,mBAAO,CAAC,CAA6B;AACtD,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iKAAiK;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC,EAAE;AAC/E,qCAAqC,kCAAkC,EAAE;AACzE,qCAAqC,oCAAoC,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;;;;;;;;AClOxC;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA,6GAA6G,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,GAAG,EAAE;AACxC;AACA,+BAA+B,EAAE,GAAG,EAAE;AACtC;AACA,mCAAmC,EAAE,aAAa,EAAE,kBAAkB,EAAE;AACxE;AACA,+BAA+B,EAAE,GAAG,EAAE;AACtC;AACA,kCAAkC,EAAE,GAAG,EAAE;AACzC;AACA,mCAAmC,EAAE;AACrC;AACA,sCAAsC,EAAE,MAAM,EAAE,QAAQ,EAAE;AAC1D;AACA,uCAAuC,EAAE,GAAG,EAAE;AAC9C;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA,sCAAsC,EAAE,wBAAwB,EAAE;AAClE;AACA,+BAA+B,EAAE;AACjC;AACA,qCAAqC,EAAE;AACvC;AACA,uCAAuC,EAAE,2CAA2C,EAAE;AACtF;AACA,uCAAuC,EAAE,0CAA0C,EAAE;AACrF;AACA,+BAA+B,EAAE;AACjC;AACA,oCAAoC,EAAE,+BAA+B,EAAE;AACvE;AACA,qCAAqC,EAAE;AACvC;AACA,iCAAiC,EAAE;AACnC;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,4DAA4D,EAAE,aAAa,EAAE;AAC7E;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC/Ga;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,EAAe;AACrC,kBAAkB,mBAAO,CAAC,EAAa;AACvC,aAAa,mBAAO,CAAC,EAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,qCAAqC,oBAAoB;AACzD,sCAAsC,sBAAsB;AAC5D,gCAAgC,oBAAoB;AACpD,8BAA8B,+BAA+B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACrFa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,aAAa,mBAAO,CAAC,EAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC9Ba;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,EAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;;;;;;;;ACvCa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,mBAAmB,mBAAO,CAAC,EAAoB;AAC/C,iBAAiB,mBAAO,CAAC,CAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAwD,EAAE;AAC/F;AACA,CAAC,wFAAwF;;;;;;;;ACxG5E;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAa;AACtC,cAAc,mBAAO,CAAC,EAAe;AACrC,oBAAoB,mBAAO,CAAC,EAAe;AAC3C,kBAAkB,mBAAO,CAAC,EAAa;AACvC,kBAAkB,mBAAO,CAAC,EAAa;AACvC,aAAa,mBAAO,CAAC,EAAc;AACnC,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D,iCAAiC,oCAAoC;AACrE,kCAAkC,wCAAwC;AAC1E,qCAAqC,yCAAyC;AAC9E,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB,EAAE,mBAAmB,oBAAoB,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qFAAqF,iBAAiB,EAAE;AACxI,gCAAgC,yFAAyF,EAAE;AAC3H;AACA;AACA;AACA,gCAAgC,uFAAuF,EAAE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACtRa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,cAAc,mBAAO,CAAC,EAAe;AACrC,eAAe,mBAAO,CAAC,CAA2B;AAClD,iBAAiB,mBAAO,CAAC,CAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wFAAwF,2BAA2B,EAAE;AACrH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,KAAK;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;;;;;;;;ACnLa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAA4C,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC5Ga;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,CAA0B;AAChD,cAAc,mBAAO,CAAC,EAAe;AACrC,iBAAiB,mBAAO,CAAC,CAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qEAAqE,EAAE;AAChH,uCAAuC,qEAAqE,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;AC3Ha;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA,YAAY,mBAAO,CAAC,CAAY;AAChC,cAAc,mBAAO,CAAC,EAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,QAAQ;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B;AAC/E,sDAAsD,gCAAgC;AACtF,oDAAoD,6BAA6B;AACjF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,UAAU;AACV;AACA;AACA,CAAC,uDAAuD","file":"jsf-development.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///<reference path='./ApiInterfaces.ts'/>\r\n///<reference types='../../Types/Types'/>\r\nvar AjaxImpl_1 = require(\"../impl/AjaxImpl\");\r\nvar PushImpl_1 = require(\"../impl/PushImpl\");\r\nvar mf_impl = (_c = (_b = (_a = window) === null || _a === void 0 ? void 0 : _a.myfaces) === null || _b === void 0 ? void 0 : _b._impl, (_c !== null && _c !== void 0 ? _c : {}));\r\nvar jsf;\r\n(function (jsf) {\r\n    \"use strict\";\r\n    /*\r\n     * Version of the implementation for the jsf.js.\r\n     * <p />\r\n     * as specified within the jsf specifications jsf.html:\r\n     * <ul>\r\n     * <li>left two digits major release number</li>\r\n     * <li>middle two digits minor spec release number</li>\r\n     * <li>right two digits bug release number</li>\r\n     * </ul>\r\n     * @constant\r\n     */\r\n    jsf.specversion = 220000;\r\n    /**\r\n     * Implementation version as specified within the jsf specification.\r\n     * <p />\r\n     * A number increased with every implementation version\r\n     * and reset by moving to a new spec release number\r\n     *\r\n     * @constant\r\n     */\r\n    jsf.implversion = 0;\r\n    /**\r\n     * SeparatorChar as defined by UINamingContainer.getNamingContainerSeparatorChar()\r\n     * @type {Char}\r\n     */\r\n    jsf.separatorchar = getSeparatorChar();\r\n    /**\r\n     * This method is responsible for the return of a given project stage as defined\r\n     * by the jsf specification.\r\n     * <p/>\r\n     * Valid return values are:\r\n     * <ul>\r\n     *     <li>&quot;Production&quot;</li>\r\n     *     <li>&quot;Development&quot;</li>\r\n     *     <li>&quot;SystemTest&quot;</li>\r\n     *     <li>&quot;UnitTest&quot;</li>\r\n     * </li>\r\n     *\r\n     * @return {String} the current project state emitted by the server side method:\r\n     * <i>javax.faces.application.Application.getProjectStage()</i>\r\n     */\r\n    function getProjectStage() {\r\n        return AjaxImpl_1.Implementation.getProjectStage();\r\n    }\r\n    jsf.getProjectStage = getProjectStage;\r\n    /**\r\n     * collect and encode data for a given form element (must be of type form)\r\n     * find the javax.faces.ViewState element and encode its value as well!\r\n     * return a concatenated string of the encoded values!\r\n     *\r\n     * @throws an exception in case of the given element not being of type form!\r\n     * https://issues.apache.org/jira/browse/MYFACES-2110\r\n     */\r\n    function getViewState(formElement) {\r\n        return AjaxImpl_1.Implementation.getViewState(formElement);\r\n    }\r\n    jsf.getViewState = getViewState;\r\n    /**\r\n     * returns the window identifier for the given node / window\r\n     * @param {optional String | DomNode}  the node for which the client identifier has to be determined\r\n     * @return the window identifier or null if none is found\r\n     */\r\n    function getClientWindow(rootNode) {\r\n        return AjaxImpl_1.Implementation.getClientWindow(rootNode);\r\n    }\r\n    jsf.getClientWindow = getClientWindow;\r\n    //private helper functions\r\n    function getSeparatorChar() {\r\n        return AjaxImpl_1.Implementation.getSeparatorChar();\r\n    }\r\n    //We hook the old namespace system into our npm system\r\n    if (\"undefined\" == window.jsf) {\r\n        window.jsf = jsf;\r\n    }\r\n    var ajax;\r\n    (function (ajax) {\r\n        \"use strict\";\r\n        /**\r\n         * this function has to send the ajax requests\r\n         *\r\n         * following requestInternal conditions must be met:\r\n         * <ul>\r\n         *  <li> the requestInternal must be sent asynchronously! </li>\r\n         *  <li> the requestInternal must be a POST!!! requestInternal </li>\r\n         *  <li> the requestInternal url must be the form action attribute </li>\r\n         *  <li> all requests must be queued with a client side requestInternal queue to ensure the requestInternal ordering!</li>\r\n         * </ul>\r\n         *\r\n         * @param {String|Node} element: any dom element no matter being it html or jsf, from which the event is emitted\r\n         * @param {EVENT} event: any javascript event supported by that object\r\n         * @param {Map} options : map of options being pushed into the ajax cycle\r\n         */\r\n        function request(element, event, options) {\r\n            AjaxImpl_1.Implementation.request(element, event, options);\r\n            //Implementation.getInstance().requestInternal(element, event, options);\r\n        }\r\n        ajax.request = request;\r\n        /**\r\n         * response handler\r\n         * @param request the request object having triggered this response\r\n         * @param context the request context\r\n         *\r\n         * TODO add info on what can be in the context\r\n         */\r\n        function response(request, context) {\r\n            AjaxImpl_1.Implementation.response(request, context);\r\n        }\r\n        ajax.response = response;\r\n        /**\r\n         * Adds an error handler to our global error queue.\r\n         * the error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\r\n         * with errorData being of following format:\r\n         * <ul>\r\n         *     <li> errorData.type : &quot;error&quot;</li>\r\n         *     <li> errorData.status : the error status message</li>\r\n         *     <li> errorData.serverErrorName : the server error name in case of a server error</li>\r\n         *     <li> errorData.serverErrorMessage : the server error message in case of a server error</li>\r\n         *     <li> errorData.source  : the issuing source element which triggered the requestInternal </li>\r\n         *     <li> eventData.responseCode: the response code (aka http requestInternal response code, 401 etc...) </li>\r\n         *     <li> eventData.responseText: the requestInternal response text </li>\r\n         *     <li> eventData.responseXML: the requestInternal response xml </li>\r\n         * </ul>\r\n         *\r\n         * @param {function} errorListener error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\r\n         */\r\n        function addOnError(errorFunc) {\r\n            AjaxImpl_1.Implementation.addOnError(errorFunc);\r\n        }\r\n        ajax.addOnError = addOnError;\r\n        /**\r\n         * Adds a global event listener to the ajax event queue. The event listener must be a function\r\n         * of following format: <i>function eventListener(&lt;eventData&gt;)</i>\r\n         *\r\n         * @param {function} eventListener event must be of the format <i>function eventListener(&lt;eventData&gt;)</i>\r\n         */\r\n        function addOnEvent(eventFunc) {\r\n            AjaxImpl_1.Implementation.addOnEvent(eventFunc);\r\n        }\r\n        ajax.addOnEvent = addOnEvent;\r\n    })(ajax = jsf.ajax || (jsf.ajax = {}));\r\n    var util;\r\n    (function (util) {\r\n        /**\r\n         * varargs function which executes a chain of code (functions or any other code)\r\n         *\r\n         * if any of the code returns false, the execution\r\n         * is terminated prematurely skipping the rest of the code!\r\n         *\r\n         * @param {DomNode} source, the callee object\r\n         * @param {Event} event, the event object of the callee event triggering this function\r\n         * @param funcs ... arbitrary array of functions or strings\r\n         * @returns true if the chain has succeeded false otherwise\r\n         */\r\n        function chain(source, event) {\r\n            var funcs = [];\r\n            for (var _i = 2; _i < arguments.length; _i++) {\r\n                funcs[_i - 2] = arguments[_i];\r\n            }\r\n            return AjaxImpl_1.Implementation.chain.apply(AjaxImpl_1.Implementation, __spreadArrays([source, event], funcs));\r\n        }\r\n        util.chain = chain;\r\n    })(util = jsf.util || (jsf.util = {}));\r\n    var push;\r\n    (function (push) {\r\n        /**\r\n         * @param {function} onopen The function to be invoked when the web socket is opened.\r\n         * @param {function} onmessage The function to be invoked when a message is received.\r\n         * @param {function} onclose The function to be invoked when the web socket is closed.\r\n         * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\r\n         */\r\n        function init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect) {\r\n            PushImpl_1.PushImpl.init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect);\r\n        }\r\n        push.init = init;\r\n        /**\r\n         * Open the web socket on the given channel.\r\n         * @param {string} channel The name of the web socket channel.\r\n         * @throws {Error} When channel is unknown.\r\n         */\r\n        function open(socketClientId) {\r\n            PushImpl_1.PushImpl.open(socketClientId);\r\n        }\r\n        push.open = open;\r\n        /**\r\n         * Close the web socket on the given channel.\r\n         * @param {string} channel The name of the web socket channel.\r\n         * @throws {Error} When channel is unknown.\r\n         */\r\n        function close(socketClientId) {\r\n            PushImpl_1.PushImpl.close(socketClientId);\r\n        }\r\n        push.close = close;\r\n    })(push = jsf.push || (jsf.push = {}));\r\n})(jsf = exports.jsf || (exports.jsf = {}));\r\n//fullfill the window contract\r\nvar myfaces2;\r\n(function (myfaces2) {\r\n    //legacy compatibility\r\n    myfaces2._impl = mf_impl;\r\n    /**\r\n     * AB function similar to mojarra and Primefaces\r\n     * not part of the spec but a convenience accesor method\r\n     * Code provided by Thomas Andraschko\r\n     *\r\n     * @param source the event source\r\n     * @param event the event\r\n     * @param eventName event name for java.javax.faces.behavior.evemnt\r\n     * @param execute execute list as passed down in jsf.ajax.request\r\n     * @param render\r\n     * @param options\r\n     */\r\n    function ab(source, event, eventName, execute, render, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (eventName) {\r\n            options[\"javax.faces.behavior.event\"] = eventName;\r\n        }\r\n        if (execute) {\r\n            options[\"execute\"] = execute;\r\n        }\r\n        if (render) {\r\n            options[\"render\"] = render;\r\n        }\r\n        jsf.ajax.request(source, event, options);\r\n    }\r\n    myfaces2.ab = ab;\r\n})(myfaces2 = exports.myfaces2 || (exports.myfaces2 = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar myfacesConfig = require(\"../api/myfaces\");\r\nvar Response_1 = require(\"./xhrCore/Response\");\r\nvar XhrRequest_1 = require(\"./xhrCore/XhrRequest\");\r\nvar AsyncQueue_1 = require(\"./util/AsyncQueue\");\r\nvar Monad_1 = require(\"../ext/monadish/Monad\");\r\nvar Const_1 = require(\"./core/Const\");\r\nvar Assertions_1 = require(\"./util/Assertions\");\r\nvar XhrFormData_1 = require(\"./xhrCore/XhrFormData\");\r\nvar ExtDomQuery_1 = require(\"./util/ExtDomQuery\");\r\nvar ErrorData_1 = require(\"./xhrCore/ErrorData\");\r\nvar DomQuery_1 = require(\"../ext/monadish/DomQuery\");\r\nvar monadish_1 = require(\"../ext/monadish\");\r\nvar SourcesCollectors_1 = require(\"../ext/monadish/SourcesCollectors\");\r\nvar Lang_1 = require(\"./util/Lang\");\r\n/*\r\n * allowed project stages\r\n */\r\nvar ProjectStages;\r\n(function (ProjectStages) {\r\n    ProjectStages[\"Production\"] = \"Production\";\r\n    ProjectStages[\"Development\"] = \"Development\";\r\n    ProjectStages[\"SystemTest\"] = \"SystemTest\";\r\n    ProjectStages[\"UnitTest\"] = \"UnitTest\";\r\n})(ProjectStages || (ProjectStages = {}));\r\n/*\r\n *   blockfilter for the passthrough filtering; the attributes given here\r\n *   will not be transmitted from the options into the passthrough\r\n */\r\nvar BlockFilter;\r\n(function (BlockFilter) {\r\n    BlockFilter[\"onerror\"] = \"onerror\";\r\n    BlockFilter[\"onevent\"] = \"onevent\";\r\n    BlockFilter[\"render\"] = \"render\";\r\n    BlockFilter[\"execute\"] = \"execute\";\r\n    BlockFilter[\"myfaces\"] = \"myfaces\";\r\n    BlockFilter[\"delay\"] = \"delay\";\r\n    BlockFilter[\"timeout\"] = \"timeout\";\r\n    BlockFilter[\"windowId\"] = \"windowId\";\r\n})(BlockFilter || (BlockFilter = {}));\r\n/**\r\n * Core Implementation\r\n * to distinct between api and impl\r\n *\r\n * The original idea was to make the implementation pluggable\r\n * but this is pointless, you always can overwrite the thin api layer\r\n * however a dedicated api makes sense for readability reasons\r\n */\r\nvar Implementation;\r\n(function (Implementation) {\r\n    var trim = monadish_1.Lang.trim;\r\n    var getMessage = Lang_1.ExtLang.getMessage;\r\n    var getForm = Lang_1.ExtLang.getForm;\r\n    var getLocalOrGlobalConfig = Lang_1.ExtLang.getLocalOrGlobalConfig;\r\n    var getEvent = Lang_1.ExtLang.getEvent;\r\n    var getGlobalConfig = Lang_1.ExtLang.getGlobalConfig;\r\n    var assert = Assertions_1.Assertions.assert;\r\n    var globalConfig = myfacesConfig.myfaces.config;\r\n    var projectStage = null;\r\n    var separator = null;\r\n    var eventQueue = [];\r\n    var errorQueue = [];\r\n    Implementation.requestQueue = null;\r\n    /*error reporting threshold*/\r\n    var threshold = \"ERROR\";\r\n    //we need to proxy this in the tests\r\n    Implementation.queueHandler = {\r\n        /**\r\n         * public to make it shimmable for tests\r\n         */\r\n        addRequestToQueue: function (elem, form, reqCtx, respPassThr, delay, timeout) {\r\n            if (delay === void 0) { delay = 0; }\r\n            if (timeout === void 0) { timeout = 0; }\r\n            Implementation.requestQueue = (Implementation.requestQueue !== null && Implementation.requestQueue !== void 0 ? Implementation.requestQueue : new AsyncQueue_1.AsynchronouseQueue());\r\n            Implementation.requestQueue.enqueue(new XhrRequest_1.XhrRequest(elem, form, reqCtx, respPassThr, [], timeout), delay);\r\n        }\r\n    };\r\n    /**\r\n     * fetches the separator char from the given script tags\r\n     *\r\n     * @return {char} the separator char for the given script tags\r\n     */\r\n    function getSeparatorChar() {\r\n        var _a, _b, _c, _d, _e;\r\n        return _e = (_c = (_b = (_a = this) === null || _a === void 0 ? void 0 : _a.globalConfig) === null || _b === void 0 ? void 0 : _b.separator, (_c !== null && _c !== void 0 ? _c : (_d = this) === null || _d === void 0 ? void 0 : _d.separator)), (_e !== null && _e !== void 0 ? _e : (separator = ExtDomQuery_1.ExtDomquery.searchJsfJsFor(/separator=([^&;]*)/).orElse(\":\").value));\r\n    }\r\n    Implementation.getSeparatorChar = getSeparatorChar;\r\n    //for testing only\r\n    function reset() {\r\n        globalConfig = myfacesConfig.myfaces.config;\r\n        projectStage = null;\r\n        separator = null;\r\n        eventQueue = [];\r\n        errorQueue = [];\r\n        Implementation.requestQueue = null;\r\n    }\r\n    Implementation.reset = reset;\r\n    /**\r\n     * @return the project stage also emitted by the server:\r\n     * it cannot be cached and must be delivered over the server\r\n     * The value for it comes from the requestInternal parameter of the jsf.js script called \"stage\".\r\n     */\r\n    function getProjectStage() {\r\n        var _a, _b, _c, _d, _e;\r\n        return _e = (_c = (_b = (_a = this) === null || _a === void 0 ? void 0 : _a.globalConfig) === null || _b === void 0 ? void 0 : _b.projectStage, (_c !== null && _c !== void 0 ? _c : (_d = this) === null || _d === void 0 ? void 0 : _d.projectStage)), (_e !== null && _e !== void 0 ? _e : (projectStage = resolveProjectStateFromURL()));\r\n    }\r\n    Implementation.getProjectStage = getProjectStage;\r\n    function resolveProjectStateFromURL() {\r\n        /* run through all script tags and try to find the one that includes jsf.js */\r\n        var foundStage = ExtDomQuery_1.ExtDomquery.searchJsfJsFor(/stage=([^&;]*)/).value;\r\n        return (foundStage in ProjectStages) ? foundStage : null;\r\n    }\r\n    Implementation.resolveProjectStateFromURL = resolveProjectStateFromURL;\r\n    function chain(source, event) {\r\n        var funcs = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            funcs[_i - 2] = arguments[_i];\r\n        }\r\n        var ret = true;\r\n        var resolveAndExecute = function (func) {\r\n            if (\"string\" != typeof func) {\r\n                return (ret = ret && (func.call(source, event) !== false));\r\n            }\r\n            else {\r\n                //either a function or a string can be passed in case of a string we have to wrap it into another function\r\n                //it it is not a plain executable code but a definition\r\n                var sourceCode = trim(func);\r\n                if (sourceCode.indexOf(\"function \") == 0) {\r\n                    sourceCode = \"return \" + sourceCode + \" (event)\";\r\n                }\r\n                return (ret = ret && (new Function(\"event\", sourceCode).call(source, event) !== false));\r\n            }\r\n        };\r\n        monadish_1.Stream.of.apply(monadish_1.Stream, funcs).each(function (func) { return resolveAndExecute(func); });\r\n        return ret;\r\n    }\r\n    Implementation.chain = chain;\r\n    /**\r\n     * this function has to send the ajax requests\r\n     *\r\n     * following request conditions must be met:\r\n     * <ul>\r\n     *  <li> the request must be sent asynchronously! </li>\r\n     *  <li> the request must be a POST!!! request </li>\r\n     *  <li> the request url must be the form action attribute </li>\r\n     *  <li> all requests must be queued with a client side request queue to ensure the request ordering!</li>\r\n     * </ul>\r\n     *\r\n     * @param {String|Node} elem any dom element no matter being it html or jsf, from which the event is emitted\r\n     * @param {|Event|} event any javascript event supported by that object\r\n     * @param {|Object|} options  map of options being pushed into the ajax cycle\r\n     *\r\n     *\r\n     * a) transformArguments out of the function\r\n     * b) passThrough handling with a map copy with a filter map block map\r\n     */\r\n    function request(el, event, opts) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        /*\r\n         *namespace remap for our local function context we mix the entire function namespace into\r\n         *a local function variable so that we do not have to write the entire namespace\r\n         *all the time\r\n         */\r\n        event = getEvent(event);\r\n        //options not set we define a default one with nothing\r\n        var options = new Monad_1.Config(opts).deepCopy;\r\n        var elem = DomQuery_1.DQ.byId(el || event.target);\r\n        var elementId = elem.id;\r\n        var requestCtx = new Monad_1.Config({});\r\n        var internalCtx = new Monad_1.Config({});\r\n        Assertions_1.Assertions.assertRequestIntegrity(options, elem);\r\n        applyWindowId(options);\r\n        requestCtx.assign(Const_1.Const.CTX_PARAM_PASS_THR).value = fetchPassthroughValues(options.value);\r\n        requestCtx.assignIf(!!event, Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_EVT).value = (_a = event) === null || _a === void 0 ? void 0 : _a.type;\r\n        /**\r\n         * ajax pass through context with the source\r\n         * onevent and onerror\r\n         */\r\n        requestCtx.assign(Const_1.Const.SOURCE).value = elementId.value;\r\n        /**\r\n         * on event and onError...\r\n         * those values will be traversed later on\r\n         * also into the response context\r\n         */\r\n        requestCtx.assign(Const_1.Const.ON_EVENT).value = (_b = options.value) === null || _b === void 0 ? void 0 : _b.onevent;\r\n        requestCtx.assign(Const_1.Const.ON_ERROR).value = (_c = options.value) === null || _c === void 0 ? void 0 : _c.onerror;\r\n        /**\r\n         * lets drag the myfaces config params also in\r\n         */\r\n        requestCtx.assign(Const_1.Const.MYFACES).value = (_d = options.value) === null || _d === void 0 ? void 0 : _d.myfaces;\r\n        /**\r\n         * fetch the parent form\r\n         *\r\n         * note we also add an override possibility here\r\n         * so that people can use dummy forms and work\r\n         * with detached objects\r\n         */\r\n        var configId = (_g = (_f = (_e = requestCtx.value) === null || _e === void 0 ? void 0 : _e.myfaces) === null || _f === void 0 ? void 0 : _f.form, (_g !== null && _g !== void 0 ? _g : Const_1.Const.MF_NONE));\r\n        var form = resolveForm(requestCtx, elem, event);\r\n        /**\r\n         * binding contract the javax.faces.source must be set\r\n         */\r\n        requestCtx.assign(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_PARTIAL_SOURCE).value = elementId.value;\r\n        /**\r\n         * javax.faces.partial.ajax must be set to true\r\n         */\r\n        requestCtx.assign(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_AJAX).value = true;\r\n        /**\r\n         * binding contract the javax.faces.source must be set\r\n         */\r\n        requestCtx.assign(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_PARTIAL_SOURCE).value = elementId.value;\r\n        /**\r\n         * if resetValues is set to true\r\n         * then we have to set javax.faces.resetValues as well\r\n         * as pass through parameter\r\n         * the value has to be explicitly true, according to\r\n         * the specs jsdoc\r\n         */\r\n        requestCtx.assignIf(true === ((_h = options.value) === null || _h === void 0 ? void 0 : _h.resetValues), Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_RESET_VALUES).value = true;\r\n        //additional meta information to speed things up, note internal non jsf\r\n        //pass through options are stored under _mfInternal in the context\r\n        internalCtx.assign(Const_1.Const.CTX_PARAM_SRC_FRM_ID).value = form.id.value;\r\n        internalCtx.assign(Const_1.Const.CTX_PARAM_SRC_CTL_ID).value = elementId.value;\r\n        internalCtx.assign(Const_1.Const.CTX_PARAM_TR_TYPE).value = Const_1.Const.REQ_TYPE_POST;\r\n        //mojarra compatibility, mojarra is sending the form id as well\r\n        //this is not documented behavior but can be determined by running\r\n        //mojarra under blackbox conditions\r\n        //i assume it does the same as our formId_submit=1 so leaving it out\r\n        //wont hurt but for the sake of compatibility we are going to add it\r\n        requestCtx.assign(Const_1.Const.CTX_PARAM_PASS_THR, form.id.value).value = form.id.value;\r\n        applyClientWindowId(form, requestCtx);\r\n        applyExecute(options, requestCtx, form, elementId.value);\r\n        applyRender(options, requestCtx, form, elementId.value);\r\n        var delay = resolveDelay(options, requestCtx);\r\n        var timeout = resolveTimeout(options, requestCtx);\r\n        //now we enqueue the request as asynchronous runnable into our request\r\n        //queue and let the queue take over the rest\r\n        Implementation.queueHandler.addRequestToQueue(elem, form, requestCtx, internalCtx, delay, timeout);\r\n    }\r\n    Implementation.request = request;\r\n    /**\r\n     * Spec. 13.3.3\r\n     * Examining the response markup and updating the DOM tree\r\n     * @param {XMLHttpRequest} request - the ajax request\r\n     * @param {Object} context - the ajax context\r\n     */\r\n    function response(request, context) {\r\n        Response_1.Response.processResponse(request, context);\r\n    }\r\n    Implementation.response = response;\r\n    function addOnError(errorListener) {\r\n        /*error handling already done in the assert of the queue*/\r\n        errorQueue.push(errorListener);\r\n    }\r\n    Implementation.addOnError = addOnError;\r\n    function addOnEvent(eventListener) {\r\n        /*error handling already done in the assert of the queue*/\r\n        eventQueue.push(eventListener);\r\n    }\r\n    Implementation.addOnEvent = addOnEvent;\r\n    /**\r\n     * sends an event\r\n     */\r\n    function sendEvent(data, localHandler) {\r\n        if (localHandler === void 0) { localHandler = function (data) { }; }\r\n        /*now we serve the queue as well*/\r\n        localHandler(data);\r\n        eventQueue.forEach(function (fn) { return fn(data); });\r\n    }\r\n    Implementation.sendEvent = sendEvent;\r\n    /**\r\n     * error handler behavior called internally\r\n     * and only into the impl it takes care of the\r\n     * internal message transformation to a myfaces internal error\r\n     * and then uses the standard send error mechanisms\r\n     * also a double error logging prevention is done as well\r\n     *\r\n     * @param request the request currently being processed\r\n     * @param context the context affected by this error\r\n     * @param exception the exception being thrown\r\n     * @param clearRequestQueue if set to true, clears the request queue of all pending requests\r\n     */\r\n    function stdErrorHandler(request, context, exception, clearRequestQueue) {\r\n        if (clearRequestQueue === void 0) { clearRequestQueue = false; }\r\n        //newer browsers do not allow to hold additional values on native objects like exceptions\r\n        //we hence capsule it into the request, which is gced automatically\r\n        //on ie as well, since the stdErrorHandler usually is called between requests\r\n        //this is a valid approach\r\n        try {\r\n            if (threshold == \"ERROR\") {\r\n                var errorData = ErrorData_1.ErrorData.fromClient(exception);\r\n                sendError(errorData);\r\n            }\r\n        }\r\n        finally {\r\n            if (clearRequestQueue) {\r\n                Implementation.requestQueue.cleanup();\r\n            }\r\n        }\r\n    }\r\n    Implementation.stdErrorHandler = stdErrorHandler;\r\n    /**\r\n     * implementation triggering the error chain\r\n     *\r\n     * @param {Object} request the request object which comes from the xhr cycle\r\n     * @param {Object} context (Map) the context object being pushed over the xhr cycle keeping additional metadata\r\n     * @param {String} errorName the error name\r\n     * @param {String} errorMessage the error name\r\n     * @param {String} responseCode response Code\r\n     * @param {String} responseMessage response Message\r\n     *\r\n     * @param {String} serverErrorName the server error name in case of a server error\r\n     * @param {String} serverErrorMessage the server error message in case of a server error\r\n     * @param {String} caller optional caller reference for extended error messages\r\n     * @param {String} callFunc optional caller Function reference for extended error messages\r\n     *\r\n     *  handles the errors, in case of an onError exists within the context the onError is called as local error handler\r\n     *  the registered error handlers in the queue receiv an error message to be dealt with\r\n     *  and if the projectStage is at development an alert box is displayed\r\n     *\r\n     *  note: we have additional functionality here, via the global config myfaces.config.defaultErrorOutput a function can be provided\r\n     *  which changes the default output behavior from alert to something else\r\n     *\r\n     *\r\n     */\r\n    function sendError(errorData, localHandler) {\r\n        if (localHandler === void 0) { localHandler = function (data) { }; }\r\n        localHandler(errorData);\r\n        errorQueue.forEach(function (errorCallback) {\r\n            errorCallback(errorData);\r\n        });\r\n        var displayError = getGlobalConfig(\"defaultErrorOutput\", (console ? console.error : alert));\r\n        displayError(errorData);\r\n    }\r\n    Implementation.sendError = sendError;\r\n    /**\r\n     * @return the client window id of the current window, if one is given\r\n     */\r\n    function getClientWindow(node) {\r\n        var _a;\r\n        var ALTERED = \"___mf_id_altered__\";\r\n        var INIT = \"___init____\";\r\n        /**\r\n         * the search root for the dom element search\r\n         */\r\n        var searchRoot = new DomQuery_1.DQ(node || document.body);\r\n        /**\r\n         * a set of input elements holding the window id over the entire document\r\n         */\r\n        var windowIdHolders = searchRoot.querySelectorAll(\"form #\" + Const_1.Const.P_WIN_ID);\r\n        /**\r\n         * lazy helper to fetch the window id from the window url\r\n         */\r\n        var fetchWindowIdFromUrl = function () { return ExtDomQuery_1.ExtDomquery.searchJsfJsFor(/jfwid=([^&;]*)/).orElse(null).value; };\r\n        /**\r\n         * functional double check based on stream reduction\r\n         * the values should be identical or on INIT value which is a premise to\r\n         * skip the first check\r\n         *\r\n         * @param value1\r\n         * @param value2\r\n         */\r\n        var doubleCheck = function (value1, value2) {\r\n            if (value1 == ALTERED) {\r\n                return value1;\r\n            }\r\n            else if (value1 == INIT) {\r\n                return value2;\r\n            }\r\n            else if (value1 != value2) {\r\n                return ALTERED;\r\n            }\r\n            return value2;\r\n        };\r\n        /**\r\n         * helper for cleaner code, maps the value from an item\r\n         *\r\n         * @param item\r\n         */\r\n        var getValue = function (item) { return item.attr(\"value\").value; };\r\n        /**\r\n         * fetch the window id from the forms\r\n         * window ids must be present in all forms\r\n         * or non existent. If they exist all of them must be the same\r\n         */\r\n        var formWindowId = searchRoot.stream.map(getValue).reduce(doubleCheck, INIT);\r\n        //if the resulting window id is set on altered then we have an unresolvable problem\r\n        assert(formWindowId.value != ALTERED, \"Multiple different windowIds found in document\");\r\n        /**\r\n         * return the window id or null\r\n         * prio, forms under node/document and if not given then from the url\r\n         */\r\n        return _a = formWindowId.value, (_a !== null && _a !== void 0 ? _a : fetchWindowIdFromUrl());\r\n    }\r\n    Implementation.getClientWindow = getClientWindow;\r\n    /**\r\n     * collect and encode data for a given form element (must be of type form)\r\n     * find the javax.faces.ViewState element and encode its value as well!\r\n     * return a concatenated string of the encoded values!\r\n     *\r\n     * @throws Error in case of the given element not being of type form!\r\n     * https://issues.apache.org/jira/browse/MYFACES-2110\r\n     */\r\n    function getViewState(form) {\r\n        /**\r\n         *  typecheck assert!, we opt for strong typing here\r\n         *  because it makes it easier to detect bugs\r\n         */\r\n        var element = DomQuery_1.DQ.byId(form);\r\n        if (!element.isTag(\"form\")) {\r\n            throw new Error(getMessage(\"ERR_VIEWSTATE\"));\r\n        }\r\n        var formData = new XhrFormData_1.XhrFormData(element);\r\n        return formData.toString();\r\n    }\r\n    Implementation.getViewState = getViewState;\r\n    //----------------------------------------------- Methods ---------------------------------------------------------------------\r\n    function applyWindowId(options) {\r\n        var _a, _b, _c;\r\n        var windowId = (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.windowId, (_c !== null && _c !== void 0 ? _c : ExtDomQuery_1.ExtDomquery.windowId));\r\n        options.assignIf(!!windowId, Const_1.Const.P_WINDOW_ID).value = windowId;\r\n        options.delete(\"windowId\");\r\n    }\r\n    function applyRender(options, ctx, form, elementId) {\r\n        if (options.getIf(\"render\").isPresent()) {\r\n            transformValues(ctx.getIf(Const_1.Const.CTX_PARAM_PASS_THR).get({}), Const_1.Const.P_RENDER, options.getIf(\"render\").value, form, elementId);\r\n        }\r\n    }\r\n    function applyExecute(options, ctx, form, elementId) {\r\n        if (options.getIf(Const_1.Const.CTX_PARAM_EXECUTE).isPresent()) {\r\n            /*the options must be a blank delimited list of strings*/\r\n            /*compliance with Mojarra which automatically adds @this to an execute\r\n             * the spec rev 2.0a however states, if none is issued nothing at all should be sent down\r\n             */\r\n            options.assign(Const_1.Const.CTX_PARAM_EXECUTE).value = options.getIf(Const_1.Const.CTX_PARAM_EXECUTE).value + \" @this\";\r\n            transformValues(ctx.getIf(Const_1.Const.CTX_PARAM_PASS_THR).get({}), Const_1.Const.P_EXECUTE, options.getIf(Const_1.Const.CTX_PARAM_EXECUTE).value, form, elementId);\r\n        }\r\n        else {\r\n            ctx.assign(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_EXECUTE).value = elementId;\r\n        }\r\n    }\r\n    function applyClientWindowId(form, ctx) {\r\n        var clientWindow = jsf.getClientWindow(form.getAsElem(0).value);\r\n        if (clientWindow) {\r\n            ctx.assign(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_CLIENTWINDOW).value = clientWindow;\r\n        }\r\n    }\r\n    /**\r\n     * transforms the user values to the expected one\r\n     * with the proper none all form and this handling\r\n     * (note we also could use a simple string replace but then\r\n     * we would have had double entries under some circumstances)\r\n     *\r\n     * there are several standardized constants which need a special treatment\r\n     * like @all, @none, @form, @this\r\n     *\r\n     * @param targetConfig the target configuration receiving the final values\r\n     * @param targetKey the target key\r\n     * @param userValues the passed user values (aka input string which needs to be transformed)\r\n     * @param issuingForm the form where the issuing element originates\r\n     * @param issuingElementId the issuing element\r\n     */\r\n    function transformValues(targetConfig, targetKey, userValues, issuingForm, issuingElementId) {\r\n        //a cleaner implementation of the transform list method\r\n        var iterValues = (userValues) ? trim(userValues).split(/\\s+/gi) : [];\r\n        var ret = [];\r\n        var processed = {};\r\n        //TODO make this code cleaner\r\n        //the idea is simply to loop over all values and then replace\r\n        //their generic values and filter out doubles\r\n        //this is more readable than the old indexed based solution\r\n        //and not really slower because we had to build up the index in our old solution\r\n        //anyway\r\n        for (var cnt = 0; cnt < iterValues.length; cnt++) {\r\n            //avoid doubles\r\n            if (iterValues[cnt] in processed) {\r\n                continue;\r\n            }\r\n            switch (iterValues[cnt]) {\r\n                //@none no values should be sent\r\n                case Const_1.Const.IDENT_NONE:\r\n                    return targetConfig.delete(targetKey);\r\n                //@all is a pass through case according to the spec\r\n                case Const_1.Const.IDENT_ALL:\r\n                    targetConfig.assign(targetKey).value = Const_1.Const.IDENT_ALL;\r\n                    return targetConfig;\r\n                //@form pushes the issuing form id into our list\r\n                case Const_1.Const.IDENT_FORM:\r\n                    ret.push(issuingForm.id.value);\r\n                    processed[issuingForm.id.value] = true;\r\n                    break;\r\n                //@this is replaced with the current issuing element id\r\n                case Const_1.Const.IDENT_THIS:\r\n                    if (!(issuingElementId in processed)) {\r\n                        ret.push(issuingElementId);\r\n                        processed[issuingElementId] = true;\r\n                    }\r\n                    break;\r\n                default:\r\n                    ret.push(iterValues[cnt]);\r\n                    processed[iterValues[cnt]] = true;\r\n            }\r\n        }\r\n        //We now add the target as joined list\r\n        targetConfig.assign(targetKey).value = ret.join(\" \");\r\n        return targetConfig;\r\n    }\r\n    function fetchPassthroughValues(mappedOpts) {\r\n        return monadish_1.Stream.ofAssoc(mappedOpts)\r\n            .filter(function (item) { return !(item[0] in BlockFilter); })\r\n            .collect(new SourcesCollectors_1.AssocArrayCollector());\r\n    }\r\n    function resolveForm(requestCtx, elem, event) {\r\n        var _a, _b, _c;\r\n        var configId = (_c = (_b = (_a = requestCtx.value) === null || _a === void 0 ? void 0 : _a.myfaces) === null || _b === void 0 ? void 0 : _b.form, (_c !== null && _c !== void 0 ? _c : Const_1.Const.MF_NONE)); //requestCtx.getIf(MYFACES, \"form\").orElse(MF_NONE).value;\r\n        var form = DomQuery_1.DQ\r\n            .byId(configId)\r\n            .orElseLazy(function () { return getForm(elem.getAsElem(0).value, event); });\r\n        return form;\r\n    }\r\n    function resolveTimeout(options, requestCtx) {\r\n        var _a;\r\n        var getCfg = getLocalOrGlobalConfig;\r\n        return _a = options.getIf(Const_1.Const.CTX_PARAM_TIMEOUT).value, (_a !== null && _a !== void 0 ? _a : getCfg(requestCtx.value, Const_1.Const.CTX_PARAM_TIMEOUT, 0));\r\n    }\r\n    function resolveDelay(options, requestCtx) {\r\n        var _a;\r\n        var getCfg = getLocalOrGlobalConfig;\r\n        return _a = options.getIf(Const_1.Const.CTX_PARAM_DELAY).value, (_a !== null && _a !== void 0 ? _a : getCfg(requestCtx.value, Const_1.Const.CTX_PARAM_DELAY, 0));\r\n    }\r\n})(Implementation = exports.Implementation || (exports.Implementation = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar myfaces;\r\n(function (myfaces) {\r\n    var ConfigHolder = /** @class */ (function () {\r\n        function ConfigHolder() {\r\n            this.projectStage = null;\r\n            this.separator = null;\r\n        }\r\n        return ConfigHolder;\r\n    }());\r\n    myfaces.ConfigHolder = ConfigHolder;\r\n    myfaces.config = new ConfigHolder();\r\n    //if (window && \"undefined\" == typeof window.myfaces) {\r\n    //    window.myfaces = myfaces;\r\n    //}\r\n})(myfaces = exports.myfaces || (exports.myfaces = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar ResponseProcessor_1 = require(\"./ResponseProcessor\");\r\nvar ResonseDataResolver_1 = require(\"./ResonseDataResolver\");\r\nvar Response;\r\n(function (Response) {\r\n    var resolveResponseXML = ResonseDataResolver_1.ResonseDataResolver.resolveResponseXML;\r\n    var resolveContexts = ResonseDataResolver_1.ResonseDataResolver.resolveContexts;\r\n    /**\r\n     * Standardized jsf.js response\r\n     * this one is called straight from jsf.js.response\r\n     *\r\n     * The processing follows the spec by going for the responseXML\r\n     * and processing its tags\r\n     *\r\n     * @param {XMLHttpRequest} request (xhrRequest) - xhr request object\r\n     * @param {[key: string]: any} context (Map) - AJAX context\r\n     *\r\n     */\r\n    function processResponse(request, context) {\r\n        var req = monadish_1.Config.fromNullable(request);\r\n        var _a = resolveContexts(context), externalContext = _a.externalContext, internalContext = _a.internalContext;\r\n        var responseXML = resolveResponseXML(req);\r\n        var responseProcessor = new ResponseProcessor_1.ResponseProcessor(req, externalContext, internalContext);\r\n        internalContext.assign(Const_1.Const.RESPONSE_XML).value = responseXML;\r\n        //we now process the partial tags, or in none given raise an error\r\n        responseXML.querySelectorAll(Const_1.Const.RESP_PARTIAL)\r\n            .each(function (item) { return processPartialTag(item, responseProcessor, internalContext); });\r\n        //we now process the viewstates and the evals deferred\r\n        //the reason for this is that often it is better\r\n        //to wait until the document has caught up before\r\n        //doing any evals even on embedded scripts\r\n        responseProcessor.fixViewStates();\r\n        responseProcessor.globalEval();\r\n        responseProcessor.done();\r\n    }\r\n    Response.processResponse = processResponse;\r\n    /**\r\n     * highest node partial-response from there the main operations are triggered\r\n     */\r\n    function processPartialTag(node, responseProcessor, internalContext) {\r\n        internalContext.assign(Const_1.Const.PARTIAL_ID).value = node.id;\r\n        var SEL_SUB_TAGS = [Const_1.Const.CMD_ERROR, Const_1.Const.CMD_REDIRECT, Const_1.Const.CMD_CHANGES].join(\",\");\r\n        //now we can process the main operations\r\n        node.getIf(SEL_SUB_TAGS).each(function (node) {\r\n            switch (node.tagName.value) {\r\n                case Const_1.Const.CMD_ERROR:\r\n                    responseProcessor.error(node);\r\n                    break;\r\n                case Const_1.Const.CMD_REDIRECT:\r\n                    responseProcessor.redirect(node);\r\n                    break;\r\n                case Const_1.Const.CMD_CHANGES:\r\n                    processChangesTag(node, responseProcessor);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    var processInsert = function (responseProcessor, node) {\r\n        //path1 insert after as child tags\r\n        if (node.querySelectorAll([Const_1.Const.TAG_BEFORE, Const_1.Const.TAG_AFTER].join(\",\")).length) {\r\n            responseProcessor.insertWithSubtags(node);\r\n        }\r\n        else { //insert before after with id\r\n            responseProcessor.insert(node);\r\n        }\r\n    };\r\n    /**\r\n     * next level changes tag\r\n     *\r\n     * @param node\r\n     * @param responseProcessor\r\n     */\r\n    function processChangesTag(node, responseProcessor) {\r\n        var ALLOWED_TAGS = [Const_1.Const.CMD_UPDATE, Const_1.Const.CMD_EVAL, Const_1.Const.CMD_INSERT, Const_1.Const.CMD_DELETE, Const_1.Const.CMD_ATTRIBUTES, Const_1.Const.CMD_EXTENSION].join(\",\");\r\n        node.getIf(ALLOWED_TAGS).each(function (node) {\r\n            switch (node.tagName.value) {\r\n                case Const_1.Const.CMD_UPDATE:\r\n                    processUpdateTag(node, responseProcessor);\r\n                    break;\r\n                case Const_1.Const.CMD_EVAL:\r\n                    responseProcessor.eval(node);\r\n                    break;\r\n                case Const_1.Const.CMD_INSERT:\r\n                    processInsert(responseProcessor, node);\r\n                    break;\r\n                case Const_1.Const.CMD_DELETE:\r\n                    responseProcessor.delete(node);\r\n                    break;\r\n                case Const_1.Const.CMD_ATTRIBUTES:\r\n                    responseProcessor.attributes(node);\r\n                    break;\r\n                case Const_1.Const.CMD_EXTENSION:\r\n                    break;\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n    /**\r\n     * branch tag update.. drill further down into the updates\r\n     * special case viewstate in that case it is a leaf\r\n     * and the viewstate must be processed\r\n     *\r\n     * @param node\r\n     * @param responseProcessor\r\n     */\r\n    function processUpdateTag(node, responseProcessor) {\r\n        if (!responseProcessor.processViewState(node)) {\r\n            handleElementUpdate(node, responseProcessor);\r\n        }\r\n    }\r\n    /**\r\n     * element update\r\n     *\r\n     * @param node\r\n     * @param responseProcessor\r\n     */\r\n    function handleElementUpdate(node, responseProcessor) {\r\n        var cdataBlock = node.cDATAAsString;\r\n        switch (node.id.value) {\r\n            case Const_1.Const.P_VIEWROOT:\r\n                responseProcessor.replaceViewRoot(monadish_1.DQ.fromMarkup(cdataBlock.substring(cdataBlock.indexOf(\"<html\"))));\r\n                break;\r\n            case Const_1.Const.P_VIEWHEAD:\r\n                responseProcessor.replaceHead(monadish_1.DQ.fromMarkup(cdataBlock));\r\n                break;\r\n            case Const_1.Const.P_VIEWBODY:\r\n                responseProcessor.replaceBody(monadish_1.DQ.fromMarkup(cdataBlock));\r\n                break;\r\n            default: //htmlItem replacement\r\n                responseProcessor.update(node, cdataBlock);\r\n                break;\r\n        }\r\n    }\r\n})(Response = exports.Response || (exports.Response = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DomQuery_1 = require(\"./DomQuery\");\r\nexports.DomQuery = DomQuery_1.DomQuery;\r\nexports.ElementAttribute = DomQuery_1.ElementAttribute;\r\nexports.DomQueryCollector = DomQuery_1.DomQueryCollector;\r\nexports.DQ = DomQuery_1.DQ;\r\nvar Lang_1 = require(\"./Lang\");\r\nexports.Lang = Lang_1.Lang;\r\nvar Monad_1 = require(\"./Monad\");\r\nexports.Config = Monad_1.Config;\r\nexports.Monad = Monad_1.Monad;\r\nexports.Optional = Monad_1.Optional;\r\nexports.ValueEmbedder = Monad_1.ValueEmbedder;\r\nvar XmlQuery_1 = require(\"./XmlQuery\");\r\nexports.XMLQuery = XmlQuery_1.XMLQuery;\r\nexports.XQ = XmlQuery_1.XQ;\r\nvar Stream_1 = require(\"./Stream\");\r\nexports.Stream = Stream_1.Stream;\r\nexports.LazyStream = Stream_1.LazyStream;\r\nvar SourcesCollectors_1 = require(\"./SourcesCollectors\");\r\nexports.ArrayStreamDataSource = SourcesCollectors_1.ArrayStreamDataSource;\r\nexports.MappedStreamDataSource = SourcesCollectors_1.MappedStreamDataSource;\r\nexports.FilteredStreamDatasource = SourcesCollectors_1.FilteredStreamDatasource;\r\nexports.FlatMapStreamDataSource = SourcesCollectors_1.FlatMapStreamDataSource;\r\nexports.QueryFormStringCollector = SourcesCollectors_1.QueryFormStringCollector;\r\nexports.ArrayCollector = SourcesCollectors_1.ArrayCollector;\r\nexports.AssocArrayCollector = SourcesCollectors_1.AssocArrayCollector;\r\nexports.FormDataCollector = SourcesCollectors_1.FormDataCollector;\r\nexports.QueryFormDataCollector = SourcesCollectors_1.QueryFormDataCollector;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Monad_1 = require(\"./Monad\");\r\nvar Stream_1 = require(\"./Stream\");\r\nvar Lang_1 = require(\"./Lang\");\r\nvar trim = Lang_1.Lang.trim;\r\nvar objToArray = Lang_1.Lang.objToArray;\r\nvar isString = Lang_1.Lang.isString;\r\nvar equalsIgnoreCase = Lang_1.Lang.equalsIgnoreCase;\r\n// @ts-ignore supression needed here due to fromnullable\r\nvar ElementAttribute = /** @class */ (function (_super) {\r\n    __extends(ElementAttribute, _super);\r\n    function ElementAttribute(element, name, defaultVal) {\r\n        if (defaultVal === void 0) { defaultVal = null; }\r\n        var _this = _super.call(this, element, name) || this;\r\n        _this.element = element;\r\n        _this.name = name;\r\n        _this.defaultVal = defaultVal;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ElementAttribute.prototype, \"value\", {\r\n        get: function () {\r\n            var _a;\r\n            var val = (_a = this.element.get(0)).orElse.apply(_a, []).values;\r\n            if (!val.length) {\r\n                return this.defaultVal;\r\n            }\r\n            return val[0].getAttribute(this.name);\r\n        },\r\n        set: function (value) {\r\n            var _a;\r\n            var val = (_a = this.element.get(0)).orElse.apply(_a, []).values;\r\n            for (var cnt = 0; cnt < val.length; cnt++) {\r\n                val[cnt].setAttribute(this.name, value);\r\n            }\r\n            val[0].setAttribute(this.name, value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ElementAttribute.prototype.getClass = function () {\r\n        return ElementAttribute;\r\n    };\r\n    ElementAttribute.fromNullable = function (value, valueKey) {\r\n        if (valueKey === void 0) { valueKey = \"value\"; }\r\n        return new ElementAttribute(value, valueKey);\r\n    };\r\n    return ElementAttribute;\r\n}(Monad_1.ValueEmbedder));\r\nexports.ElementAttribute = ElementAttribute;\r\n/**\r\n * small helper for the specialized jsf case\r\n * @param src\r\n * @constructor\r\n */\r\nvar DEFAULT_JSF_WHITELIST = function (src) {\r\n    return (src.indexOf(\"ln=scripts\") == -1 &&\r\n        src.indexOf(\"ln=javax.faces\") == -1) ||\r\n        (src.indexOf(\"/jsf.js\") == -1 &&\r\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\r\n};\r\n/**\r\n * Monadic DomNode representation, ala jquery\r\n * This is a thin wrapper over querySelectorAll\r\n * to get slim monadic support\r\n * to reduce implementation code on the users side.\r\n * This is vital for frameworks which want to rely on\r\n * plain dom but still do not want to lose\r\n * the reduced code footprint of querying dom trees and traversing\r\n * by using functional patterns.\r\n *\r\n * Also a few convenience methods are added to reduce\r\n * the code footprint of standard dom processing\r\n * operations like eval\r\n *\r\n * TODO add jquery fallback support, since it is supported\r\n * in most older systems\r\n * Note parts of this code still stem from the Dom.js I have written 10 years\r\n * ago, those parts look a little bit ancient and will be replaced over time.\r\n *\r\n */\r\nvar DomQuery = /** @class */ (function () {\r\n    function DomQuery() {\r\n        var _a;\r\n        var rootNode = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            rootNode[_i] = arguments[_i];\r\n        }\r\n        this.rootNode = [];\r\n        this.pos = -1;\r\n        this._limits = -1;\r\n        if (Monad_1.Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\r\n            return;\r\n        }\r\n        else {\r\n            //we need to flatten out the arrays\r\n            for (var cnt = 0; cnt < rootNode.length; cnt++) {\r\n                if (isString(rootNode[cnt])) {\r\n                    var foundElement = DomQuery.querySelectorAll(rootNode[cnt]);\r\n                    if (!foundElement.isAbsent()) {\r\n                        rootNode.push.apply(rootNode, foundElement.values);\r\n                    }\r\n                }\r\n                else if (rootNode[cnt] instanceof DomQuery) {\r\n                    (_a = this.rootNode).push.apply(_a, rootNode[cnt].values);\r\n                }\r\n                else {\r\n                    this.rootNode.push(rootNode[cnt]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(DomQuery.prototype, \"value\", {\r\n        /**\r\n         * returns the first element\r\n         */\r\n        get: function () {\r\n            return this.getAsElem(0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"values\", {\r\n        get: function () {\r\n            return this.allElems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"id\", {\r\n        /**\r\n         * returns the id of the first element\r\n         */\r\n        get: function () {\r\n            return new ElementAttribute(this.get(0), \"id\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"length\", {\r\n        /**\r\n         * length of the entire query set\r\n         */\r\n        get: function () {\r\n            return this.rootNode.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"tagName\", {\r\n        /**\r\n         * convenience method for tagName\r\n         */\r\n        get: function () {\r\n            return this.getAsElem(0).getIf(\"tagName\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"nodeName\", {\r\n        /**\r\n         * convenience method for nodeName\r\n         */\r\n        get: function () {\r\n            return this.getAsElem(0).getIf(\"nodeName\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DomQuery.prototype.isTag = function (tagName) {\r\n        return !this.isAbsent()\r\n            && (this.nodeName.orElse(\"__none___\")\r\n                .value.toLowerCase() == tagName.toLowerCase()\r\n                || this.tagName.orElse(\"__none___\")\r\n                    .value.toLowerCase() == tagName.toLowerCase());\r\n    };\r\n    Object.defineProperty(DomQuery.prototype, \"type\", {\r\n        /**\r\n         * convenience property for type\r\n         *\r\n         * returns null in case of no type existing otherwise\r\n         * the type of the first element\r\n         */\r\n        get: function () {\r\n            return this.getAsElem(0).getIf(\"type\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"name\", {\r\n        /**\r\n         * convenience property for name\r\n         *\r\n         * returns null in case of no type existing otherwise\r\n         * the name of the first element\r\n         */\r\n        get: function () {\r\n            return new Monad_1.ValueEmbedder(this.getAsElem(0).value, \"name\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"inputValue\", {\r\n        /**\r\n         * convenience property for value\r\n         *\r\n         * returns null in case of no type existing otherwise\r\n         * the value of the first element\r\n         */\r\n        get: function () {\r\n            if (this.getAsElem(0).getIf(\"value\").isPresent()) {\r\n                return new Monad_1.ValueEmbedder(this.getAsElem(0).value);\r\n            }\r\n            else {\r\n                return Monad_1.ValueEmbedder.absent;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"checked\", {\r\n        get: function () {\r\n            return Stream_1.Stream.of.apply(Stream_1.Stream, this.values).allMatch(function (el) { return !!el.checked; });\r\n        },\r\n        set: function (newChecked) {\r\n            this.eachElem(function (el) { return el.checked = newChecked; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"elements\", {\r\n        get: function () {\r\n            var _this = this;\r\n            var elements = this.stream.flatMap(function (item) {\r\n                var formElement = item.value.value;\r\n                return new Stream_1.Stream(formElement.elements ? objToArray(formElement.elements) : []);\r\n            }).filter(function (item) { return !!item; }).collect(new DomQueryCollector());\r\n            return elements\r\n                .orElseLazy(function () { return _this.querySelectorAll(\"input, select, textarea, fieldset\"); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"disabled\", {\r\n        /**\r\n         * todo align this api with the rest of the apis\r\n         */\r\n        get: function () {\r\n            return this.attr(\"disabled\").isPresent();\r\n        },\r\n        set: function (disabled) {\r\n            // this.attr(\"disabled\").value = disabled + \"\";\r\n            if (!disabled) {\r\n                this.removeAttribute(\"disabled\");\r\n            }\r\n            else {\r\n                this.attr(\"disabled\").value = \"disabled\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DomQuery.prototype.removeAttribute = function (name) {\r\n        this.eachElem(function (item) { return item.removeAttribute(name); });\r\n    };\r\n    Object.defineProperty(DomQuery.prototype, \"childNodes\", {\r\n        get: function () {\r\n            var childNodeArr = [];\r\n            this.eachElem(function (item) {\r\n                childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\r\n            });\r\n            return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], childNodeArr)))();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"stream\", {\r\n        /**\r\n         * binding into stream\r\n         */\r\n        get: function () {\r\n            return new (Stream_1.Stream.bind.apply(Stream_1.Stream, __spreadArrays([void 0], this.asArray)))();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"lazyStream\", {\r\n        /**\r\n         * fetches a lazy stream representation\r\n         * lazy should be applied if you have some filters etc\r\n         * in between, this can reduce the number of post filter operations\r\n         * and ram usage\r\n         * significantly because the operations are done lazily and stop\r\n         * once they hit a dead end.\r\n         */\r\n        get: function () {\r\n            return Stream_1.LazyStream.ofStreamDataSource(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DomQuery.prototype, \"asArray\", {\r\n        get: function () {\r\n            var ret = [];\r\n            this.each(function (item) {\r\n                ret.push(item);\r\n            });\r\n            return ret;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * easy query selector all producer\r\n     *\r\n     * @param selector the selector\r\n     * @returns a results dom query object\r\n     */\r\n    DomQuery.querySelectorAll = function (selector) {\r\n        return new DomQuery(document).querySelectorAll(selector);\r\n    };\r\n    /**\r\n     * byId producer\r\n     *\r\n     * @param selector id\r\n     * @return a DomQuery containing the found elements\r\n     */\r\n    DomQuery.byId = function (selector) {\r\n        if (isString(selector)) {\r\n            return new DomQuery(document).byId(selector);\r\n        }\r\n        else {\r\n            return new DomQuery(selector);\r\n        }\r\n    };\r\n    /**\r\n     * byTagName producer\r\n     *\r\n     * @param selector name\r\n     * @return a DomQuery containing the found elements\r\n     */\r\n    DomQuery.byTagName = function (selector) {\r\n        if (isString(selector)) {\r\n            return new DomQuery(document).byTagName(selector);\r\n        }\r\n        else {\r\n            return new DomQuery(selector);\r\n        }\r\n    };\r\n    DomQuery.globalEval = function (code, nonce) {\r\n        return new DomQuery(document).globalEval(code, nonce);\r\n    };\r\n    /**\r\n     * builds the ie nodes properly in a placeholder\r\n     * and bypasses a non script insert bug that way\r\n     * @param markup the marku code\r\n     */\r\n    DomQuery.fromMarkup = function (markup) {\r\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\r\n        var doc = document.implementation.createHTMLDocument(\"\");\r\n        markup = trim(markup);\r\n        var lowerMarkup = markup.toLowerCase();\r\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\r\n            lowerMarkup.indexOf('<html') != -1 ||\r\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\r\n            lowerMarkup.indexOf('<body') != -1) {\r\n            doc.documentElement.innerHTML = markup;\r\n            return new DomQuery(doc.documentElement);\r\n        }\r\n        else {\r\n            var startsWithTag = function (str, tagName) {\r\n                var tag1 = [\"<\", tagName, \">\"].join(\"\");\r\n                var tag2 = [\"<\", tagName, \" \"].join(\"\");\r\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\r\n            };\r\n            var dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\r\n            //table needs special treatment due to the browsers auto creation\r\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\r\n                dummyPlaceHolder.html(\"<table>\" + markup + \"</table>\");\r\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\r\n            }\r\n            else if (startsWithTag(lowerMarkup, \"tfoot\")) {\r\n                dummyPlaceHolder.html(\"<table><thead></thead><tbody><tbody\" + markup + \"</table>\");\r\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\r\n            }\r\n            else if (startsWithTag(lowerMarkup, \"tr\")) {\r\n                dummyPlaceHolder.html(\"<table><tbody>\" + markup + \"</tbody></table>\");\r\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\r\n            }\r\n            else if (startsWithTag(lowerMarkup, \"td\")) {\r\n                dummyPlaceHolder.html(\"<table><tbody><tr>\" + markup + \"</tr></tbody></table>\");\r\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\r\n            }\r\n            dummyPlaceHolder.html(markup);\r\n            return dummyPlaceHolder.childNodes.detach();\r\n        }\r\n    };\r\n    /**\r\n     * returns the nth element as domquery\r\n     * from the internal elements\r\n     * note if you try to reach a non existing element position\r\n     * you will get back an absent entry\r\n     *\r\n     * @param index the nth index\r\n     */\r\n    DomQuery.prototype.get = function (index) {\r\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\r\n    };\r\n    /**\r\n     * returns the nth element as optional of an Element object\r\n     * @param index the number from the index\r\n     * @param defaults the default value if the index is overrun default Optional.absent\r\n     */\r\n    DomQuery.prototype.getAsElem = function (index, defaults) {\r\n        if (defaults === void 0) { defaults = Monad_1.Optional.absent; }\r\n        return (index < this.rootNode.length) ? Monad_1.Optional.fromNullable(this.rootNode[index]) : defaults;\r\n    };\r\n    /**\r\n     * returns the value array< of all elements\r\n     */\r\n    DomQuery.prototype.allElems = function () {\r\n        return this.rootNode;\r\n    };\r\n    /**\r\n     * absent no values reached?\r\n     */\r\n    DomQuery.prototype.isAbsent = function () {\r\n        return this.length == 0;\r\n    };\r\n    /**\r\n     * should make the code clearer\r\n     * note if you pass a function\r\n     * this refers to the active dopmquery object\r\n     */\r\n    DomQuery.prototype.isPresent = function (presentRunnable) {\r\n        var absent = this.isAbsent();\r\n        if (!absent && presentRunnable) {\r\n            presentRunnable.call(this, this);\r\n        }\r\n        return !absent;\r\n    };\r\n    /**\r\n     * should make the code clearer\r\n     * note if you pass a function\r\n     * this refers to the active dopmquery object\r\n     *\r\n     *\r\n     * @param presentRunnable\r\n     */\r\n    DomQuery.prototype.ifPresentLazy = function (presentRunnable) {\r\n        if (presentRunnable === void 0) { presentRunnable = function () {\r\n        }; }\r\n        this.isPresent.call(this, presentRunnable);\r\n        return this;\r\n    };\r\n    /**\r\n     * remove all affected nodes from this query object from the dom tree\r\n     */\r\n    DomQuery.prototype.delete = function () {\r\n        this.eachElem(function (node) {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * query selector all on the existing dom query object\r\n     *\r\n     * @param selector the standard selector\r\n     * @return a DomQuery with the results\r\n     */\r\n    DomQuery.prototype.querySelectorAll = function (selector) {\r\n        var _a, _b, _c;\r\n        if (!((_b = (_a = this) === null || _a === void 0 ? void 0 : _a.rootNode) === null || _b === void 0 ? void 0 : _b.length)) {\r\n            return this;\r\n        }\r\n        var nodes = [];\r\n        for (var cnt = 0; cnt < this.rootNode.length; cnt++) {\r\n            if (!((_c = this.rootNode[cnt]) === null || _c === void 0 ? void 0 : _c.querySelectorAll)) {\r\n                continue;\r\n            }\r\n            var res = this.rootNode[cnt].querySelectorAll(selector);\r\n            nodes = nodes.concat(objToArray(res));\r\n        }\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], nodes)))();\r\n    };\r\n    /**\r\n     * core byId method\r\n     * @param id the id to search for\r\n     * @param includeRoot also match the root element?\r\n     */\r\n    DomQuery.prototype.byId = function (id, includeRoot) {\r\n        var _a;\r\n        var res = [];\r\n        for (var cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\r\n            if (((_a = this.rootNode[cnt]) === null || _a === void 0 ? void 0 : _a.id) == id) {\r\n                res.push(new DomQuery(this.rootNode[cnt]));\r\n            }\r\n        }\r\n        //for some strange kind of reason the # selector fails\r\n        //on hidden elements we use the attributes match selector\r\n        //that works\r\n        res = res.concat(this.querySelectorAll(\"[id=\\\"\" + id + \"\\\"]\"));\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], res)))();\r\n    };\r\n    /**\r\n     * same as byId just for the tag name\r\n     * @param tagName\r\n     * @param includeRoot\r\n     */\r\n    DomQuery.prototype.byTagName = function (tagName, includeRoot) {\r\n        var _a;\r\n        var res = [];\r\n        for (var cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\r\n            if (((_a = this.rootNode[cnt]) === null || _a === void 0 ? void 0 : _a.tagName) == tagName) {\r\n                res.push(new DomQuery(this.rootNode[cnt]));\r\n            }\r\n        }\r\n        res = res.concat(this.querySelectorAll(tagName));\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], res)))();\r\n    };\r\n    /**\r\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\r\n     * or let value myQuery.attr(\"class\").value\r\n     * @param attr the attribute to set\r\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\r\n     */\r\n    DomQuery.prototype.attr = function (attr, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = null; }\r\n        return new ElementAttribute(this, attr, defaultValue);\r\n    };\r\n    /**\r\n     * hasclass, checks for an existing class in the class attributes\r\n     *\r\n     * @param clazz the class to search for\r\n     */\r\n    DomQuery.prototype.hasClass = function (clazz) {\r\n        var hasIt = false;\r\n        this.each(function (item) {\r\n            var oldClass = item.attr(\"class\").value || \"\";\r\n            if (oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\r\n                return;\r\n            }\r\n            else {\r\n                var oldClasses = oldClass.split(/\\s+/gi);\r\n                var found = false;\r\n                for (var cnt = 0; cnt < oldClasses.length && !found; cnt++) {\r\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\r\n                }\r\n                hasIt = hasIt || found;\r\n                if (hasIt) {\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return hasIt;\r\n    };\r\n    /**\r\n     * appends a class string if not already in the element(s)\r\n     *\r\n     * @param clazz the style class to append\r\n     */\r\n    DomQuery.prototype.addClass = function (clazz) {\r\n        var _this = this;\r\n        this.each(function (item) {\r\n            var oldClass = item.attr(\"class\").value || \"\";\r\n            if (!_this.hasClass(clazz)) {\r\n                item.attr(\"class\").value = trim(oldClass + \" \" + clazz);\r\n                return;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * remove the style class if in the class definitions\r\n     *\r\n     * @param clazz\r\n     */\r\n    DomQuery.prototype.removeClass = function (clazz) {\r\n        var _this = this;\r\n        this.each(function (item) {\r\n            if (_this.hasClass(clazz)) {\r\n                var oldClass = item.attr(\"class\").value || \"\";\r\n                var newClasses = [];\r\n                var oldClasses = oldClass.split(/\\s+/gi);\r\n                for (var cnt = 0; cnt < oldClasses.length; cnt++) {\r\n                    if (oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\r\n                        newClasses.push(oldClasses[cnt]);\r\n                    }\r\n                }\r\n                item.attr(\"class\").value = newClasses.join(\" \");\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * checks whether we have a multipart element in our children\r\n     */\r\n    DomQuery.prototype.isMultipartCandidate = function () {\r\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\r\n    };\r\n    /**\r\n     * innerHtml equivalkent\r\n     * equivalent to jqueries html\r\n     * as setter the html is set and the\r\n     * DomQuery is given back\r\n     * as getter the html string is returned\r\n     *\r\n     * @param inval\r\n     */\r\n    DomQuery.prototype.html = function (inval) {\r\n        if (Monad_1.Optional.fromNullable(inval).isAbsent()) {\r\n            return this.isPresent() ? Monad_1.Optional.fromNullable(this.innerHtml) : Monad_1.Optional.absent;\r\n        }\r\n        this.innerHtml = inval;\r\n        return this;\r\n    };\r\n    Object.defineProperty(DomQuery.prototype, \"innerHtml\", {\r\n        get: function () {\r\n            var retArr = [];\r\n            this.eachElem(function (elem) { return retArr.push(elem.innerHTML); });\r\n            return retArr.join(\"\");\r\n        },\r\n        set: function (inVal) {\r\n            this.eachElem(function (elem) { return elem.innerHTML = inVal; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\r\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\r\n    DomQuery.prototype._mozMatchesSelector = function (toMatch, selector) {\r\n        var prot = toMatch;\r\n        var matchesSelector = prot.matchesSelector ||\r\n            prot.mozMatchesSelector ||\r\n            prot.msMatchesSelector ||\r\n            prot.oMatchesSelector ||\r\n            prot.webkitMatchesSelector ||\r\n            function (s) {\r\n                var matches = (document || window.ownerDocument).querySelectorAll(s), i = matches.length;\r\n                while (--i >= 0 && matches.item(i) !== toMatch) {\r\n                }\r\n                return i > -1;\r\n            };\r\n        return matchesSelector.call(toMatch, selector);\r\n    };\r\n    /**\r\n     * filters the current dom query elements\r\n     * upon a given selector\r\n     *\r\n     * @param selector\r\n     */\r\n    DomQuery.prototype.filterSelector = function (selector) {\r\n        var _this = this;\r\n        var matched = [];\r\n        this.eachElem(function (item) {\r\n            if (_this._mozMatchesSelector(item, selector)) {\r\n                matched.push(item);\r\n            }\r\n        });\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], matched)))();\r\n    };\r\n    DomQuery.prototype.matchesSelector = function (selector) {\r\n        var _this = this;\r\n        this.eachElem(function (item) {\r\n            if (!_this._mozMatchesSelector(item, selector)) {\r\n                return false;\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * easy node traversal, you can pass\r\n     * a set of node selectors which are joined as direct childs\r\n     *\r\n     * not the rootnodes are not in the getIf, those are always the child nodes\r\n     *\r\n     * @param nodeSelector\r\n     */\r\n    DomQuery.prototype.getIf = function () {\r\n        var nodeSelector = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            nodeSelector[_i] = arguments[_i];\r\n        }\r\n        var selectorStage = this.childNodes;\r\n        for (var cnt = 0; cnt < nodeSelector.length; cnt++) {\r\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\r\n            if (selectorStage.isAbsent()) {\r\n                return selectorStage;\r\n            }\r\n        }\r\n        return selectorStage;\r\n    };\r\n    DomQuery.prototype.eachElem = function (func) {\r\n        for (var cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\r\n            if (func(this.rootNode[cnt], cnt) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    DomQuery.prototype.firstElem = function (func) {\r\n        if (func === void 0) { func = function (item) { return item; }; }\r\n        if (this.rootNode.length > 1) {\r\n            func(this.rootNode[0], 0);\r\n        }\r\n        return this;\r\n    };\r\n    DomQuery.prototype.each = function (func) {\r\n        Stream_1.Stream.of.apply(Stream_1.Stream, this.rootNode).each(function (item, cnt) {\r\n            //we could use a filter, but for the best performance we dont\r\n            if (item == null) {\r\n                return;\r\n            }\r\n            return func(DomQuery.byId(item), cnt);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * returns a new dom query containing only the first element max\r\n     *\r\n     * @param func a an optional callback function to perform an operation on the first element\r\n     */\r\n    DomQuery.prototype.first = function (func) {\r\n        if (func === void 0) { func = function (item) { return item; }; }\r\n        if (this.rootNode.length >= 1) {\r\n            func(this.get(0), 0);\r\n            return this.get(0);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * filter function which filters a subset\r\n     *\r\n     * @param func\r\n     */\r\n    DomQuery.prototype.filter = function (func) {\r\n        var reArr = [];\r\n        this.each(function (item) {\r\n            func(item) ? reArr.push(item) : null;\r\n        });\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], reArr)))();\r\n    };\r\n    //TODO append prepend\r\n    /**\r\n     * global eval head appendix method\r\n     * no other methods are supported anymore\r\n     * @param code the code to be evaled\r\n     * @param  nonce optional  nonce key for higher security\r\n     */\r\n    DomQuery.prototype.globalEval = function (code, nonce) {\r\n        var head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\r\n        var script = document.createElement(\"script\");\r\n        if (nonce) {\r\n            script.setAttribute(\"nonce\", nonce);\r\n        }\r\n        script.type = \"text/javascript\";\r\n        script.innerHTML = code;\r\n        var newScriptElement = head.appendChild(script);\r\n        head.removeChild(newScriptElement);\r\n        return this;\r\n    };\r\n    /**\r\n     * detaches a set of nodes from their parent elements\r\n     * in a browser independend manner\r\n     * @param {Object} items the items which need to be detached\r\n     * @return {Array} an array of nodes with the detached dom nodes\r\n     */\r\n    DomQuery.prototype.detach = function () {\r\n        this.eachElem(function (item) {\r\n            item.parentNode.removeChild(item);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * appends the current set of elements\r\n     * to the element or first element passed via elem\r\n     * @param elem\r\n     */\r\n    DomQuery.prototype.appendTo = function (elem) {\r\n        this.eachElem(function (item) {\r\n            var value1 = elem.getAsElem(0).orElseLazy(function () {\r\n                return {\r\n                    appendChild: function (theItem) {\r\n                    }\r\n                };\r\n            }).value;\r\n            value1.appendChild(item);\r\n        });\r\n    };\r\n    /**\r\n     * loads and evals a script from a source uri\r\n     *\r\n     * @param src the source to be loaded and evaled\r\n     * @param defer in miliseconds execution default (0 == no defer)\r\n     * @param charSet\r\n     */\r\n    DomQuery.prototype.loadScriptEval = function (src, defer, charSet) {\r\n        var _this = this;\r\n        if (defer === void 0) { defer = 0; }\r\n        if (charSet === void 0) { charSet = \"utf-8\"; }\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", src, false);\r\n        if (charSet) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\r\n        }\r\n        xhr.send(null);\r\n        xhr.onload = function (responseData) {\r\n            //defer also means we have to process after the ajax response\r\n            //has been processed\r\n            //we can achieve that with a small timeout, the timeout\r\n            //triggers after the processing is done!\r\n            if (!defer) {\r\n                _this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\r\n            }\r\n            else {\r\n                //TODO not ideal we maybe ought to move to something else here\r\n                //but since it is not in use yet, it is ok\r\n                setTimeout(function () {\r\n                    _this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\r\n                }, defer);\r\n            }\r\n        };\r\n        xhr.onerror = function (data) {\r\n            throw Error(data);\r\n        };\r\n        //since we are synchronous we do it after not with onReadyStateChange\r\n        return this;\r\n    };\r\n    DomQuery.prototype.insertAfter = function () {\r\n        var toInsertParams = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            toInsertParams[_i] = arguments[_i];\r\n        }\r\n        this.each(function (existingItem) {\r\n            var existingElement = existingItem.getAsElem(0).value;\r\n            var rootNode = existingElement.parentNode;\r\n            var _loop_1 = function (cnt) {\r\n                var nextSibling = existingElement.nextSibling;\r\n                toInsertParams[cnt].eachElem(function (insertElem) {\r\n                    if (nextSibling) {\r\n                        rootNode.insertBefore(insertElem, nextSibling);\r\n                        existingElement = nextSibling;\r\n                    }\r\n                    else {\r\n                        rootNode.appendChild(insertElem);\r\n                    }\r\n                });\r\n            };\r\n            for (var cnt = 0; cnt < toInsertParams.length; cnt++) {\r\n                _loop_1(cnt);\r\n            }\r\n        });\r\n        var res = [];\r\n        res.push(this);\r\n        res = res.concat(toInsertParams);\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], res)))();\r\n    };\r\n    DomQuery.prototype.insertBefore = function () {\r\n        var toInsertParams = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            toInsertParams[_i] = arguments[_i];\r\n        }\r\n        this.each(function (existingItem) {\r\n            var existingElement = existingItem.getAsElem(0).value;\r\n            var rootNode = existingElement.parentNode;\r\n            for (var cnt = 0; cnt < toInsertParams.length; cnt++) {\r\n                toInsertParams[cnt].eachElem(function (insertElem) {\r\n                    rootNode.insertBefore(insertElem, existingElement);\r\n                });\r\n            }\r\n        });\r\n        var res = [];\r\n        res.push(this);\r\n        res = res.concat(toInsertParams);\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], res)))();\r\n    };\r\n    DomQuery.prototype.orElse = function () {\r\n        var elseValue = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            elseValue[_i] = arguments[_i];\r\n        }\r\n        if (this.isPresent()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], elseValue)))();\r\n        }\r\n    };\r\n    DomQuery.prototype.orElseLazy = function (func) {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new DomQuery(func());\r\n        }\r\n    };\r\n    DomQuery.prototype.parents = function (tagName) {\r\n        var retSet = new Set();\r\n        var retArr = [];\r\n        var lowerTagName = tagName.toLowerCase();\r\n        var resolveItem = function (item) {\r\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\r\n                retSet.add(item);\r\n                retArr.push(item);\r\n            }\r\n        };\r\n        this.eachElem(function (item) {\r\n            while (item.parentNode) {\r\n                item = item.parentNode;\r\n                resolveItem(item);\r\n                //nested forms not possible, performance shortcut\r\n                if (tagName == \"form\" && retArr.length) {\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], retArr)))();\r\n    };\r\n    DomQuery.prototype.copyAttrs = function (sourceItem) {\r\n        var _this = this;\r\n        sourceItem.eachElem(function (sourceNode) {\r\n            var attrs = objToArray(sourceNode.attributes);\r\n            for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {\r\n                var item = attrs_1[_i];\r\n                var value = item.value;\r\n                var name_1 = item.name;\r\n                switch (name_1) {\r\n                    case \"id\":\r\n                        _this.id.value = value;\r\n                        break;\r\n                    case \"disabled\":\r\n                        _this.resolveAttributeHolder(\"disabled\").disabled = value;\r\n                        break;\r\n                    case \"checked\":\r\n                        _this.resolveAttributeHolder(\"checked\").checked = value;\r\n                        break;\r\n                    default:\r\n                        _this.attr(name_1).value = value;\r\n                }\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * resolves an attribute holder compared\r\n     * @param attrName the attribute name\r\n     */\r\n    DomQuery.prototype.resolveAttributeHolder = function (attrName) {\r\n        if (attrName === void 0) { attrName = \"value\"; }\r\n        var ret = [];\r\n        ret[attrName] = null;\r\n        return (attrName in this.getAsElem(0).value) ?\r\n            this.getAsElem(0).value :\r\n            ret;\r\n    };\r\n    /**\r\n     * outerhtml convenience method\r\n     * browsers only support innerHTML but\r\n     * for instance for your jsf.js we have a full\r\n     * replace pattern which needs outerHTML processing\r\n     *\r\n     * @param markup\r\n     * @param runEmbeddedScripts\r\n     * @param runEmbeddedCss\r\n     */\r\n    DomQuery.prototype.outerHTML = function (markup, runEmbeddedScripts, runEmbeddedCss) {\r\n        var _a, _b;\r\n        if (this.isAbsent()) {\r\n            return;\r\n        }\r\n        var focusElementId = (_b = (_a = document) === null || _a === void 0 ? void 0 : _a.activeElement) === null || _b === void 0 ? void 0 : _b.id;\r\n        var caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\r\n        var nodes = DomQuery.fromMarkup(markup);\r\n        var res = [];\r\n        var toReplace = this.getAsElem(0).value;\r\n        var firstInsert = nodes.get(0);\r\n        var parentNode = toReplace.parentNode;\r\n        var replaced = firstInsert.getAsElem(0).value;\r\n        parentNode.replaceChild(replaced, toReplace);\r\n        res.push(new DomQuery(replaced));\r\n        //no replacement possible\r\n        if (this.isAbsent()) {\r\n            return this;\r\n        }\r\n        var insertAdditionalItems = [];\r\n        if (nodes.length > 1) {\r\n            insertAdditionalItems = insertAdditionalItems.concat.apply(insertAdditionalItems, nodes.values.slice(1));\r\n            res.push(DomQuery.byId(replaced).insertAfter(new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], insertAdditionalItems)))()));\r\n        }\r\n        if (runEmbeddedScripts) {\r\n            this.runScripts();\r\n        }\r\n        if (runEmbeddedCss) {\r\n            this.runCss();\r\n        }\r\n        var focusElement = DomQuery.byId(focusElementId);\r\n        if (focusElementId && focusElement.isPresent() &&\r\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\r\n            focusElement.eachElem(function (item) { return DomQuery.setCaretPosition(item, caretPosition); });\r\n        }\r\n        return nodes;\r\n    };\r\n    /**\r\n     * Run through the given nodes in the DomQuery execute the inline scripts\r\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\r\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\r\n     */\r\n    DomQuery.prototype.runScripts = function (whilteListed) {\r\n        var _this = this;\r\n        if (whilteListed === void 0) { whilteListed = DEFAULT_JSF_WHITELIST; }\r\n        var finalScripts = [], equi = equalsIgnoreCase, execScrpt = function (item) {\r\n            var tagName = item.tagName;\r\n            var itemType = item.type || \"\";\r\n            if (tagName && equi(tagName, \"script\") &&\r\n                (itemType === \"\" || equi(itemType, \"text/javascript\") ||\r\n                    equi(itemType, \"javascript\") ||\r\n                    equi(itemType, \"text/ecmascript\") ||\r\n                    equi(itemType, \"ecmascript\"))) {\r\n                var src = item.getAttribute('src');\r\n                if ('undefined' != typeof src\r\n                    && null != src\r\n                    && src.length > 0) {\r\n                    //we have to move this into an inner if because chrome otherwise chokes\r\n                    //due to changing the and order instead of relying on left to right\r\n                    //if jsf.js is already registered we do not replace it anymore\r\n                    if (whilteListed(src)) {\r\n                        if (finalScripts.length) {\r\n                            //script source means we have to eval the existing\r\n                            //scripts before running the include\r\n                            _this.globalEval(finalScripts.join(\"\\n\"));\r\n                            finalScripts = [];\r\n                        }\r\n                        _this.loadScriptEval(src, 0, \"UTF-8\");\r\n                    }\r\n                }\r\n                else {\r\n                    // embedded script auto eval\r\n                    //TODO this probably needs to be changed due to our new parsing structures\r\n                    //probably not needed anymore\r\n                    var evalText = trim(item.text || item.innerText || item.innerHTML);\r\n                    var go = true;\r\n                    while (go) {\r\n                        go = false;\r\n                        if (evalText.substring(0, 4) == \"<!--\") {\r\n                            evalText = evalText.substring(4);\r\n                            go = true;\r\n                        }\r\n                        if (evalText.substring(0, 4) == \"//<!--\") {\r\n                            evalText = evalText.substring(6);\r\n                            go = true;\r\n                        }\r\n                        if (evalText.substring(0, 11) == \"//<![CDATA[\") {\r\n                            evalText = evalText.substring(11);\r\n                            go = true;\r\n                        }\r\n                    }\r\n                    // we have to run the script under a global context\r\n                    //we store the script for less calls to eval\r\n                    finalScripts.push(evalText);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            var scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\r\n            //script execution order by relative pos in their dom tree\r\n            scriptElements.stream\r\n                .flatMap(function (item) {\r\n                return Stream_1.Stream.of(item.values);\r\n            })\r\n                .sort(function (node1, node2) {\r\n                return node1.compareDocumentPosition(node2) - 3; //preceding 2, following == 4\r\n            })\r\n                .each(function (item) { return execScrpt(item); });\r\n            if (finalScripts.length) {\r\n                this.globalEval(finalScripts.join(\"\\n\"));\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (window.console && window.console.error) {\r\n                //not sure if we\r\n                //should use our standard\r\n                //error mechanisms here\r\n                //because in the head appendix\r\n                //method only a console\r\n                //error would be raised as well\r\n                console.error(e.message || e.description);\r\n            }\r\n        }\r\n        finally {\r\n            //the usual ie6 fix code\r\n            //the IE6 garbage collector is broken\r\n            //nulling closures helps somewhat to reduce\r\n            //mem leaks, which are impossible to avoid\r\n            //at this browser\r\n            execScrpt = null;\r\n        }\r\n        return this;\r\n    };\r\n    DomQuery.prototype.runCss = function () {\r\n        var applyStyle = function (item, style) {\r\n            var _a, _b, _c, _d, _e;\r\n            var newSS = document.createElement(\"style\");\r\n            document.getElementsByTagName(\"head\")[0].appendChild(newSS);\r\n            var styleSheet = (_a = newSS.sheet, (_a !== null && _a !== void 0 ? _a : newSS.styleSheet));\r\n            newSS.setAttribute(\"rel\", (_b = item.getAttribute(\"rel\"), (_b !== null && _b !== void 0 ? _b : \"stylesheet\")));\r\n            newSS.setAttribute(\"type\", (_c = item.getAttribute(\"type\"), (_c !== null && _c !== void 0 ? _c : \"text/css\")));\r\n            if (_e = (_d = styleSheet) === null || _d === void 0 ? void 0 : _d.cssText, (_e !== null && _e !== void 0 ? _e : false)) {\r\n                styleSheet.cssText = style;\r\n            }\r\n            else {\r\n                newSS.appendChild(document.createTextNode(style));\r\n            }\r\n        }, execCss = function (item) {\r\n            var tagName = item.tagName;\r\n            if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\r\n                applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\r\n            }\r\n            else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\r\n                var innerText = [];\r\n                //compliant browsers know child nodes\r\n                var childNodes = item.childNodes;\r\n                if (childNodes) {\r\n                    var len = childNodes.length;\r\n                    for (var cnt = 0; cnt < len; cnt++) {\r\n                        innerText.push(childNodes[cnt].innerHTML || childNodes[cnt].data);\r\n                    }\r\n                    //non compliant ones innerHTML\r\n                }\r\n                else if (item.innerHTML) {\r\n                    innerText.push(item.innerHTML);\r\n                }\r\n                applyStyle(item, innerText.join(\"\"));\r\n            }\r\n        };\r\n        var scriptElements = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\r\n        scriptElements.stream\r\n            .flatMap(function (item) {\r\n            return Stream_1.Stream.of(item.values);\r\n        })\r\n            .sort(function (node1, node2) {\r\n            return node1.compareDocumentPosition(node2) - 3; //preceding 2, following == 4\r\n        })\r\n            .each(function (item) { return execCss(item); });\r\n        return this;\r\n    };\r\n    /**\r\n     * fires a click event on the underlying dom elements\r\n     */\r\n    DomQuery.prototype.click = function () {\r\n        this.fireEvent(\"click\");\r\n        return this;\r\n    };\r\n    DomQuery.prototype.addEventListener = function (type, listener, options) {\r\n        this.eachElem(function (node) {\r\n            node.addEventListener(type, listener, options);\r\n        });\r\n        return this;\r\n    };\r\n    DomQuery.prototype.removeEventListener = function (type, listener, options) {\r\n        this.eachElem(function (node) {\r\n            node.removeEventListener(type, listener, options);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * fires an event\r\n     */\r\n    DomQuery.prototype.fireEvent = function (eventName) {\r\n        this.eachElem(function (node) {\r\n            var doc;\r\n            if (node.ownerDocument) {\r\n                doc = node.ownerDocument;\r\n            }\r\n            else if (node.nodeType == 9) {\r\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\r\n                doc = node;\r\n            }\r\n            else {\r\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\r\n            }\r\n            if (node.dispatchEvent) {\r\n                // Gecko-style approach (now the standard) takes more work\r\n                var eventClass = \"\";\r\n                // Different events have different event classes.\r\n                // If this switch statement can't map an eventName to an eventClass,\r\n                // the event firing is going to fail.\r\n                switch (eventName) {\r\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\r\n                    case \"mousedown\":\r\n                    case \"mouseup\":\r\n                        eventClass = \"MouseEvents\";\r\n                        break;\r\n                    case \"focus\":\r\n                    case \"change\":\r\n                    case \"blur\":\r\n                    case \"select\":\r\n                        eventClass = \"HTMLEvents\";\r\n                        break;\r\n                    default:\r\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\r\n                        break;\r\n                }\r\n                var event_1 = doc.createEvent(eventClass);\r\n                event_1.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\r\n                event_1.synthetic = true; // allow detection of synthetic events\r\n                // The second parameter says go ahead with the default action\r\n                node.dispatchEvent(event_1);\r\n            }\r\n            else if (node.fireEvent) {\r\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\r\n                var event_2 = doc.createEventObject();\r\n                event_2.synthetic = true; // allow detection of synthetic events\r\n                node.fireEvent(\"on\" + eventName, event_2);\r\n            }\r\n        });\r\n    };\r\n    DomQuery.prototype.textContent = function (joinstr) {\r\n        if (joinstr === void 0) { joinstr = \"\"; }\r\n        return this.stream\r\n            .map(function (value) {\r\n            var item = value.getAsElem(0).orElseLazy(function () {\r\n                return {\r\n                    textContent: \"\"\r\n                };\r\n            }).value;\r\n            return item.textContent || \"\";\r\n        })\r\n            .reduce(function (text1, text2) { return text1 + joinstr + text2; }, \"\").value;\r\n    };\r\n    DomQuery.prototype.innerText = function (joinstr) {\r\n        if (joinstr === void 0) { joinstr = \"\"; }\r\n        return this.stream\r\n            .map(function (value) {\r\n            var item = value.getAsElem(0).orElseLazy(function () {\r\n                return {\r\n                    innerText: \"\"\r\n                };\r\n            }).value;\r\n            return item.innerText || \"\";\r\n        })\r\n            .reduce(function (text1, text2) { return [text1, text2].join(joinstr); }, \"\").value;\r\n    };\r\n    /**\r\n     * encodes all input elements properly into respective\r\n     * config entries, this can be used\r\n     * for legacy systems, for newer usecases, use the\r\n     * HTML5 Form class which all newer browsers provide\r\n     *\r\n     * @param toMerge optional config which can be merged in\r\n     * @return a copy pf\r\n     */\r\n    DomQuery.prototype.encodeFormElement = function (toMerge) {\r\n        if (toMerge === void 0) { toMerge = new Monad_1.Config({}); }\r\n        //browser behavior no element name no encoding (normal submit fails in that case)\r\n        //https://issues.apache.org/jira/browse/MYFACES-2847\r\n        if (this.name.isAbsent()) {\r\n            return;\r\n        }\r\n        //lets keep it sideffects free\r\n        var target = toMerge.shallowCopy;\r\n        this.each(function (element) {\r\n            if (element.name.isAbsent()) { //no name, no encoding\r\n                return;\r\n            }\r\n            var name = element.name.value;\r\n            var tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\r\n            var elemType = element.type.orElse(\"__none__\").value.toLowerCase();\r\n            elemType = elemType.toLowerCase();\r\n            // routine for all elements\r\n            // rules:\r\n            // - process only inputs, textareas and selects\r\n            // - elements muest have attribute \"name\"\r\n            // - elements must not be disabled\r\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\r\n                (name != null && name != \"\")) && !element.disabled) {\r\n                // routine for select elements\r\n                // rules:\r\n                // - if select-one and value-Attribute exist => \"name=value\"\r\n                // (also if value empty => \"name=\")\r\n                // - if select-one and value-Attribute don't exist =>\r\n                // \"name=DisplayValue\"\r\n                // - if select multi and multple selected => \"name=value1&name=value2\"\r\n                // - if select and selectedIndex=-1 don't submit\r\n                if (tagName == \"select\") {\r\n                    // selectedIndex must be >= 0 sein to be submittet\r\n                    var selectElem = element.getAsElem(0).value;\r\n                    if (selectElem.selectedIndex >= 0) {\r\n                        var uLen = selectElem.options.length;\r\n                        for (var u = 0; u < uLen; u++) {\r\n                            // find all selected options\r\n                            //let subBuf = [];\r\n                            if (selectElem.options[u].selected) {\r\n                                var elementOption = selectElem.options[u];\r\n                                target.assign(name).value = (elementOption.getAttribute(\"value\") != null) ?\r\n                                    elementOption.value : elementOption.text;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // routine for remaining elements\r\n                // rules:\r\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\r\n                // - submit checkboxes and radio inputs only if checked\r\n                if ((tagName != \"select\" && elemType != \"button\"\r\n                    && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\r\n                    && ((elemType != \"checkbox\" && elemType != \"radio\") || element.checked)) {\r\n                    var files = element.value.files;\r\n                    if (files && files.length) {\r\n                        //xhr level2\r\n                        target.assign(name).value = files[0];\r\n                    }\r\n                    else {\r\n                        target.assign(name).value = element.inputValue.value;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return target;\r\n    };\r\n    Object.defineProperty(DomQuery.prototype, \"cDATAAsString\", {\r\n        get: function () {\r\n            var cDataBlock = [];\r\n            // response may contain several blocks\r\n            return this.stream\r\n                .flatMap(function (item) { return item.childNodes.stream; }).reduce(function (reduced, item) {\r\n                var _a, _b, _c, _d;\r\n                reduced.push((_d = (_c = (_b = (_a = item) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.data, (_d !== null && _d !== void 0 ? _d : \"\")));\r\n                return reduced;\r\n            }, []).value.join(\"\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DomQuery.prototype.subNodes = function (from, to) {\r\n        if (Monad_1.Optional.fromNullable(to).isAbsent()) {\r\n            to = this.length;\r\n        }\r\n        return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], this.rootNode.slice(from, Math.min(to, this.length)))))();\r\n    };\r\n    DomQuery.prototype.limits = function (end) {\r\n        this._limits = end;\r\n        return this;\r\n    };\r\n    //-- internally exposed methods needed for the interconnectivity\r\n    DomQuery.prototype.hasNext = function () {\r\n        var isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\r\n        var isEndOfArray = this.pos >= this.values.length - 1;\r\n        return !(isLimitsReached ||\r\n            isEndOfArray);\r\n    };\r\n    DomQuery.prototype.next = function () {\r\n        if (!this.hasNext()) {\r\n            return null;\r\n        }\r\n        this.pos++;\r\n        return new DomQuery(this.values[this.pos]);\r\n    };\r\n    DomQuery.prototype.reset = function () {\r\n        this.pos = -1;\r\n    };\r\n    //from\r\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\r\n    DomQuery.getCaretPosition = function (ctrl) {\r\n        var _a;\r\n        var caretPos = 0;\r\n        try {\r\n            if ((_a = document) === null || _a === void 0 ? void 0 : _a.selection) {\r\n                ctrl.focus();\r\n                var selection = document.selection.createRange();\r\n                //the selection now is start zero\r\n                selection.moveStart('character', -ctrl.value.length);\r\n                //the caretposition is the selection start\r\n                caretPos = selection.text.length;\r\n            }\r\n        }\r\n        catch (e) {\r\n            //now this is ugly, but not supported input types throw errors for selectionStart\r\n            //just in case someone dumps this code onto unsupported browsers\r\n        }\r\n        return caretPos;\r\n    };\r\n    DomQuery.setCaretPosition = function (ctrl, pos) {\r\n        var range = ctrl.createTextRange();\r\n        range.collapse(true);\r\n        range.moveEnd('character', pos);\r\n        range.moveStart('character', pos);\r\n        range.select();\r\n    };\r\n    DomQuery.absent = new DomQuery();\r\n    return DomQuery;\r\n}());\r\nexports.DomQuery = DomQuery;\r\n/**\r\n * Various collectors\r\n * which can be used in conjunction with Streams\r\n */\r\n/**\r\n * A collector which bundles a full dom query stream into a single dom query element\r\n *\r\n * This connects basically our stream back into DomQuery\r\n */\r\nvar DomQueryCollector = /** @class */ (function () {\r\n    function DomQueryCollector() {\r\n        this.data = [];\r\n    }\r\n    DomQueryCollector.prototype.collect = function (element) {\r\n        this.data.push(element);\r\n    };\r\n    Object.defineProperty(DomQueryCollector.prototype, \"finalValue\", {\r\n        get: function () {\r\n            return new (DomQuery.bind.apply(DomQuery, __spreadArrays([void 0], this.data)))();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DomQueryCollector;\r\n}());\r\nexports.DomQueryCollector = DomQueryCollector;\r\n/**\r\n * abbreviation for DomQuery\r\n */\r\nexports.DQ = DomQuery;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\r\n * Useful if you need the functions in another library to keep its dependencies down\r\n */\r\n/*IMonad definitions*/\r\nvar Lang_1 = require(\"./Lang\");\r\nvar SourcesCollectors_1 = require(\"./SourcesCollectors\");\r\nvar Stream_1 = require(\"./Stream\");\r\nvar objAssign = Lang_1.Lang.objAssign;\r\n/**\r\n * Implementation of a monad\r\n * (Sideffect free), no write allowed directly on the monads\r\n * value state\r\n */\r\nvar Monad = /** @class */ (function () {\r\n    function Monad(value) {\r\n        this._value = value;\r\n    }\r\n    Object.defineProperty(Monad.prototype, \"value\", {\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Monad.prototype.map = function (fn) {\r\n        if (!fn) {\r\n            fn = function (inval) { return inval; };\r\n        }\r\n        var result = fn(this.value);\r\n        return new Monad(result);\r\n    };\r\n    Monad.prototype.flatMap = function (fn) {\r\n        var _a;\r\n        var mapped = this.map(fn);\r\n        while (((_a = mapped) === null || _a === void 0 ? void 0 : _a.value) instanceof Monad) {\r\n            mapped = mapped.value;\r\n        }\r\n        return mapped;\r\n    };\r\n    return Monad;\r\n}());\r\nexports.Monad = Monad;\r\n/**\r\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\r\n * sugar on top\r\n * (Sideeffect free, since value assignment is not allowed)\r\n * */\r\nvar Optional = /** @class */ (function (_super) {\r\n    __extends(Optional, _super);\r\n    function Optional(value) {\r\n        return _super.call(this, value) || this;\r\n    }\r\n    Object.defineProperty(Optional.prototype, \"value\", {\r\n        get: function () {\r\n            if (this._value instanceof Monad) {\r\n                return this._value.flatMap().value;\r\n            }\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Optional.fromNullable = function (value) {\r\n        return new Optional(value);\r\n    };\r\n    /*syntactic sugar for absent and present checks*/\r\n    Optional.prototype.isAbsent = function () {\r\n        return \"undefined\" == typeof this.value || null == this.value;\r\n    };\r\n    /**\r\n     * any value present\r\n     */\r\n    Optional.prototype.isPresent = function (presentRunnable) {\r\n        var absent = this.isAbsent();\r\n        if (!absent && presentRunnable) {\r\n            presentRunnable.call(this, this);\r\n        }\r\n        return !absent;\r\n    };\r\n    Optional.prototype.ifPresentLazy = function (presentRunnable) {\r\n        if (presentRunnable === void 0) { presentRunnable = function () {\r\n        }; }\r\n        this.isPresent.call(this, presentRunnable);\r\n        return this;\r\n    };\r\n    Optional.prototype.orElse = function (elseValue) {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        }\r\n        else {\r\n            //shortcut\r\n            if (elseValue == null) {\r\n                return Optional.absent;\r\n            }\r\n            return this.flatMap(function () { return elseValue; });\r\n        }\r\n    };\r\n    /**\r\n     * lazy, passes a function which then is lazily evaluated\r\n     * instead of a direct value\r\n     * @param func\r\n     */\r\n    Optional.prototype.orElseLazy = function (func) {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.flatMap(func);\r\n        }\r\n    };\r\n    /*\r\n     * we need to implement it to fullfill the contract, although it is used only internally\r\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\r\n     */\r\n    Optional.prototype.flatMap = function (fn) {\r\n        var val = _super.prototype.flatMap.call(this, fn);\r\n        if (!(val instanceof Optional)) {\r\n            return Optional.fromNullable(val.value);\r\n        }\r\n        return val.flatMap();\r\n    };\r\n    /*\r\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\r\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\r\n     * this is some syntactic sugar however which is quite useful*/\r\n    Optional.prototype.getIf = function () {\r\n        var key = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            key[_i] = arguments[_i];\r\n        }\r\n        var currentPos = this;\r\n        for (var cnt = 0; cnt < key.length; cnt++) {\r\n            var currKey = this.keyVal(key[cnt]);\r\n            var arrPos = this.arrayIndex(key[cnt]);\r\n            if (currKey === \"\" && arrPos >= 0) {\r\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\r\n                if (currentPos.isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                continue;\r\n            }\r\n            else if (currKey && arrPos >= 0) {\r\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\r\n                if (currentPos.isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                continue;\r\n            }\r\n            else {\r\n                currentPos = currentPos.getIfPresent(currKey);\r\n            }\r\n            if (currentPos.isAbsent()) {\r\n                return currentPos;\r\n            }\r\n            else if (arrPos > -1) {\r\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\r\n            }\r\n        }\r\n        var retVal = currentPos;\r\n        return retVal;\r\n    };\r\n    /**\r\n     * simple match, if the first order function call returns\r\n     * true then there is a match, if the value is not present\r\n     * it never matches\r\n     *\r\n     * @param fn the first order function performing the match\r\n     */\r\n    Optional.prototype.match = function (fn) {\r\n        if (this.isAbsent()) {\r\n            return false;\r\n        }\r\n        return fn(this.value);\r\n    };\r\n    /**\r\n     * convenience function to flatmap the internal value\r\n     * and replace it with a default in case of being absent\r\n     *\r\n     * @param defaultVal\r\n     * @returns {Optional<any>}\r\n     */\r\n    Optional.prototype.get = function (defaultVal) {\r\n        if (defaultVal === void 0) { defaultVal = Optional.absent; }\r\n        if (this.isAbsent()) {\r\n            return this.getClass().fromNullable(defaultVal).flatMap();\r\n        }\r\n        return this.getClass().fromNullable(this.value).flatMap();\r\n    };\r\n    Optional.prototype.toJson = function () {\r\n        return JSON.stringify(this.value);\r\n    };\r\n    /**\r\n     * helper to override several implementations in a more fluent way\r\n     * by having a getClass operation we can avoid direct calls into the constructor or\r\n     * static methods and do not have to implement several methods which rely on the type\r\n     * of \"this\"\r\n     * @returns {Monadish.Optional}\r\n     */\r\n    Optional.prototype.getClass = function () {\r\n        return Optional;\r\n    };\r\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\r\n    Optional.prototype.arrayIndex = function (key) {\r\n        var start = key.indexOf(\"[\");\r\n        var end = key.indexOf(\"]\");\r\n        if (start >= 0 && end > 0 && start < end) {\r\n            return parseInt(key.substring(start + 1, end));\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    };\r\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\r\n    Optional.prototype.keyVal = function (key) {\r\n        var start = key.indexOf(\"[\");\r\n        if (start >= 0) {\r\n            return key.substring(0, start);\r\n        }\r\n        else {\r\n            return key;\r\n        }\r\n    };\r\n    /**\r\n     * additional syntactic sugar which is not part of the usual optional implementation\r\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\r\n     * capabilities in typescript\r\n     */\r\n    Optional.prototype.getIfPresent = function (key) {\r\n        if (this.isAbsent()) {\r\n            return this.getClass().absent;\r\n        }\r\n        return this.getClass().fromNullable(this.value[key]).flatMap();\r\n    };\r\n    /**\r\n     * elvis like typesafe functional save resolver\r\n     * a typesafe option for getIfPresent\r\n     *\r\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\r\n     * if this is resolvable without any errors an Optional with the value is returned\r\n     * if not, then an Optional absent is returned, also if you return Optional absent\r\n     * it is flatmapped into absent\r\n     *\r\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\r\n     * the resolution goes towards absent\r\n     */\r\n    Optional.prototype.resolve = function (resolver) {\r\n        if (this.isAbsent()) {\r\n            return Optional.absent;\r\n        }\r\n        try {\r\n            return Optional.fromNullable(resolver(this.value));\r\n        }\r\n        catch (e) {\r\n            return Optional.absent;\r\n        }\r\n    };\r\n    /*default value for absent*/\r\n    Optional.absent = Optional.fromNullable(null);\r\n    return Optional;\r\n}(Monad));\r\nexports.Optional = Optional;\r\n// --------------------- From here onwards we break out the sideffects free limits ------------\r\n/**\r\n * ValueEmbedder is the writeable version\r\n * of optional, it basically is a wrappber\r\n * around a construct which has a state\r\n * and can be written to.\r\n *\r\n * For the readonly version see Optional\r\n */\r\nvar ValueEmbedder = /** @class */ (function (_super) {\r\n    __extends(ValueEmbedder, _super);\r\n    function ValueEmbedder(rootElem, valueKey) {\r\n        if (valueKey === void 0) { valueKey = \"value\"; }\r\n        var _this = _super.call(this, rootElem) || this;\r\n        _this.key = valueKey;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueEmbedder.prototype, \"value\", {\r\n        get: function () {\r\n            return this._value ? this._value[this.key] : null;\r\n        },\r\n        set: function (newVal) {\r\n            if (!this._value) {\r\n                return;\r\n            }\r\n            this._value[this.key] = newVal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ValueEmbedder.prototype.orElse = function (elseValue) {\r\n        var alternative = {};\r\n        alternative[this.key] = elseValue;\r\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\r\n    };\r\n    ValueEmbedder.prototype.orElseLazy = function (func) {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var alternative = {};\r\n            alternative[this.key] = func();\r\n            return new ValueEmbedder(alternative, this.key);\r\n        }\r\n    };\r\n    /**\r\n     * helper to override several implementations in a more fluent way\r\n     * by having a getClass operation we can avoid direct calls into the constructor or\r\n     * static methods and do not have to implement several methods which rely on the type\r\n     * of \"this\"\r\n     * @returns {Monadish.Optional}\r\n     */\r\n    ValueEmbedder.prototype.getClass = function () {\r\n        return ValueEmbedder;\r\n    };\r\n    ValueEmbedder.fromNullable = function (value, valueKey) {\r\n        if (valueKey === void 0) { valueKey = \"value\"; }\r\n        return new ValueEmbedder(value, valueKey);\r\n    };\r\n    /*default value for absent*/\r\n    ValueEmbedder.absent = ValueEmbedder.fromNullable(null);\r\n    return ValueEmbedder;\r\n}(Optional));\r\nexports.ValueEmbedder = ValueEmbedder;\r\n/**\r\n * specialized value embedder\r\n * for our Configuration\r\n */\r\nvar ConfigEntry = /** @class */ (function (_super) {\r\n    __extends(ConfigEntry, _super);\r\n    function ConfigEntry(rootElem, key, arrPos) {\r\n        var _this = _super.call(this, rootElem, key) || this;\r\n        _this.arrPos = (arrPos !== null && arrPos !== void 0 ? arrPos : -1);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ConfigEntry.prototype, \"value\", {\r\n        get: function () {\r\n            if (this.key == \"\" && this.arrPos >= 0) {\r\n                return this._value[this.arrPos];\r\n            }\r\n            else if (this.key && this.arrPos >= 0) {\r\n                return this._value[this.key][this.arrPos];\r\n            }\r\n            return this._value[this.key];\r\n        },\r\n        set: function (val) {\r\n            if (this.key == \"\" && this.arrPos >= 0) {\r\n                this._value[this.arrPos] = val;\r\n                return;\r\n            }\r\n            else if (this.key && this.arrPos >= 0) {\r\n                this._value[this.key][this.arrPos] = val;\r\n                return;\r\n            }\r\n            this._value[this.key] = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*default value for absent*/\r\n    ConfigEntry.absent = ConfigEntry.fromNullable(null);\r\n    return ConfigEntry;\r\n}(ValueEmbedder));\r\n/**\r\n * Config, basically an optional wrapper for a json structure\r\n * (not sideeffect free, since we can alter the internal config state\r\n * without generating a new config), not sure if we should make it sideffect free\r\n * since this would swallow a lot of performane and ram\r\n */\r\nvar Config = /** @class */ (function (_super) {\r\n    __extends(Config, _super);\r\n    function Config(root) {\r\n        return _super.call(this, root) || this;\r\n    }\r\n    Object.defineProperty(Config.prototype, \"shallowCopy\", {\r\n        get: function () {\r\n            return new Config(Stream_1.Stream.ofAssoc(this.value).collect(new SourcesCollectors_1.AssocArrayCollector()));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Config.prototype, \"deepCopy\", {\r\n        get: function () {\r\n            return new Config(objAssign({}, this.value));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Config.fromNullable = function (value) {\r\n        return new Config(value);\r\n    };\r\n    /**\r\n     * simple merge for the root configs\r\n     */\r\n    Config.prototype.shallowMerge = function (other, overwrite) {\r\n        if (overwrite === void 0) { overwrite = true; }\r\n        for (var key in other.value) {\r\n            if (overwrite || !(key in this.value)) {\r\n                this.assign(key).value = other.getIf(key).value;\r\n            }\r\n        }\r\n    };\r\n    Config.prototype.assign = function () {\r\n        var keys = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            keys[_i] = arguments[_i];\r\n        }\r\n        if (keys.length < 1) {\r\n            return;\r\n        }\r\n        this.buildPath(keys);\r\n        var currKey = this.keyVal(keys[keys.length - 1]);\r\n        var arrPos = this.arrayIndex(keys[keys.length - 1]);\r\n        var retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value, currKey, arrPos);\r\n        return retVal;\r\n    };\r\n    Config.prototype.assignIf = function (condition) {\r\n        var keys = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            keys[_i - 1] = arguments[_i];\r\n        }\r\n        return condition ? this.assign.apply(this, keys) : { value: null };\r\n    };\r\n    Config.prototype.getIf = function () {\r\n        var keys = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            keys[_i] = arguments[_i];\r\n        }\r\n        return this.getClass().fromNullable(_super.prototype.getIf.apply(this, keys).value);\r\n    };\r\n    Config.prototype.get = function (defaultVal) {\r\n        return this.getClass().fromNullable(_super.prototype.get.call(this, defaultVal).value);\r\n    };\r\n    //empties the current config entry\r\n    Config.prototype.delete = function (key) {\r\n        if (key in this.value) {\r\n            delete this.value[key];\r\n        }\r\n        return this;\r\n    };\r\n    Config.prototype.toJson = function () {\r\n        return JSON.stringify(this.value);\r\n    };\r\n    Config.prototype.getClass = function () {\r\n        return Config;\r\n    };\r\n    Config.prototype.setVal = function (val) {\r\n        this._value = val;\r\n    };\r\n    Config.prototype.buildPath = function (keys) {\r\n        var val = this;\r\n        var parentVal = this.getClass().fromNullable(null);\r\n        var parentPos = -1;\r\n        var alloc = function (arr, length) {\r\n            var length1 = arr.length;\r\n            var length2 = length1 + length;\r\n            for (var cnt = length1; cnt < length2; cnt++) {\r\n                arr.push({});\r\n            }\r\n        };\r\n        for (var cnt = 0; cnt < keys.length; cnt++) {\r\n            var currKey = this.keyVal(keys[cnt]);\r\n            var arrPos = this.arrayIndex(keys[cnt]);\r\n            if (currKey === \"\" && arrPos >= 0) {\r\n                val.setVal((val.value instanceof Array) ? val.value : []);\r\n                alloc(val.value, arrPos + 1);\r\n                if (parentPos >= 0) {\r\n                    parentVal.value[parentPos] = val.value;\r\n                }\r\n                parentVal = val;\r\n                parentPos = arrPos;\r\n                val = this.getClass().fromNullable(val.value[arrPos]);\r\n                continue;\r\n            }\r\n            var tempVal = val.getIf(currKey);\r\n            if (arrPos == -1) {\r\n                if (tempVal.isAbsent()) {\r\n                    tempVal = this.getClass().fromNullable(val.value[currKey] = {});\r\n                }\r\n                else {\r\n                    val = tempVal;\r\n                }\r\n            }\r\n            else {\r\n                var arr = (tempVal.value instanceof Array) ? tempVal.value : [];\r\n                alloc(arr, arrPos + 1);\r\n                val.value[currKey] = arr;\r\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\r\n            }\r\n            parentVal = val;\r\n            parentPos = arrPos;\r\n            val = tempVal;\r\n        }\r\n        return this;\r\n    };\r\n    return Config;\r\n}(Optional));\r\nexports.Config = Config;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Monad_1 = require(\"./Monad\");\r\n/**\r\n * Lang helpers crossported from the apache myfaces project\r\n */\r\nvar Lang;\r\n(function (Lang) {\r\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\r\n    /**\r\n     * helper function to savely resolve anything\r\n     * this is not an elvis operator, it resolves\r\n     * a value without exception in a tree and if\r\n     * it is not resolvable then an optional of\r\n     * a default value is restored or Optional.empty\r\n     * if none is given\r\n     *\r\n     * usage\r\n     * <code>\r\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\r\n     * </code>\r\n     *\r\n     * @param resolverProducer a lambda which can produce the value\r\n     * @param defaultValue an optional default value if the producer failes to produce anything\r\n     * @returns an Optional of the produced value\r\n     */\r\n    function saveResolve(resolverProducer, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = null; }\r\n        try {\r\n            var result = resolverProducer();\r\n            return Monad_1.Optional.fromNullable((result !== null && result !== void 0 ? result : defaultValue));\r\n        }\r\n        catch (e) {\r\n            return Monad_1.Optional.absent;\r\n        }\r\n    }\r\n    Lang.saveResolve = saveResolve;\r\n    function saveResolveLazy(resolverProducer, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = null; }\r\n        try {\r\n            var result = resolverProducer();\r\n            return Monad_1.Optional.fromNullable((result !== null && result !== void 0 ? result : defaultValue()));\r\n        }\r\n        catch (e) {\r\n            return Monad_1.Optional.absent;\r\n        }\r\n    }\r\n    Lang.saveResolveLazy = saveResolveLazy;\r\n    /**\r\n     * String to array function performs a string to array transformation\r\n     * @param {String} it the string which has to be changed into an array\r\n     * @param {RegExp} splitter our splitter reglar expression\r\n     * @return a trimmed array of the splitted string\r\n     */\r\n    function strToArray(it, splitter) {\r\n        if (splitter === void 0) { splitter = /\\./gi; }\r\n        var ret = [];\r\n        it.split(splitter).forEach((function (element) {\r\n            ret.push(trim(element));\r\n        }));\r\n        return ret;\r\n    }\r\n    Lang.strToArray = strToArray;\r\n    /**\r\n     * hyperfast trim\r\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\r\n     * crossported from dojo\r\n     */\r\n    function trim(str) {\r\n        str = str.replace(/^\\s\\s*/, '');\r\n        var ws = /\\s/, i = str.length;\r\n        while (ws.test(str.charAt(--i))) {\r\n            //do nothing\r\n        }\r\n        return str.slice(0, i + 1);\r\n    }\r\n    Lang.trim = trim;\r\n    /**\r\n     * generic object arrays like dom definitions to array conversion method which\r\n     * transforms any object to something array like\r\n     * @param obj\r\n     * @param offset\r\n     * @param pack\r\n     * @returns an array converted from the object\r\n     */\r\n    function objToArray(obj, offset, pack) {\r\n        if (offset === void 0) { offset = 0; }\r\n        if (pack === void 0) { pack = []; }\r\n        if (((obj !== null && obj !== void 0 ? obj : \"__undefined__\")) == \"__undefined__\") {\r\n            return (pack !== null && pack !== void 0 ? pack : null);\r\n        }\r\n        //since offset is numeric we cannot use the shortcut due to 0 being false\r\n        //special condition array delivered no offset no pack\r\n        if (obj instanceof Array && !offset && !pack)\r\n            return obj;\r\n        return pack.concat(Array.prototype.slice.call(obj, offset));\r\n    }\r\n    Lang.objToArray = objToArray;\r\n    /**\r\n     * equalsIgnoreCase, case insensitive comparison of two strings\r\n     *\r\n     * @param source\r\n     * @param destination\r\n     */\r\n    function equalsIgnoreCase(source, destination) {\r\n        var finalSource = (source !== null && source !== void 0 ? source : \"___no_value__\");\r\n        var finalDest = (destination !== null && destination !== void 0 ? destination : \"___no_value__\");\r\n        //in any other case we do a strong string comparison\r\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\r\n    }\r\n    Lang.equalsIgnoreCase = equalsIgnoreCase;\r\n    /**\r\n     * runtime type assertion\r\n     *\r\n     * @param probe the probe to be tested for a type\r\n     * @param theType the type to be tested for\r\n     */\r\n    function assertType(probe, theType) {\r\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\r\n    }\r\n    Lang.assertType = assertType;\r\n    /**\r\n     * Backported from dojo\r\n     * a failsafe string determination method\r\n     * (since in javascript String != \"\" typeof alone fails!)\r\n     * @param it {|Object|} the object to be checked for being a string\r\n     * @return true in case of being a string false otherwise\r\n     */\r\n    function isString(it) {\r\n        //\tsummary:\r\n        //\t\tReturn true if it is a String\r\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\r\n    }\r\n    Lang.isString = isString;\r\n    function isFunc(it) {\r\n        return it instanceof Function || typeof it === \"function\";\r\n    }\r\n    Lang.isFunc = isFunc;\r\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n    // license https://creativecommons.org/licenses/by-sa/2.5/\r\n    function objAssign(target) {\r\n        var theArgs = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            theArgs[_i - 1] = arguments[_i];\r\n        }\r\n        if (target == null) { // TypeError if undefined or null\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n        var to = Object(target);\r\n        if (Object.assign) {\r\n            theArgs.forEach(function (item) { return Object.assign(to, item); });\r\n            return to;\r\n        }\r\n        theArgs.forEach(function (item) {\r\n            var nextSource = item;\r\n            if (nextSource != null) { // Skip over if undefined or null\r\n                for (var nextKey in nextSource) {\r\n                    // Avoid bugs when hasOwnProperty is shadowed\r\n                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return to;\r\n    }\r\n    Lang.objAssign = objAssign;\r\n})(Lang = exports.Lang || (exports.Lang = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Stream_1 = require(\"./Stream\");\r\n/**\r\n * implementation of iteratable on top of array\r\n */\r\nvar ArrayStreamDataSource = /** @class */ (function () {\r\n    function ArrayStreamDataSource() {\r\n        var value = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            value[_i] = arguments[_i];\r\n        }\r\n        this.dataPos = -1;\r\n        this.value = value;\r\n    }\r\n    ArrayStreamDataSource.prototype.hasNext = function () {\r\n        return this.value.length - 1 > this.dataPos;\r\n    };\r\n    ArrayStreamDataSource.prototype.next = function () {\r\n        this.dataPos++;\r\n        return this.value[this.dataPos];\r\n    };\r\n    ArrayStreamDataSource.prototype.reset = function () {\r\n        this.dataPos = -1;\r\n    };\r\n    return ArrayStreamDataSource;\r\n}());\r\nexports.ArrayStreamDataSource = ArrayStreamDataSource;\r\n/**\r\n * an intermediate data source wich prefilters\r\n * incoming stream data\r\n * and lets only the data out which\r\n * passes the filter function check\r\n */\r\nvar FilteredStreamDatasource = /** @class */ (function () {\r\n    function FilteredStreamDatasource(filterFunc, parent) {\r\n        this.filteredNext = null;\r\n        this.filterFunc = filterFunc;\r\n        this.inputDataSource = parent;\r\n    }\r\n    /**\r\n     * in order to filter we have to make a look ahead until the\r\n     * first next allowed element\r\n     * hence we prefetch the element and then\r\n     * serve it via next\r\n     */\r\n    FilteredStreamDatasource.prototype.hasNext = function () {\r\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\r\n            var next = this.inputDataSource.next();\r\n            if (this.filterFunc(next)) {\r\n                this.filteredNext = next;\r\n                return true;\r\n            }\r\n            else {\r\n                this.filteredNext = null;\r\n            }\r\n        }\r\n        return this.filteredNext != null;\r\n    };\r\n    /**\r\n     * serve the next element\r\n     */\r\n    FilteredStreamDatasource.prototype.next = function () {\r\n        var ret = this.filteredNext;\r\n        this.filteredNext = null;\r\n        //We have to call hasNext, to roll another\r\n        //prefetch in case someone runs next\r\n        //sequentially without calling hasNext\r\n        this.hasNext();\r\n        return ret;\r\n    };\r\n    FilteredStreamDatasource.prototype.reset = function () {\r\n        this.filteredNext = null;\r\n        this.inputDataSource.reset();\r\n    };\r\n    return FilteredStreamDatasource;\r\n}());\r\nexports.FilteredStreamDatasource = FilteredStreamDatasource;\r\n/**\r\n * an intermediate datasource which maps the items from\r\n * one into another\r\n */\r\nvar MappedStreamDataSource = /** @class */ (function () {\r\n    function MappedStreamDataSource(mapFunc, parent) {\r\n        this.mapFunc = mapFunc;\r\n        this.inputDataSource = parent;\r\n    }\r\n    MappedStreamDataSource.prototype.hasNext = function () {\r\n        return this.inputDataSource.hasNext();\r\n    };\r\n    MappedStreamDataSource.prototype.next = function () {\r\n        return this.mapFunc(this.inputDataSource.next());\r\n    };\r\n    MappedStreamDataSource.prototype.reset = function () {\r\n        this.inputDataSource.reset();\r\n    };\r\n    return MappedStreamDataSource;\r\n}());\r\nexports.MappedStreamDataSource = MappedStreamDataSource;\r\n/**\r\n * Same for flatmap to deal with element -> stream mappings\r\n */\r\nvar FlatMapStreamDataSource = /** @class */ (function () {\r\n    function FlatMapStreamDataSource(func, parent) {\r\n        this.mapFunc = func;\r\n        this.inputDataSource = parent;\r\n    }\r\n    FlatMapStreamDataSource.prototype.hasNext = function () {\r\n        return this.resolveCurrentNext() || this.resolveNextNext();\r\n    };\r\n    FlatMapStreamDataSource.prototype.resolveCurrentNext = function () {\r\n        var next = false;\r\n        if (this.activeDataSource) {\r\n            next = this.activeDataSource.hasNext();\r\n        }\r\n        return next;\r\n    };\r\n    FlatMapStreamDataSource.prototype.resolveNextNext = function () {\r\n        var next = false;\r\n        while (!next && this.inputDataSource.hasNext()) {\r\n            var mapped = this.mapFunc(this.inputDataSource.next());\r\n            if (Array.isArray(mapped)) {\r\n                this.activeDataSource = new (ArrayStreamDataSource.bind.apply(ArrayStreamDataSource, __spreadArrays([void 0], mapped)))();\r\n            }\r\n            else {\r\n                this.activeDataSource = mapped;\r\n            }\r\n            next = this.activeDataSource.hasNext();\r\n        }\r\n        return next;\r\n    };\r\n    FlatMapStreamDataSource.prototype.next = function () {\r\n        return this.activeDataSource.next();\r\n    };\r\n    FlatMapStreamDataSource.prototype.reset = function () {\r\n        this.inputDataSource.reset();\r\n    };\r\n    return FlatMapStreamDataSource;\r\n}());\r\nexports.FlatMapStreamDataSource = FlatMapStreamDataSource;\r\n/**\r\n * For the time being we only need one collector\r\n * a collector which collects a stream back into arrays\r\n */\r\nvar ArrayCollector = /** @class */ (function () {\r\n    function ArrayCollector() {\r\n        this.data = [];\r\n    }\r\n    ArrayCollector.prototype.collect = function (element) {\r\n        this.data.push(element);\r\n    };\r\n    Object.defineProperty(ArrayCollector.prototype, \"finalValue\", {\r\n        get: function () {\r\n            return this.data;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ArrayCollector;\r\n}());\r\nexports.ArrayCollector = ArrayCollector;\r\n/**\r\n * collects an assoc stream back to an assoc array\r\n */\r\nvar AssocArrayCollector = /** @class */ (function () {\r\n    function AssocArrayCollector() {\r\n        this.finalValue = {};\r\n    }\r\n    AssocArrayCollector.prototype.collect = function (element) {\r\n        var _a, _b;\r\n        this.finalValue[_a = element[0], (_a !== null && _a !== void 0 ? _a : element)] = (_b = element[1], (_b !== null && _b !== void 0 ? _b : true));\r\n    };\r\n    return AssocArrayCollector;\r\n}());\r\nexports.AssocArrayCollector = AssocArrayCollector;\r\n/**\r\n * Form data collector for key value pair streams\r\n */\r\nvar FormDataCollector = /** @class */ (function () {\r\n    function FormDataCollector() {\r\n        this.finalValue = new FormData();\r\n    }\r\n    FormDataCollector.prototype.collect = function (element) {\r\n        this.finalValue.append(element.key, element.value);\r\n    };\r\n    return FormDataCollector;\r\n}());\r\nexports.FormDataCollector = FormDataCollector;\r\n/**\r\n * Form data collector for DomQuery streams\r\n */\r\nvar QueryFormDataCollector = /** @class */ (function () {\r\n    function QueryFormDataCollector() {\r\n        this.finalValue = new FormData();\r\n    }\r\n    QueryFormDataCollector.prototype.collect = function (element) {\r\n        var toMerge = element.encodeFormElement();\r\n        if (toMerge.isPresent()) {\r\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\r\n        }\r\n    };\r\n    return QueryFormDataCollector;\r\n}());\r\nexports.QueryFormDataCollector = QueryFormDataCollector;\r\n/**\r\n * Encoded String collector from dom query streams\r\n */\r\nvar QueryFormStringCollector = /** @class */ (function () {\r\n    function QueryFormStringCollector() {\r\n        this.formData = [];\r\n    }\r\n    QueryFormStringCollector.prototype.collect = function (element) {\r\n        var toMerge = element.encodeFormElement();\r\n        if (toMerge.isPresent()) {\r\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\r\n        }\r\n    };\r\n    Object.defineProperty(QueryFormStringCollector.prototype, \"finalValue\", {\r\n        get: function () {\r\n            return Stream_1.Stream.of.apply(Stream_1.Stream, this.formData).map(function (keyVal) { return keyVal.join(\"=\"); })\r\n                .reduce(function (item1, item2) { return [item1, item2].join(\"&\"); })\r\n                .orElse(\"\").value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return QueryFormStringCollector;\r\n}());\r\nexports.QueryFormStringCollector = QueryFormStringCollector;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*\r\n * A small stream implementation\r\n */\r\nvar Monad_1 = require(\"./Monad\");\r\nvar SourcesCollectors_1 = require(\"./SourcesCollectors\");\r\n/**\r\n * A simple typescript based reimplementation of streams\r\n *\r\n * This is the early eval version\r\n * for a lazy eval version check, LazyStream, which is api compatible\r\n * to this implementation, however with the benefit of being able\r\n * to provide infinite data sources and generic data providers, the downside\r\n * is, it might be a tad slower in some situations\r\n */\r\nvar Stream = /** @class */ (function () {\r\n    function Stream() {\r\n        var value = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            value[_i] = arguments[_i];\r\n        }\r\n        this._limits = -1;\r\n        this.pos = -1;\r\n        this.value = value;\r\n    }\r\n    Stream.of = function () {\r\n        var data = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            data[_i] = arguments[_i];\r\n        }\r\n        return new (Stream.bind.apply(Stream, __spreadArrays([void 0], data)))();\r\n    };\r\n    Stream.ofAssoc = function (data) {\r\n        return this.of.apply(this, Object.keys(data)).map(function (key) { return [key, data[key]]; });\r\n    };\r\n    Stream.ofDataSource = function (dataSource) {\r\n        var value = [];\r\n        while (dataSource.hasNext()) {\r\n            value.push(dataSource.next());\r\n        }\r\n        return new (Stream.bind.apply(Stream, __spreadArrays([void 0], value)))();\r\n    };\r\n    Stream.prototype.limits = function (end) {\r\n        this._limits = end;\r\n        return this;\r\n    };\r\n    Stream.prototype.onElem = function (fn) {\r\n        for (var cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            if (fn(this.value[cnt], cnt) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Stream.prototype.each = function (fn) {\r\n        this.onElem(fn);\r\n    };\r\n    Stream.prototype.map = function (fn) {\r\n        if (!fn) {\r\n            fn = function (inval) { return inval; };\r\n        }\r\n        var res = [];\r\n        this.each(function (item, cnt) {\r\n            res.push(fn(item));\r\n        });\r\n        return new (Stream.bind.apply(Stream, __spreadArrays([void 0], res)))();\r\n    };\r\n    /*\r\n     * we need to implement it to fullfill the contract, although it is used only internally\r\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\r\n     */\r\n    Stream.prototype.flatMap = function (fn) {\r\n        var ret = [];\r\n        this.each(function (item) {\r\n            var strmR = fn(item);\r\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat.apply(ret, strmR.value);\r\n        });\r\n        return Stream.of.apply(Stream, ret);\r\n    };\r\n    Stream.prototype.filter = function (fn) {\r\n        var res = [];\r\n        this.each(function (data) {\r\n            if (fn(data)) {\r\n                res.push(data);\r\n            }\r\n        });\r\n        return new (Stream.bind.apply(Stream, __spreadArrays([void 0], res)))();\r\n    };\r\n    Stream.prototype.reduce = function (fn, startVal) {\r\n        if (startVal === void 0) { startVal = null; }\r\n        var offset = startVal != null ? 0 : 1;\r\n        var val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\r\n        for (var cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            val1 = fn(val1, this.value[cnt]);\r\n        }\r\n        return Monad_1.Optional.fromNullable(val1);\r\n    };\r\n    Stream.prototype.first = function () {\r\n        return this.value && this.value.length ? Monad_1.Optional.fromNullable(this.value[0]) : Monad_1.Optional.absent;\r\n    };\r\n    Stream.prototype.last = function () {\r\n        //could be done via reduce, but is faster this way\r\n        var length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\r\n        return Monad_1.Optional.fromNullable(length ? this.value[length - 1] : null);\r\n    };\r\n    Stream.prototype.anyMatch = function (fn) {\r\n        for (var cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            if (fn(this.value[cnt])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Stream.prototype.allMatch = function (fn) {\r\n        if (!this.value.length) {\r\n            return false;\r\n        }\r\n        var matches = 0;\r\n        for (var cnt = 0; cnt < this.value.length; cnt++) {\r\n            if (fn(this.value[cnt])) {\r\n                matches++;\r\n            }\r\n        }\r\n        return matches == this.value.length;\r\n    };\r\n    Stream.prototype.noneMatch = function (fn) {\r\n        var matches = 0;\r\n        for (var cnt = 0; cnt < this.value.length; cnt++) {\r\n            if (!fn(this.value[cnt])) {\r\n                matches++;\r\n            }\r\n        }\r\n        return matches == this.value.length;\r\n    };\r\n    Stream.prototype.sort = function (comparator) {\r\n        var newArr = this.value.slice().sort(comparator);\r\n        return Stream.of.apply(Stream, newArr);\r\n    };\r\n    Stream.prototype.collect = function (collector) {\r\n        this.each(function (data) { return collector.collect(data); });\r\n        return collector.finalValue;\r\n    };\r\n    //-- internally exposed methods needed for the interconnectivity\r\n    Stream.prototype.hasNext = function () {\r\n        var isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\r\n        var isEndOfArray = this.pos >= this.value.length - 1;\r\n        return !(isLimitsReached || isEndOfArray);\r\n    };\r\n    Stream.prototype.next = function () {\r\n        if (!this.hasNext()) {\r\n            return null;\r\n        }\r\n        this.pos++;\r\n        return this.value[this.pos];\r\n    };\r\n    Stream.prototype.reset = function () {\r\n        this.pos = -1;\r\n    };\r\n    return Stream;\r\n}());\r\nexports.Stream = Stream;\r\n/**\r\n * Lazy implementation of a Stream\r\n * The idea is to connect the intermediate\r\n * streams as datasources like a linked list\r\n * with reverse referencing and for special\r\n * operations like filtering flatmapping\r\n * have intermediate datasources in the list\r\n * with specialized functions.\r\n *\r\n * Sort of a modified pipe valve pattern\r\n * the streams are the pipes the intermediate\r\n * data sources are the valves\r\n *\r\n * We then can use passed in functions to control\r\n * the flow in the valves\r\n *\r\n * That way we can have a lazy evaluating stream\r\n *\r\n * So if an endpoint requests data\r\n * a callback trace goes back the stream list\r\n * which triggers an operation upwards\r\n * which sends data down the drain which then is processed\r\n * and filtered until one element hits the endpoint.\r\n *\r\n * That is repeated, until all elements are processed\r\n * or an internal limit is hit.\r\n *\r\n */\r\nvar LazyStream = /** @class */ (function () {\r\n    function LazyStream(parent) {\r\n        this._limits = -1;\r\n        /*\r\n         * needed to have the limits check working\r\n         * we need to keep track of the current position\r\n         * in the stream\r\n         */\r\n        this.pos = -1;\r\n        this.dataSource = parent;\r\n    }\r\n    LazyStream.of = function () {\r\n        var values = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            values[_i] = arguments[_i];\r\n        }\r\n        return new LazyStream(new (SourcesCollectors_1.ArrayStreamDataSource.bind.apply(SourcesCollectors_1.ArrayStreamDataSource, __spreadArrays([void 0], values)))());\r\n    };\r\n    LazyStream.ofAssoc = function (data) {\r\n        return this.of.apply(this, Object.keys(data)).map(function (key) { return [key, data[key]]; });\r\n    };\r\n    LazyStream.ofStreamDataSource = function (value) {\r\n        return new LazyStream(value);\r\n    };\r\n    LazyStream.prototype.hasNext = function () {\r\n        if (this.isOverLimits()) {\r\n            return false;\r\n        }\r\n        return this.dataSource.hasNext();\r\n    };\r\n    LazyStream.prototype.next = function () {\r\n        var next = this.dataSource.next();\r\n        // @ts-ignore\r\n        this.pos++;\r\n        return next;\r\n    };\r\n    LazyStream.prototype.reset = function () {\r\n        this.dataSource.reset();\r\n        this.pos = 0;\r\n        this._limits = -1;\r\n    };\r\n    LazyStream.prototype.nextFilter = function (fn) {\r\n        if (this.hasNext()) {\r\n            var newVal = this.next();\r\n            if (!fn(newVal)) {\r\n                return this.nextFilter(fn);\r\n            }\r\n            return newVal;\r\n        }\r\n        return null;\r\n    };\r\n    LazyStream.prototype.limits = function (max) {\r\n        this._limits = max;\r\n        return this;\r\n    };\r\n    //main stream methods\r\n    LazyStream.prototype.collect = function (collector) {\r\n        while (this.hasNext()) {\r\n            var t = this.next();\r\n            collector.collect(t);\r\n        }\r\n        return collector.finalValue;\r\n    };\r\n    LazyStream.prototype.onElem = function (fn) {\r\n        var _this = this;\r\n        return new LazyStream(new SourcesCollectors_1.MappedStreamDataSource(function (el) {\r\n            if (fn(el, _this.pos) === false) {\r\n                _this.stop();\r\n            }\r\n            return el;\r\n        }, this));\r\n    };\r\n    LazyStream.prototype.filter = function (fn) {\r\n        return new LazyStream(new SourcesCollectors_1.FilteredStreamDatasource(fn, this));\r\n    };\r\n    LazyStream.prototype.map = function (fn) {\r\n        return new LazyStream(new SourcesCollectors_1.MappedStreamDataSource(fn, this));\r\n    };\r\n    LazyStream.prototype.flatMap = function (fn) {\r\n        return new LazyStream(new SourcesCollectors_1.FlatMapStreamDataSource(fn, this));\r\n    };\r\n    //endpoint\r\n    LazyStream.prototype.each = function (fn) {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next()) === false) {\r\n                this.stop();\r\n            }\r\n        }\r\n    };\r\n    LazyStream.prototype.reduce = function (fn, startVal) {\r\n        if (startVal === void 0) { startVal = null; }\r\n        if (!this.hasNext()) {\r\n            return Monad_1.Optional.absent;\r\n        }\r\n        var value1 = null;\r\n        var value2 = null;\r\n        if (startVal != null) {\r\n            value1 = startVal;\r\n            value2 = this.next();\r\n        }\r\n        else {\r\n            value1 = this.next();\r\n            if (!this.hasNext()) {\r\n                return Monad_1.Optional.fromNullable(value1);\r\n            }\r\n            value2 = this.next();\r\n        }\r\n        value1 = fn(value1, value2);\r\n        while (this.hasNext()) {\r\n            value2 = this.next();\r\n            value1 = fn(value1, value2);\r\n        }\r\n        return Monad_1.Optional.fromNullable(value1);\r\n    };\r\n    LazyStream.prototype.last = function () {\r\n        if (!this.hasNext()) {\r\n            return Monad_1.Optional.absent;\r\n        }\r\n        return this.reduce(function (el1, el2) { return el2; });\r\n    };\r\n    LazyStream.prototype.first = function () {\r\n        this.reset();\r\n        if (!this.hasNext()) {\r\n            return Monad_1.Optional.absent;\r\n        }\r\n        return Monad_1.Optional.fromNullable(this.next());\r\n    };\r\n    LazyStream.prototype.anyMatch = function (fn) {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    LazyStream.prototype.allMatch = function (fn) {\r\n        while (this.hasNext()) {\r\n            if (!fn(this.next())) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    LazyStream.prototype.noneMatch = function (fn) {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next())) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    LazyStream.prototype.sort = function (comparator) {\r\n        var arr = this.collect(new SourcesCollectors_1.ArrayCollector());\r\n        arr = arr.sort(comparator);\r\n        return LazyStream.of.apply(LazyStream, arr);\r\n    };\r\n    Object.defineProperty(LazyStream.prototype, \"value\", {\r\n        get: function () {\r\n            return this.collect(new SourcesCollectors_1.ArrayCollector());\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LazyStream.prototype.stop = function () {\r\n        this.pos = this._limits + 1000000000;\r\n    };\r\n    LazyStream.prototype.isOverLimits = function () {\r\n        return this._limits != -1 && this.pos >= this._limits - 1;\r\n    };\r\n    return LazyStream;\r\n}());\r\nexports.LazyStream = LazyStream;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Lang_1 = require(\"./Lang\");\r\nvar DomQuery_1 = require(\"./DomQuery\");\r\nvar isString = Lang_1.Lang.isString;\r\n/**\r\n * xml query as specialized case for DomQuery\r\n */\r\nvar XMLQuery = /** @class */ (function (_super) {\r\n    __extends(XMLQuery, _super);\r\n    function XMLQuery(rootNode, docType) {\r\n        if (docType === void 0) { docType = \"text/xml\"; }\r\n        var _this = this;\r\n        var createIe11DomQueryShim = function () {\r\n            //at the time if wroting ie11 is the only relevant browser\r\n            //left withut any DomQuery support\r\n            var parser = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n            parser.async = false;\r\n            //we shim th dom parser from ie in\r\n            return {\r\n                parseFromString: function (text, contentType) {\r\n                    return parser.loadXML(text);\r\n                }\r\n            };\r\n        };\r\n        var parseXML = function (xml) {\r\n            if (xml == null) {\r\n                return null;\r\n            }\r\n            var domParser = Lang_1.Lang.saveResolveLazy(function () { return new window.DOMParser(); }, function () { return createIe11DomQueryShim(); }).value;\r\n            return domParser.parseFromString(xml, docType);\r\n        };\r\n        if (isString(rootNode)) {\r\n            _this = _super.call(this, parseXML(rootNode)) || this;\r\n        }\r\n        else {\r\n            _this = _super.call(this, rootNode) || this;\r\n        }\r\n        return _this;\r\n    }\r\n    XMLQuery.prototype.isXMLParserError = function () {\r\n        return this.querySelectorAll(\"parsererror\").isPresent();\r\n    };\r\n    XMLQuery.prototype.toString = function () {\r\n        var ret = [];\r\n        this.eachElem(function (node) {\r\n            var _a, _b, _c, _d, _e;\r\n            var serialized = (_d = (_c = (_b = (_a = window) === null || _a === void 0 ? void 0 : _a.XMLSerializer) === null || _b === void 0 ? void 0 : _b.constructor()) === null || _c === void 0 ? void 0 : _c.serializeToString(node), (_d !== null && _d !== void 0 ? _d : (_e = node) === null || _e === void 0 ? void 0 : _e.xml));\r\n            if (!!serialized) {\r\n                ret.push(serialized);\r\n            }\r\n        });\r\n        return ret.join(\"\");\r\n    };\r\n    XMLQuery.prototype.parserErrorText = function (joinstr) {\r\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\r\n    };\r\n    XMLQuery.parseXML = function (txt) {\r\n        return new XMLQuery(txt);\r\n    };\r\n    XMLQuery.parseHTML = function (txt) {\r\n        return new XMLQuery(txt, \"text/html\");\r\n    };\r\n    XMLQuery.fromString = function (txt, parseType) {\r\n        if (parseType === void 0) { parseType = \"text/xml\"; }\r\n        return new XMLQuery(txt, parseType);\r\n    };\r\n    return XMLQuery;\r\n}(DomQuery_1.DomQuery));\r\nexports.XMLQuery = XMLQuery;\r\nexports.XQ = XMLQuery;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Const;\r\n(function (Const) {\r\n    /*internal identifiers for options*/\r\n    Const.IDENT_ALL = \"@all\";\r\n    Const.IDENT_NONE = \"@none\";\r\n    Const.IDENT_THIS = \"@this\";\r\n    Const.IDENT_FORM = \"@form\";\r\n    /*\r\n     * [export const] constants\r\n     */\r\n    Const.P_PARTIAL_SOURCE = \"javax.faces.source\";\r\n    Const.PARTIAL_ID = \"partialId\";\r\n    Const.P_VIEWSTATE = \"javax.faces.ViewState\";\r\n    Const.P_VIEWROOT = \"javax.faces.ViewRoot\";\r\n    Const.P_VIEWHEAD = \"javax.faces.ViewHead\";\r\n    Const.P_VIEWBODY = \"javax.faces.ViewBody\";\r\n    Const.P_CLIENTWINDOW = \"javax.faces.ClientWindow\";\r\n    Const.P_AJAX = \"javax.faces.partial.ajax\";\r\n    Const.P_EXECUTE = \"javax.faces.partial.execute\";\r\n    Const.P_RENDER = \"javax.faces.partial.render\";\r\n    Const.P_EVT = \"javax.faces.partial.event\";\r\n    Const.P_CLIENT_WINDOW = \"javax.faces.ClientWindow\";\r\n    Const.P_RESET_VALUES = \"javax.faces.partial.resetValues\";\r\n    Const.P_WIN_ID = \"javax.faces.WindowId\";\r\n    Const.P_WINDOW_ID = \"javax.faces.windowId\";\r\n    /* message types */\r\n    Const.ERROR = \"error\";\r\n    Const.EVENT = \"event\";\r\n    Const.ON_ERROR = \"onerror\";\r\n    Const.ON_EVENT = \"onevent\";\r\n    /* event emitting stages */\r\n    Const.BEGIN = \"begin\";\r\n    Const.COMPLETE = \"complete\";\r\n    Const.SUCCESS = \"success\";\r\n    Const.SOURCE = \"source\";\r\n    Const.STATUS = \"status\";\r\n    Const.ERROR_NAME = \"error-name\";\r\n    Const.ERROR_MESSAGE = \"error-message\";\r\n    Const.RESPONSE_TEXT = \"responseText\";\r\n    Const.RESPONSE_XML = \"responseXML\";\r\n    /*ajax errors spec 14.4.2*/\r\n    Const.HTTPERROR = \"httpError\";\r\n    Const.EMPTY_RESPONSE = \"emptyResponse\";\r\n    Const.MALFORMEDXML = \"malformedXML\";\r\n    Const.SERVER_ERROR = \"serverError\";\r\n    Const.CLIENT_ERROR = \"clientError\";\r\n    Const.TIMEOUT_EVENT = \"timeout\";\r\n    Const.CTX_PARAM_MF_INTERNAL = \"_mfInternal\";\r\n    Const.CTX_PARAM_SRC_FRM_ID = \"_mfSourceFormId\";\r\n    Const.CTX_PARAM_SRC_CTL_ID = \"_mfSourceControlId\";\r\n    Const.CTX_PARAM_TR_TYPE = \"_mfTransportType\";\r\n    Const.CTX_PARAM_PASS_THR = \"passThrgh\";\r\n    Const.CTX_PARAM_DELAY = \"delay\";\r\n    Const.CTX_PARAM_TIMEOUT = \"timeout\";\r\n    Const.CTX_PARAM_RST = \"resetValues\";\r\n    Const.CTX_PARAM_EXECUTE = \"execute\";\r\n    Const.STAGE_DEVELOPMENT = \"Development\";\r\n    Const.CONTENT_TYPE = \"Content-Type\";\r\n    Const.HEAD_FACES_REQ = \"Faces-Request\";\r\n    Const.REQ_ACCEPT = \"Accept\";\r\n    Const.VAL_AJAX = \"partial/ajax\";\r\n    Const.ENCODED_URL = \"javax.faces.encodedURL\";\r\n    Const.REQ_TYPE_GET = \"GET\";\r\n    Const.REQ_TYPE_POST = \"POST\";\r\n    Const.STATE_EVT_BEGIN = \"begin\"; //TODO remove this\r\n    Const.STATE_EVT_TIMEOUT = \"TIMEOUT_EVENT\";\r\n    Const.STATE_EVT_COMPLETE = \"complete\"; //TODO remove this\r\n    Const.URL_ENCODED = \"application/x-www-form-urlencoded\";\r\n    Const.MULTIPART = \"multipart/form-data\";\r\n    Const.NO_TIMEOUT = 0;\r\n    Const.STD_ACCEPT = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";\r\n    Const.TAG_HEAD = \"head\";\r\n    Const.TAG_FORM = \"form\";\r\n    Const.TAG_BODY = \"body\";\r\n    Const.TAG_BEFORE = \"before\";\r\n    Const.TAG_AFTER = \"after\";\r\n    Const.TAG_ATTR = \"attribute\";\r\n    Const.SEL_VIEWSTATE_ELEM = \"[name='\" + Const.P_VIEWSTATE + \"']\";\r\n    Const.SEL_RESPONSE_XML = \"responseXML\";\r\n    Const.PHASE_PROCESS_RESPONSE = \"processResponse\";\r\n    Const.ERR_NO_PARTIAL_RESPONSE = \"Partial response not set\";\r\n    Const.ATTR_URL = \"url\";\r\n    Const.ATTR_NAME = \"name\";\r\n    Const.ATTR_VALUE = \"value\";\r\n    Const.ATTR_ID = \"id\";\r\n    /*partial response types*/\r\n    Const.RESP_PARTIAL = \"partial-response\";\r\n    Const.RESP_TYPE_ERROR = \"error\";\r\n    Const.RESP_TYPE_REDIRECT = \"redirect\";\r\n    Const.RESP_TYPE_CHANGES = \"changes\";\r\n    /*partial commands*/\r\n    Const.CMD_CHANGES = \"changes\";\r\n    Const.CMD_UPDATE = \"update\";\r\n    Const.CMD_DELETE = \"delete\";\r\n    Const.CMD_INSERT = \"insert\";\r\n    Const.CMD_EVAL = \"eval\";\r\n    Const.CMD_ERROR = \"error\";\r\n    Const.CMD_ATTRIBUTES = \"attributes\";\r\n    Const.CMD_EXTENSION = \"extension\";\r\n    Const.CMD_REDIRECT = \"redirect\";\r\n    /*other constants*/\r\n    Const.UPDATE_FORMS = \"_updateForms\";\r\n    Const.UPDATE_ELEMS = \"_updateElems\";\r\n    Const.MYFACES = \"myfaces\";\r\n    Const.SEL_SCRIPTS_STYLES = \"script, style, link\";\r\n    Const.MF_NONE = \"__mf_none__\";\r\n    Const.REASON_EXPIRED = \"Expired\";\r\n    Const.APPLIED_VST = \"appliedViewState\";\r\n    Const.RECONNECT_INTERVAL = 500;\r\n    Const.MAX_RECONNECT_ATTEMPTS = 25;\r\n    Const.HTML_VIEWSTATE = [\"<input type='hidden'\", \"id='\", Const.P_VIEWSTATE, \"' name='\", Const.P_VIEWSTATE, \"' value='' />\"].join(\"\");\r\n    Const.EMPTY_FUNC = Object.freeze(function () { });\r\n    Const.EMPTY_STR = \"\";\r\n    Const.EMPTY_MAP = Object.freeze({});\r\n})(Const = exports.Const || (exports.Const = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar AjaxImpl_1 = require(\"../AjaxImpl\");\r\nvar Assertions_1 = require(\"../util/Assertions\");\r\nvar ErrorData_1 = require(\"./ErrorData\");\r\nvar DomQuery_1 = require(\"../../ext/monadish/DomQuery\");\r\nvar Lang_1 = require(\"../util/Lang\");\r\nvar trim = monadish_1.Lang.trim;\r\nvar getLocalOrGlobalConfig = Lang_1.ExtLang.getLocalOrGlobalConfig;\r\nvar ImplTypes_1 = require(\"../core/ImplTypes\");\r\nvar EventData_1 = require(\"./EventData\");\r\n/**\r\n * Response processor\r\n *\r\n * Each  XML tag is either a node or a leaf\r\n * or both\r\n *\r\n * the processor provides a set of operations\r\n * which are executed on a single leaf node per operation\r\n * and present the core functionality of our response\r\n *\r\n */\r\nvar ResponseProcessor = /** @class */ (function () {\r\n    function ResponseProcessor(request, externalContext, internalContext) {\r\n        this.request = request;\r\n        this.externalContext = externalContext;\r\n        this.internalContext = internalContext;\r\n    }\r\n    ResponseProcessor.prototype.replaceHead = function (shadowDocument) {\r\n        var shadowHead = shadowDocument.querySelectorAll(Const_1.Const.TAG_HEAD);\r\n        if (!shadowHead.isPresent()) {\r\n            return;\r\n        }\r\n        var shadowInnerHTML = shadowHead.html().value;\r\n        var oldHead = DomQuery_1.DQ.querySelectorAll(Const_1.Const.TAG_HEAD);\r\n        //delete all to avoid script and style overlays\r\n        oldHead.querySelectorAll(Const_1.Const.SEL_SCRIPTS_STYLES).delete();\r\n        this.storeForEval(shadowHead);\r\n    };\r\n    /**\r\n     * replaces the body in the expected manner\r\n     * which means the entire body content is refreshed\r\n     * however also the body attributes must be transferred\r\n     * keeping event handlers etc... in place\r\n     *\r\n     * @param shadowDocument .. an incoming shadow document hosting the new nodes\r\n     */\r\n    ResponseProcessor.prototype.replaceBody = function (shadowDocument) {\r\n        var shadowBody = shadowDocument.querySelectorAll(Const_1.Const.TAG_BODY);\r\n        if (!shadowBody.isPresent()) {\r\n            return;\r\n        }\r\n        var shadowInnerHTML = shadowBody.html().value;\r\n        var resultingBody = DomQuery_1.DQ.querySelectorAll(Const_1.Const.TAG_BODY).html(shadowInnerHTML);\r\n        var updateForms = resultingBody.querySelectorAll(Const_1.Const.TAG_FORM);\r\n        resultingBody.copyAttrs(shadowBody);\r\n        this.storeForPostProcessing(updateForms, resultingBody);\r\n    };\r\n    /**\r\n     * Leaf Tag eval... process whatever is in the evals cdata block\r\n     *\r\n     * @param node the node to eval\r\n     */\r\n    ResponseProcessor.prototype.eval = function (node) {\r\n        DomQuery_1.DQ.globalEval(node.cDATAAsString);\r\n    };\r\n    /**\r\n     * processes an incoming error from the response\r\n     * which is hosted under the &lt;error&gt; tag\r\n     * @param request the current request\r\n     * @param context the context object\r\n     * @param node the node in the xml hosting the error message\r\n     */\r\n    ResponseProcessor.prototype.error = function (node) {\r\n        /**\r\n         * <error>\r\n         *      <error-name>String</error-name>\r\n         *      <error-message><![CDATA[message]]></error-message>\r\n         * <error>\r\n         */\r\n        var mergedErrorData = new monadish_1.Config({});\r\n        mergedErrorData.assign(Const_1.Const.SOURCE).value = this.externalContext.getIf(Const_1.Const.P_PARTIAL_SOURCE).get(0).value;\r\n        mergedErrorData.assign(Const_1.Const.ERROR_NAME).value = node.getIf(Const_1.Const.ERROR_NAME).textContent(\"\");\r\n        mergedErrorData.assign(Const_1.Const.ERROR_MESSAGE).value = node.getIf(Const_1.Const.ERROR_MESSAGE).cDATAAsString;\r\n        var hasResponseXML = this.internalContext.get(Const_1.Const.RESPONSE_XML).isPresent();\r\n        mergedErrorData.assignIf(hasResponseXML, Const_1.Const.RESPONSE_XML).value = this.internalContext.getIf(Const_1.Const.RESPONSE_XML).value.get(0).value;\r\n        var errorData = ErrorData_1.ErrorData.fromServerError(mergedErrorData);\r\n        this.externalContext.getIf(Const_1.Const.ON_ERROR).orElse(this.internalContext.getIf(Const_1.Const.ON_ERROR).value).orElse(Const_1.Const.EMPTY_FUNC).value(errorData);\r\n        AjaxImpl_1.Implementation.sendError(errorData);\r\n    };\r\n    /**\r\n     * process the redirect operation\r\n     *\r\n     * @param node\r\n     */\r\n    ResponseProcessor.prototype.redirect = function (node) {\r\n        Assertions_1.Assertions.assertUrlExists(node);\r\n        var redirectUrl = trim(node.attr(Const_1.Const.ATTR_URL).value);\r\n        if (redirectUrl != \"\") {\r\n            window.location.href = redirectUrl;\r\n        }\r\n    };\r\n    /**\r\n     * processes the update operation and updates the node with the cdata block\r\n     * @param context\r\n     * @param internalContext\r\n     * @param node\r\n     * @param cdataBlock\r\n     */\r\n    ResponseProcessor.prototype.update = function (node, cdataBlock) {\r\n        var _a;\r\n        var result = DomQuery_1.DQ.byId(node.id.value).outerHTML(cdataBlock, false, false);\r\n        var sourceForm = (_a = result) === null || _a === void 0 ? void 0 : _a.parents(Const_1.Const.TAG_FORM).orElse(result.byTagName(Const_1.Const.TAG_FORM, true));\r\n        if (sourceForm) {\r\n            this.storeForPostProcessing(sourceForm, result);\r\n        }\r\n    };\r\n    ResponseProcessor.prototype.delete = function (node) {\r\n        DomQuery_1.DQ.byId(node.id.value).delete();\r\n    };\r\n    /**\r\n     * attributes leaf tag... process the attributes\r\n     *\r\n     * @param node\r\n     */\r\n    ResponseProcessor.prototype.attributes = function (node) {\r\n        var elem = DomQuery_1.DQ.byId(node.id.value);\r\n        node.byTagName(Const_1.Const.TAG_ATTR).each(function (item) {\r\n            elem.attr(item.attr(Const_1.Const.ATTR_NAME).value).value = item.attr(Const_1.Const.ATTR_VALUE).value;\r\n        });\r\n    };\r\n    /**\r\n     * @param shadownResponse\r\n     */\r\n    ResponseProcessor.prototype.replaceViewRoot = function (shadowDocument) {\r\n        this.replaceHead(shadowDocument);\r\n        this.replaceBody(shadowDocument);\r\n    };\r\n    /**\r\n     * insert handling, either before or after\r\n     *\r\n     * @param node\r\n     */\r\n    ResponseProcessor.prototype.insert = function (node) {\r\n        //let insertId = node.id; //not used atm\r\n        var before = node.attr(Const_1.Const.TAG_BEFORE);\r\n        var after = node.attr(Const_1.Const.TAG_AFTER);\r\n        var insertNodes = DomQuery_1.DQ.fromMarkup(node.cDATAAsString);\r\n        if (before.isPresent()) {\r\n            var res = DomQuery_1.DQ.byId(before.value).insertBefore(insertNodes);\r\n            this.internalContext.assign(Const_1.Const.UPDATE_ELEMS).value.push(insertNodes);\r\n        }\r\n        if (after.isPresent()) {\r\n            var domQuery = DomQuery_1.DQ.byId(after.value);\r\n            domQuery.insertAfter(insertNodes);\r\n            this.internalContext.assign(Const_1.Const.UPDATE_ELEMS).value.push(insertNodes);\r\n        }\r\n    };\r\n    ResponseProcessor.prototype.insertWithSubtags = function (node) {\r\n        var _this = this;\r\n        var before = node.querySelectorAll(Const_1.Const.TAG_BEFORE);\r\n        var after = node.querySelectorAll(Const_1.Const.TAG_AFTER);\r\n        before.each(function (item) {\r\n            var insertId = item.attr(Const_1.Const.ATTR_ID);\r\n            var insertNodes = DomQuery_1.DQ.fromMarkup(item.cDATAAsString);\r\n            if (insertId.isPresent()) {\r\n                DomQuery_1.DQ.byId(insertId.value).insertBefore(insertNodes);\r\n                _this.internalContext.assign(Const_1.Const.UPDATE_ELEMS).value.push(insertNodes);\r\n            }\r\n        });\r\n        after.each(function (item) {\r\n            var insertId = item.attr(Const_1.Const.ATTR_ID);\r\n            var insertNodes = DomQuery_1.DQ.fromMarkup(item.cDATAAsString);\r\n            if (insertId.isPresent()) {\r\n                DomQuery_1.DQ.byId(insertId.value).insertAfter(insertNodes);\r\n                _this.internalContext.assign(Const_1.Const.UPDATE_ELEMS).value.push(insertNodes);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * process the viewState update, update the affected\r\n     * forms with their respective new viewstate values\r\n     *\r\n     */\r\n    ResponseProcessor.prototype.processViewState = function (node) {\r\n        if (this.isViewStateNode(node)) {\r\n            var viewStateValue = node.textContent();\r\n            this.internalContext.assign(Const_1.Const.APPLIED_VST, node.id.value).value = new ImplTypes_1.ViewState(node.id.value, viewStateValue);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ResponseProcessor.prototype.globalEval = function () {\r\n        var updateElems = new (DomQuery_1.DQ.bind.apply(DomQuery_1.DQ, __spreadArrays([void 0], this.internalContext.getIf(Const_1.Const.UPDATE_ELEMS).value)))();\r\n        updateElems.runCss();\r\n        updateElems.runScripts();\r\n    };\r\n    ResponseProcessor.prototype.fixViewStates = function () {\r\n        var _this = this;\r\n        monadish_1.Stream.ofAssoc(this.internalContext.getIf(Const_1.Const.APPLIED_VST).orElse({}).value)\r\n            .each(function (item) {\r\n            var key = item[0];\r\n            var value = item[1];\r\n            var nameSpace = DomQuery_1.DQ.byId(value.nameSpace).orElse(document.body);\r\n            var affectedForms = nameSpace.byTagName(Const_1.Const.TAG_FORM);\r\n            var affectedForms2 = nameSpace.filter(function (item) { return item.tagName.orElse(\"\").value.toLowerCase() == Const_1.Const.TAG_FORM; });\r\n            _this.appendViewStateToForms(new monadish_1.DomQuery(affectedForms, affectedForms2), value.value);\r\n        });\r\n    };\r\n    ResponseProcessor.prototype.done = function () {\r\n        var eventData = EventData_1.EventData.createFromRequest(this.request.value, this.externalContext, Const_1.Const.SUCCESS);\r\n        //because some frameworks might decorate them over the context in the response\r\n        var eventHandler = this.externalContext.getIf(Const_1.Const.ON_EVENT).orElse(this.internalContext.getIf(Const_1.Const.ON_EVENT).value).orElse(Const_1.Const.EMPTY_FUNC).value;\r\n        AjaxImpl_1.Implementation.sendEvent(eventData, eventHandler);\r\n    };\r\n    ResponseProcessor.prototype.isAllFormResolution = function (context) {\r\n        return getLocalOrGlobalConfig(context, \"no_portlet_env\", false);\r\n    };\r\n    ResponseProcessor.prototype.appendViewStateToForms = function (forms, viewState) {\r\n        var _this = this;\r\n        forms.each(function (form) {\r\n            var viewStateElems = form.querySelectorAll(Const_1.Const.SEL_VIEWSTATE_ELEM)\r\n                .orElseLazy(function () { return _this.newViewStateElement(form); });\r\n            viewStateElems.attr(\"value\").value = viewState;\r\n        });\r\n    };\r\n    /**\r\n     * Helper to Create a new JSF ViewState Element\r\n     *\r\n     * @param parent, the parent node to attach the viewstate element to\r\n     * (usually a form node)\r\n     */\r\n    ResponseProcessor.prototype.newViewStateElement = function (parent) {\r\n        var newViewState = DomQuery_1.DQ.fromMarkup(Const_1.Const.HTML_VIEWSTATE);\r\n        newViewState.appendTo(parent);\r\n        return newViewState;\r\n    };\r\n    /**\r\n     * Stores certain aspects of the dom for later post processing\r\n     *\r\n     * @param updateForms the update forms which should receive standardized internal jsf data\r\n     * @param toBeEvaled the resulting elements which should be evaled\r\n     */\r\n    ResponseProcessor.prototype.storeForPostProcessing = function (updateForms, toBeEvaled) {\r\n        this.storeForUpdate(updateForms);\r\n        this.storeForEval(toBeEvaled);\r\n    };\r\n    ResponseProcessor.prototype.storeForUpdate = function (updateForms) {\r\n        this.internalContext.assign(Const_1.Const.UPDATE_FORMS).value.push(updateForms);\r\n    };\r\n    ResponseProcessor.prototype.storeForEval = function (toBeEvaled) {\r\n        this.internalContext.assign(Const_1.Const.UPDATE_ELEMS).value.push(toBeEvaled);\r\n    };\r\n    ResponseProcessor.prototype.isViewStateNode = function (node) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n        var separatorchar = window.jsf.separatorchar;\r\n        return \"undefined\" != typeof ((_b = (_a = node) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.value) && (((_d = (_c = node) === null || _c === void 0 ? void 0 : _c.id) === null || _d === void 0 ? void 0 : _d.value) == Const_1.Const.P_VIEWSTATE ||\r\n            ((_g = (_f = (_e = node) === null || _e === void 0 ? void 0 : _e.id) === null || _f === void 0 ? void 0 : _f.value) === null || _g === void 0 ? void 0 : _g.indexOf([separatorchar, Const_1.Const.P_VIEWSTATE].join(\"\"))) != -1 ||\r\n            ((_k = (_j = (_h = node) === null || _h === void 0 ? void 0 : _h.id) === null || _j === void 0 ? void 0 : _j.value) === null || _k === void 0 ? void 0 : _k.indexOf([Const_1.Const.P_VIEWSTATE, separatorchar].join(\"\"))) != -1);\r\n    };\r\n    return ResponseProcessor;\r\n}());\r\nexports.ResponseProcessor = ResponseProcessor;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar Lang_1 = require(\"./Lang\");\r\nvar getMessage = Lang_1.ExtLang.getMessage;\r\nvar makeException = Lang_1.ExtLang.makeException;\r\n/**\r\n * a set of internal code assertions\r\n * which raise an error\r\n *\r\n */\r\nvar Assertions;\r\n(function (Assertions) {\r\n    function assertRequestIntegrity(options, elem) {\r\n        /*assert if the onerror is set and once if it is set it must be of type function*/\r\n        assertFunction(options.getIf(Const_1.Const.ON_ERROR).value);\r\n        /*assert if the onevent is set and once if it is set it must be of type function*/\r\n        assertFunction(options.getIf(Const_1.Const.ON_EVENT).value);\r\n        //improve the error messages if an empty elem is passed\r\n        //Assertions.assertElementExists(elem);\r\n        assert(elem.isPresent(), getMessage(\"ERR_MUST_BE_PROVIDED1\", \"{0}: source  must be provided or exist\", \"source element id\"), \"jsf.ajax.request\", \"ArgNotSet\");\r\n    }\r\n    Assertions.assertRequestIntegrity = assertRequestIntegrity;\r\n    function assertUrlExists(node) {\r\n        if (node.attr(Const_1.Const.ATTR_URL).isAbsent()) {\r\n            throw Assertions.raiseError(new Error(), getMessage(\"ERR_RED_URL\", null, \"_Ajaxthis.processRedirect\"), \"processRedirect\");\r\n        }\r\n    }\r\n    Assertions.assertUrlExists = assertUrlExists;\r\n    /**\r\n     * checks the xml for various issues which can occur\r\n     * and prevent a proper processing\r\n     */\r\n    function assertValidXMLResponse(responseXML) {\r\n        assert(!responseXML.isAbsent(), Const_1.Const.EMPTY_RESPONSE, Const_1.Const.PHASE_PROCESS_RESPONSE);\r\n        assert(!responseXML.isXMLParserError(), responseXML.parserErrorText(\"\"), Const_1.Const.PHASE_PROCESS_RESPONSE);\r\n        assert(responseXML.querySelectorAll(Const_1.Const.RESP_PARTIAL).isPresent(), Const_1.Const.ERR_NO_PARTIAL_RESPONSE, Const_1.Const.PHASE_PROCESS_RESPONSE);\r\n    }\r\n    Assertions.assertValidXMLResponse = assertValidXMLResponse;\r\n    /**\r\n     * internal helper which raises an error in the\r\n     * format we need for further processing\r\n     *\r\n     * @param message the message\r\n     * @param title the title of the error (optional)\r\n     * @param name the name of the error (optional)\r\n     */\r\n    function raiseError(error, message, caller, title, name) {\r\n        var finalTitle = (title !== null && title !== void 0 ? title : Const_1.Const.MALFORMEDXML);\r\n        var finalName = (name !== null && name !== void 0 ? name : Const_1.Const.MALFORMEDXML);\r\n        var finalMessage = (message !== null && message !== void 0 ? message : \"\");\r\n        //TODO clean up the messy makeException, this is a perfect case for encapsulation and sane defaults\r\n        return makeException(error, finalTitle, finalName, \"Response\", caller || ((arguments.caller) ? arguments.caller.toString() : \"_raiseError\"), finalMessage);\r\n    }\r\n    Assertions.raiseError = raiseError;\r\n    /*\r\n     * using the new typescript 3.7 compiler assertion functionality to improve compiler hinting\r\n     * we are not fully there yet, but soon\r\n     */\r\n    function assert(value, msg, caller, title) {\r\n        if (msg === void 0) { msg = \"\"; }\r\n        if (caller === void 0) { caller = \"\"; }\r\n        if (title === void 0) { title = \"Assertion Error\"; }\r\n        if (!value) {\r\n            throw Assertions.raiseError(new Error(), msg, caller, title);\r\n        }\r\n    }\r\n    Assertions.assert = assert;\r\n    function assertType(value, theType, msg, caller, title) {\r\n        if (msg === void 0) { msg = \"\"; }\r\n        if (caller === void 0) { caller = \"\"; }\r\n        if (title === void 0) { title = \"Type Assertion Error\"; }\r\n        if ((!!value) && !monadish_1.Lang.assertType(value, theType)) {\r\n            throw Assertions.raiseError(new Error(), msg, caller, title);\r\n        }\r\n    }\r\n    Assertions.assertType = assertType;\r\n    function assertFunction(value, msg, caller, title) {\r\n        if (msg === void 0) { msg = \"\"; }\r\n        if (caller === void 0) { caller = \"\"; }\r\n        if (title === void 0) { title = \"Assertion Error\"; }\r\n        assertType(value, \"function\", msg, caller, title);\r\n    }\r\n    Assertions.assertFunction = assertFunction;\r\n})(Assertions = exports.Assertions || (exports.Assertions = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * todo replace singleton with module definition\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Lang_1 = require(\"../../ext/monadish/Lang\");\r\nvar Messages_1 = require(\"../i18n/Messages\");\r\nvar DomQuery_1 = require(\"../../ext/monadish/DomQuery\");\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar ExtLang;\r\n(function (ExtLang) {\r\n    var installedLocale;\r\n    var nameSpace = \"impl/util/Lang/\";\r\n    function getLanguage() {\r\n        //TODO global config override\r\n        var _a, _b, _c;\r\n        var language = (_b = (_a = navigator.languages) === null || _a === void 0 ? void 0 : _a[0], (_b !== null && _b !== void 0 ? _b : (_c = navigator) === null || _c === void 0 ? void 0 : _c.language));\r\n        language = language.split(\"-\")[0];\r\n        return language;\r\n    }\r\n    ExtLang.getLanguage = getLanguage;\r\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\r\n    /**\r\n     * helper function to savely resolve anything\r\n     * this is not an elvis operator, it resolves\r\n     * a value without exception in a tree and if\r\n     * it is not resolvable then an optional of\r\n     * a default value is restored or Optional.empty\r\n     * if none is given\r\n     *\r\n     * usage\r\n     * <code>\r\n     *     let var: Optional<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\r\n     * </code>\r\n     *\r\n     * @param resolverProducer a lambda which can produce the value\r\n     * @param defaultValue an optional default value if the producer failes to produce anything\r\n     * @returns an Optional of the produced value\r\n     */\r\n    function failSaveResolve(resolverProducer, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = null; }\r\n        return Lang_1.Lang.saveResolve(resolverProducer, defaultValue);\r\n    }\r\n    ExtLang.failSaveResolve = failSaveResolve;\r\n    function failSaveExecute(resolverProducer, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = null; }\r\n        Lang_1.Lang.saveResolve(resolverProducer, defaultValue);\r\n    }\r\n    ExtLang.failSaveExecute = failSaveExecute;\r\n    /**\r\n     * returns a given localized message upon a given key\r\n     * basic java log like templating functionality is included\r\n     *\r\n     * @param {String} key the key for the message\r\n     * @param {String} defaultMessage optional default message if none was found\r\n     *\r\n     * Additionally you can pass additional arguments, which are used\r\n     * in the same way java log templates use the params\r\n     *\r\n     * @param templateParams the param list to be filled in\r\n     */\r\n    function getMessage(key, defaultMessage) {\r\n        var templateParams = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            templateParams[_i - 2] = arguments[_i];\r\n        }\r\n        var _a, _b;\r\n        installedLocale = (installedLocale !== null && installedLocale !== void 0 ? installedLocale : new Messages_1.Messages());\r\n        var msg = (_b = (_a = installedLocale[key], (_a !== null && _a !== void 0 ? _a : defaultMessage)), (_b !== null && _b !== void 0 ? _b : key + \" - undefined message\"));\r\n        monadish_1.Stream.of.apply(monadish_1.Stream, templateParams).each(function (param, cnt) {\r\n            msg = msg.replace(new RegExp([\"\\\\{\", cnt, \"\\\\}\"].join(\"\"), \"g\"), param);\r\n        });\r\n        return msg;\r\n    }\r\n    ExtLang.getMessage = getMessage;\r\n    /**\r\n     * transforms a key value pair into a string\r\n     * @param key the key\r\n     * @param val the value\r\n     * @param delimiter the delimiter\r\n     */\r\n    function keyValToStr(key, val, delimiter) {\r\n        if (delimiter === void 0) { delimiter = \"\\n\"; }\r\n        return [key, val].join(delimiter);\r\n    }\r\n    ExtLang.keyValToStr = keyValToStr;\r\n    /**\r\n     * determines the correct event depending\r\n     * on the browsers state\r\n     *\r\n     * @param evt incoming event object (note not all browsers\r\n     * have this)\r\n     *\r\n     * @return an event object no matter what is incoming\r\n     */\r\n    function getEvent(evt) {\r\n        var _a, _b;\r\n        return _b = (evt !== null && evt !== void 0 ? evt : (_a = window) === null || _a === void 0 ? void 0 : _a.event), (_b !== null && _b !== void 0 ? _b : {});\r\n    }\r\n    ExtLang.getEvent = getEvent;\r\n    /**\r\n     * cross port from the dojo lib\r\n     * browser save event resolution\r\n     * @param evt the event object\r\n     * (with a fallback for ie events if none is present)\r\n     */\r\n    function getEventTarget(evt) {\r\n        var _a, _b, _c, _d, _e;\r\n        //ie6 and 7 fallback\r\n        evt = getEvent(evt);\r\n        /**\r\n         * evt source is defined in the jsf events\r\n         * seems like some component authors use our code\r\n         * so we add it here see also\r\n         * https://issues.apache.org/jira/browse/MYFACES-2458\r\n         * not entirely a bug but makes sense to add this\r\n         * behavior. I dont use it that way but nevertheless it\r\n         * does not break anything so why not\r\n         * */\r\n        var t = (_d = (_b = (_a = evt) === null || _a === void 0 ? void 0 : _a.srcElement, (_b !== null && _b !== void 0 ? _b : (_c = evt) === null || _c === void 0 ? void 0 : _c.target)), (_d !== null && _d !== void 0 ? _d : (_e = evt) === null || _e === void 0 ? void 0 : _e.source));\r\n        while ((t) && (t.nodeType != 1)) {\r\n            t = t.parentNode;\r\n        }\r\n        return t;\r\n    }\r\n    ExtLang.getEventTarget = getEventTarget;\r\n    /**\r\n     * creates an exeption with additional internal parameters\r\n     * for extra information\r\n     *\r\n     * @param {String} title the exception title\r\n     * @param {String} name  the exception name\r\n     * @param {String} callerCls the caller class\r\n     * @param {String} callFunc the caller function\r\n     * @param {String} message the message for the exception\r\n     */\r\n    function makeException(error, title, name, callerCls, callFunc, message) {\r\n        var _a;\r\n        return new Error((_a = message + ((callerCls !== null && callerCls !== void 0 ? callerCls : nameSpace)) + callFunc, (_a !== null && _a !== void 0 ? _a : (\"\" + arguments.caller.toString()))));\r\n    }\r\n    ExtLang.makeException = makeException;\r\n    /**\r\n     * fetches a global config entry\r\n     * @param {String} configName the name of the configuration entry\r\n     * @param {Object} defaultValue\r\n     *\r\n     * @return either the config entry or if none is given the default value\r\n     */\r\n    function getGlobalConfig(configName, defaultValue) {\r\n        var _a, _b, _c, _d;\r\n        /**\r\n         * note we could use exists but this is an heavy operation, since the config name usually\r\n         * given this function here is called very often\r\n         * is a single entry without . in between we can do the lighter shortcut\r\n         */\r\n        return _d = (_c = (_b = (_a = window) === null || _a === void 0 ? void 0 : _a.myfaces) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c[configName], (_d !== null && _d !== void 0 ? _d : defaultValue);\r\n    }\r\n    ExtLang.getGlobalConfig = getGlobalConfig;\r\n    /**\r\n     * gets the local or global options with local ones having higher priority\r\n     * if no local or global one was found then the default value is given back\r\n     *\r\n     * @param {String} configName the name of the configuration entry\r\n     * @param {String} localOptions the local options root for the configuration myfaces as default marker is added implicitely\r\n     *\r\n     * @param {Object} defaultValue\r\n     *\r\n     * @return either the config entry or if none is given the default value\r\n     */\r\n    function getLocalOrGlobalConfig(localOptions, configName, defaultValue) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        return _h = (_d = (_c = (_b = (_a = localOptions.value) === null || _a === void 0 ? void 0 : _a.myfaces) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c[configName], (_d !== null && _d !== void 0 ? _d : (_g = (_f = (_e = window) === null || _e === void 0 ? void 0 : _e.myfaces) === null || _f === void 0 ? void 0 : _f.config) === null || _g === void 0 ? void 0 : _g[configName])), (_h !== null && _h !== void 0 ? _h : defaultValue);\r\n    }\r\n    ExtLang.getLocalOrGlobalConfig = getLocalOrGlobalConfig;\r\n    ;\r\n    /**\r\n     * fetches the form in an unprecise manner depending\r\n     * on an element or event target\r\n     *\r\n     * @param elem\r\n     * @param event\r\n     */\r\n    function getForm(elem, event) {\r\n        var FORM = \"form\";\r\n        var queryElem = new DomQuery_1.DQ(elem);\r\n        var eventTarget = new DomQuery_1.DQ(ExtLang.getEventTarget(event));\r\n        if (queryElem.isTag(FORM)) {\r\n            return queryElem;\r\n        }\r\n        //html 5 for handling\r\n        if (queryElem.attr(FORM).isPresent()) {\r\n            var formId = queryElem.attr(FORM).value;\r\n            var foundForm = DomQuery_1.DQ.byId(formId);\r\n            if (foundForm.isPresent()) {\r\n                return foundForm;\r\n            }\r\n        }\r\n        var form = queryElem.parents(FORM)\r\n            .orElseLazy(function () { return queryElem.byTagName(FORM, true); })\r\n            .orElseLazy(function () { return eventTarget.parents(FORM); })\r\n            .orElseLazy(function () { return eventTarget.byTagName(FORM); })\r\n            .first();\r\n        assertFormExists(form);\r\n        return form;\r\n    }\r\n    ExtLang.getForm = getForm;\r\n    function assertFormExists(form) {\r\n        if (form.isAbsent()) {\r\n            throw makeException(new Error(), null, null, \"Impl\", \"getForm\", getMessage(\"ERR_FORM\"));\r\n        }\r\n    }\r\n})(ExtLang = exports.ExtLang || (exports.ExtLang = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Messages = /** @class */ (function () {\r\n    function Messages() {\r\n        this.MSG_TEST = \"Testmessage\";\r\n        /*Messages*/\r\n        /** @constant */\r\n        this.MSG_DEV_MODE = \"Note, this message is only sent, because project stage is development and no \" +\r\n            \"other error listeners are registered.\";\r\n        /** @constant */\r\n        this.MSG_AFFECTED_CLASS = \"Affected Class=\";\r\n        /** @constant */\r\n        this.MSG_AFFECTED_METHOD = \"Affected Method=\";\r\n        /** @constant */\r\n        this.MSG_ERROR_NAME = \"Error Name=\";\r\n        /** @constant */\r\n        this.MSG_ERROR_MESSAGE = \"Error Message=\";\r\n        /** @constant */\r\n        this.MSG_SERVER_ERROR_NAME = \"Server Error Name=\";\r\n        /** @constant */\r\n        this.MSG_ERROR_DESC = \"Error Description=\";\r\n        /** @constant */\r\n        this.MSG_ERROR_NO = \"Error Number=\";\r\n        /** @constant */\r\n        this.MSG_ERROR_LINENO = \"Error Line Number=\";\r\n        /*Errors and messages*/\r\n        /** @constant */\r\n        this.ERR_FORM = \"Sourceform could not be determined, either because element is not attached to a form or we have multiple forms with named elements of the same identifier or name, stopping the ajax processing\";\r\n        /** @constant */\r\n        this.ERR_VIEWSTATE = \"jsf.viewState= param value not of type form!\";\r\n        /** @constant */\r\n        this.ERR_TRANSPORT = \"Transport type {0} does not exist\";\r\n        /** @constant */\r\n        this.ERR_EVT_PASS = \"an event must be passed down (either a an event object null or undefined) \";\r\n        /** @constant */\r\n        this.ERR_CONSTRUCT = \"Parts of the response couldn't be retrieved when constructing the event data= {0} \";\r\n        /** @constant */\r\n        this.ERR_MALFORMEDXML = \"The server response could not be parsed, the server has returned with a response which is not xml !\";\r\n        /** @constant */\r\n        this.ERR_SOURCE_FUNC = \"source cannot be a function (probably source and event were not defined or set to null\";\r\n        /** @constant */\r\n        this.ERR_EV_OR_UNKNOWN = \"An event object or unknown must be passed as second parameter\";\r\n        /** @constant */\r\n        this.ERR_SOURCE_NOSTR = \"source cannot be a string\";\r\n        /** @constant */\r\n        this.ERR_SOURCE_DEF_NULL = \"source must be defined or null\";\r\n        //_Lang.js\r\n        /** @constant */\r\n        this.ERR_MUST_STRING = \"{0}: {1} namespace must be of type String\";\r\n        /** @constant */\r\n        this.ERR_REF_OR_ID = \"{0}: {1} a reference node or identifier must be provided\";\r\n        /** @constant */\r\n        this.ERR_PARAM_GENERIC = \"{0}: parameter {1} must be of type {2}\";\r\n        /** @constant */\r\n        this.ERR_PARAM_STR = \"{0}: {1} param must be of type string\";\r\n        /** @constant */\r\n        this.ERR_PARAM_STR_RE = \"{0}: {1} param must be of type string or a regular expression\";\r\n        /** @constant */\r\n        this.ERR_PARAM_MIXMAPS = \"{0}: both a source as well as a destination map must be provided\";\r\n        /** @constant */\r\n        this.ERR_MUST_BE_PROVIDED = \"{0}: an {1} and a {2} must be provided\";\r\n        /** @constant */\r\n        this.ERR_MUST_BE_PROVIDED1 = \"{0}: {1} must be set\";\r\n        /** @constant */\r\n        this.ERR_REPLACE_EL = \"replaceElements called while evalNodes is not an array\";\r\n        /** @constant */\r\n        this.ERR_EMPTY_RESPONSE = \"{0}: The response cannot be null or empty!\";\r\n        /** @constant */\r\n        this.ERR_ITEM_ID_NOTFOUND = \"{0}: item with identifier {1} could not be found\";\r\n        /** @constant */\r\n        this.ERR_PPR_IDREQ = \"{0}: Error in PPR Insert, id must be present\";\r\n        /** @constant */\r\n        this.ERR_PPR_INSERTBEFID = \"{0}: Error in PPR Insert, before id or after id must be present\";\r\n        /** @constant */\r\n        this.ERR_PPR_INSERTBEFID_1 = \"{0}: Error in PPR Insert, before  node of id {1} does not exist in document\";\r\n        /** @constant */\r\n        this.ERR_PPR_INSERTBEFID_2 = \"{0}: Error in PPR Insert, after  node of id {1} does not exist in document\";\r\n        /** @constant */\r\n        this.ERR_PPR_DELID = \"{0}: Error in delete, id not in xml markup\";\r\n        /** @constant */\r\n        this.ERR_PPR_UNKNOWNCID = \"{0}:  Unknown Html-Component-ID= {1}\";\r\n        /** @constant */\r\n        this.ERR_NO_VIEWROOTATTR = \"{0}: Changing of ViewRoot attributes is not supported\";\r\n        /** @constant */\r\n        this.ERR_NO_HEADATTR = \"{0}: Changing of Head attributes is not supported\";\r\n        /** @constant */\r\n        this.ERR_RED_URL = \"{0}: Redirect without url\";\r\n        /** @constant */\r\n        this.ERR_REQ_FAILED_UNKNOWN = \"Request failed with unknown status\";\r\n        /** @constant */\r\n        this.ERR_REQU_FAILED = \"Request failed with status {0} and reason {1}\";\r\n        /** @constant */\r\n        this.UNKNOWN = \"UNKNOWN\";\r\n    }\r\n    return Messages;\r\n}());\r\nexports.Messages = Messages;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Const_1 = require(\"../core/Const\");\r\nvar EventData_1 = require(\"./EventData\");\r\nvar Lang_1 = require(\"../util/Lang\");\r\nvar getMessage = Lang_1.ExtLang.getMessage;\r\nvar ErrorType;\r\n(function (ErrorType) {\r\n    ErrorType[\"SERVER_ERROR\"] = \"serverError\";\r\n    ErrorType[\"HTTP_ERROR\"] = \"httpError\";\r\n    ErrorType[\"CLIENT_ERROR\"] = \"clientErrror\";\r\n    ErrorType[\"TIMEOUT\"] = \"timeout\";\r\n})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));\r\n/**\r\n * the spec has a problem of having the error\r\n * object somewhat underspecified, there is no clear\r\n * description of the required contents.\r\n * I want to streamline it with mojarra here\r\n * hence we are going to move\r\n * everything into the same attributes,\r\n * I will add deprecated myfaces backwards compatibility attributes as well\r\n */\r\nvar ErrorData = /** @class */ (function (_super) {\r\n    __extends(ErrorData, _super);\r\n    function ErrorData(source, errorName, errorMessage, responseText, responseXML, responseCode, status, type) {\r\n        if (responseText === void 0) { responseText = null; }\r\n        if (responseXML === void 0) { responseXML = null; }\r\n        if (responseCode === void 0) { responseCode = \"200\"; }\r\n        if (status === void 0) { status = \"UNKNOWN\"; }\r\n        if (type === void 0) { type = ErrorType.CLIENT_ERROR; }\r\n        var _this = _super.call(this) || this;\r\n        _this.type = \"error\";\r\n        _this.source = source;\r\n        _this.type = \"error\";\r\n        _this.errorName = errorName;\r\n        _this.message = _this.errorMessage = errorMessage;\r\n        _this.responseCode = responseCode;\r\n        _this.responseText = responseText;\r\n        _this.status = status;\r\n        _this.typeDetails = type;\r\n        if (type == ErrorType.SERVER_ERROR) {\r\n            _this.serverErrorName = _this.errorName;\r\n            _this.serverErrorMessage = _this.errorMessage;\r\n        }\r\n        return _this;\r\n    }\r\n    ErrorData.fromClient = function (e) {\r\n        return new ErrorData(\"client\", e.name, e.message, e.stack);\r\n    };\r\n    ErrorData.fromHttpConnection = function (source, name, message, responseText, responseCode) {\r\n        return new ErrorData(source, name, message, responseText, responseCode, null, \"UNKNOWN\", ErrorType.HTTP_ERROR);\r\n    };\r\n    ErrorData.fromGeneric = function (context, errorCode, errorType) {\r\n        var UNKNOWN = \"UNKNOWN\";\r\n        var getMsg = this.getMsg;\r\n        var source = getMsg(context, Const_1.Const.SOURCE);\r\n        var errorName = getMsg(context, Const_1.Const.ERROR_NAME);\r\n        var errorMessage = getMsg(context, Const_1.Const.ERROR_MESSAGE);\r\n        var status = getMsg(context, Const_1.Const.STATUS);\r\n        var responseText = getMsg(context, Const_1.Const.RESPONSE_TEXT);\r\n        var responseXML = getMsg(context, Const_1.Const.RESPONSE_XML);\r\n        return new ErrorData(source, name, errorMessage, responseText, responseXML, errorCode + \"\", status, ErrorType.SERVER_ERROR);\r\n    };\r\n    ErrorData.getMsg = function (context, param) {\r\n        var UNKNOWN = \"UNKNOWN\";\r\n        return getMessage(context.getIf(param).orElse(UNKNOWN).value);\r\n    };\r\n    ErrorData.fromServerError = function (context) {\r\n        return this.fromGeneric(context, -1, ErrorType.SERVER_ERROR);\r\n    };\r\n    return ErrorData;\r\n}(EventData_1.EventData));\r\nexports.ErrorData = ErrorData;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar Lang_1 = require(\"../util/Lang\");\r\nvar getMessage = Lang_1.ExtLang.getMessage;\r\nvar EventData = /** @class */ (function () {\r\n    function EventData() {\r\n    }\r\n    EventData.createFromRequest = function (request, context, /*event name*/ name) {\r\n        var _a, _b, _c, _d;\r\n        var eventData = new EventData();\r\n        var UNKNOWN = getMessage(\"UNKNOWN\");\r\n        eventData.type = Const_1.Const.EVENT;\r\n        eventData.status = name;\r\n        var sourceId = context.getIf(Const_1.Const.SOURCE)\r\n            .orElse(context.getIf(Const_1.Const.P_PARTIAL_SOURCE).value)\r\n            .orElse(context.getIf(Const_1.Const.CTX_PARAM_PASS_THR, Const_1.Const.P_PARTIAL_SOURCE).value).value;\r\n        if (sourceId) {\r\n            eventData.source = monadish_1.DQ.byId(sourceId).first().value.value;\r\n        }\r\n        if (name !== Const_1.Const.BEGIN) {\r\n            eventData.responseCode = (_b = (_a = request) === null || _a === void 0 ? void 0 : _a.status) === null || _b === void 0 ? void 0 : _b.toString();\r\n            eventData.responseText = (_c = request) === null || _c === void 0 ? void 0 : _c.responseText;\r\n            eventData.responseXML = (_d = request) === null || _d === void 0 ? void 0 : _d.responseXML;\r\n        }\r\n        return eventData;\r\n    };\r\n    return EventData;\r\n}());\r\nexports.EventData = EventData;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Const_1 = require(\"./Const\");\r\n/**\r\n * a helper class to isolate the\r\n * view state data processing\r\n */\r\nvar ViewState = /** @class */ (function () {\r\n    function ViewState(id, value) {\r\n        this.id = id;\r\n        this.value = value;\r\n        var viewStatePos = id.indexOf(Const_1.Const.P_VIEWSTATE);\r\n        this.nameSpace = viewStatePos > 0 ? id.substr(0, viewStatePos - 1) : \"\";\r\n    }\r\n    Object.defineProperty(ViewState.prototype, \"hasNameSpace\", {\r\n        get: function () {\r\n            var _a, _b;\r\n            return !!(_b = (_a = this) === null || _a === void 0 ? void 0 : _a.nameSpace, (_b !== null && _b !== void 0 ? _b : \"\")).length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ViewState;\r\n}());\r\nexports.ViewState = ViewState;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar Assertions_1 = require(\"../util/Assertions\");\r\nvar DomQuery_1 = require(\"../../ext/monadish/DomQuery\");\r\n/**\r\n * Resolver for various aspects of the response data\r\n *\r\n * stateless because it might be called from various\r\n * parts of the response classes\r\n */\r\nvar ResonseDataResolver;\r\n(function (ResonseDataResolver) {\r\n    /**\r\n     * fetches the response XML\r\n     * as XML Query object\r\n     *\r\n     * @param request the request hosting the responseXML\r\n     *\r\n     * Throws an error in case of non existent or wrong xml data\r\n     *\r\n     */\r\n    function resolveResponseXML(request) {\r\n        var ret = new monadish_1.XMLQuery(request.getIf(Const_1.Const.SEL_RESPONSE_XML).value);\r\n        Assertions_1.Assertions.assertValidXMLResponse(ret);\r\n        return ret;\r\n    }\r\n    ResonseDataResolver.resolveResponseXML = resolveResponseXML;\r\n    /**\r\n     * Splits the incoming passthrough context apart\r\n     * in an internal and an external nomalized context\r\n     * the internal one is just for our internal processing\r\n     *\r\n     * @param context the root context as associative array\r\n     */\r\n    function resolveContexts(context) {\r\n        /**\r\n         * we split the context apart into the external one and\r\n         * some internal values\r\n         */\r\n        var externalContext = monadish_1.Config.fromNullable(context);\r\n        var internalContext = externalContext.getIf(Const_1.Const.CTX_PARAM_MF_INTERNAL);\r\n        if (!internalContext.isPresent()) {\r\n            internalContext = monadish_1.Config.fromNullable({});\r\n        }\r\n        /**\r\n         * prepare storage for some deferred operations\r\n         */\r\n        internalContext.assign(Const_1.Const.UPDATE_FORMS).value = [];\r\n        internalContext.assign(Const_1.Const.UPDATE_ELEMS).value = [];\r\n        return { externalContext: externalContext, internalContext: internalContext };\r\n    }\r\n    ResonseDataResolver.resolveContexts = resolveContexts;\r\n    /**\r\n     * fetches the source element out of our conexts\r\n     *\r\n     * @param context the external context which shpuld host the source id\r\n     * @param internalContext internal passthrough fall back\r\n     *\r\n     */\r\n    function resolveSourceElement(context, internalContext) {\r\n        var elemId = resolveSourceElementId(context, internalContext);\r\n        var elem = DomQuery_1.DQ.byId(elemId.value);\r\n        return elem;\r\n    }\r\n    ResonseDataResolver.resolveSourceElement = resolveSourceElement;\r\n    /**\r\n     * fetches the source form if it still exists\r\n     * also embedded forms and parent forms are taken into consideration\r\n     * as fallbacks\r\n     *\r\n     * @param internalContext\r\n     * @param elem\r\n     */\r\n    function resolveSourceForm(internalContext, elem) {\r\n        var sourceFormId = internalContext.getIf(Const_1.Const.CTX_PARAM_SRC_FRM_ID);\r\n        var sourceForm = new DomQuery_1.DQ(sourceFormId.isPresent() ? document.forms[sourceFormId.value] : null);\r\n        sourceForm = sourceForm.orElse(elem.parents(Const_1.Const.TAG_FORM))\r\n            .orElse(elem.querySelectorAll(Const_1.Const.TAG_FORM))\r\n            .orElse(DomQuery_1.DQ.querySelectorAll(Const_1.Const.TAG_FORM));\r\n        return sourceForm;\r\n    }\r\n    ResonseDataResolver.resolveSourceForm = resolveSourceForm;\r\n    function resolveSourceElementId(context, internalContext) {\r\n        //?internal context?? used to be external one\r\n        return internalContext.getIf(Const_1.Const.CTX_PARAM_SRC_CTL_ID)\r\n            .orElseLazy(function () { return context.getIf(Const_1.Const.SOURCE, \"id\").value; });\r\n    }\r\n})(ResonseDataResolver = exports.ResonseDataResolver || (exports.ResonseDataResolver = {}));\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AjaxImpl_1 = require(\"../AjaxImpl\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar XhrFormData_1 = require(\"./XhrFormData\");\r\nvar ErrorData_1 = require(\"./ErrorData\");\r\nvar EventData_1 = require(\"./EventData\");\r\nvar Lang_1 = require(\"../util/Lang\");\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar failSaveExecute = Lang_1.ExtLang.failSaveExecute;\r\nvar XhrRequest = /** @class */ (function () {\r\n    /**\r\n     * Reqired Parameters\r\n     *\r\n     * @param source the issuing element\r\n     * @param sourceForm the form which is related to the issuing element\r\n     * @param requestContext the request context with allö pass through values\r\n     *\r\n     * Optional Parameters\r\n     *\r\n     * @param partialIdsArray an optional restricting partial ids array for encoding\r\n     * @param timeout optional xhr timeout\r\n     * @param ajaxType optional request type, default \"POST\"\r\n     * @param contentType optional content type, default \"application/x-www-form-urlencoded\"\r\n     * @param xhrObject optional xhr object which must fullfill the XMLHTTPRequest api, default XMLHttpRequest\r\n     */\r\n    function XhrRequest(source, sourceForm, requestContext, internalContext, partialIdsArray, timeout, ajaxType, contentType, xhrObject) {\r\n        var _this = this;\r\n        if (partialIdsArray === void 0) { partialIdsArray = []; }\r\n        if (timeout === void 0) { timeout = Const_1.Const.NO_TIMEOUT; }\r\n        if (ajaxType === void 0) { ajaxType = Const_1.Const.REQ_TYPE_POST; }\r\n        if (contentType === void 0) { contentType = Const_1.Const.URL_ENCODED; }\r\n        if (xhrObject === void 0) { xhrObject = new XMLHttpRequest(); }\r\n        this.source = source;\r\n        this.sourceForm = sourceForm;\r\n        this.requestContext = requestContext;\r\n        this.internalContext = internalContext;\r\n        this.partialIdsArray = partialIdsArray;\r\n        this.timeout = timeout;\r\n        this.ajaxType = ajaxType;\r\n        this.contentType = contentType;\r\n        this.xhrObject = xhrObject;\r\n        this.stopProgress = false;\r\n        /**\r\n         * helper support so that we do not have to drag in Promise shims\r\n         */\r\n        this.catchFuncs = [];\r\n        this.thenFunc = [];\r\n        /*\r\n        * we omit promises here\r\n        * some browsers do not support it and we do not need shim code\r\n        */\r\n        this.registerXhrCallbacks(function (data) { _this.resolve(data); }, function (data) { _this.reject(data); });\r\n    }\r\n    XhrRequest.prototype.start = function () {\r\n        var _this = this;\r\n        var fsExec = failSaveExecute;\r\n        var xhrObject = this.xhrObject;\r\n        try {\r\n            var viewState = jsf.getViewState(this.sourceForm.getAsElem(0).value);\r\n            var formData = new XhrFormData_1.XhrFormData(viewState);\r\n            this.contentType = formData.isMultipartRequest ? Const_1.Const.MULTIPART : this.contentType;\r\n            //next step the pass through parameters are merged in for post params\r\n            var requestContext = this.requestContext;\r\n            var passThroughParams = requestContext.getIf(Const_1.Const.CTX_PARAM_PASS_THR);\r\n            formData.shallowMerge(passThroughParams);\r\n            this.responseContext = passThroughParams.deepCopy;\r\n            //we have to shift the internal passthroughs around to build up our response context\r\n            var responseContext = this.responseContext;\r\n            responseContext.assign(Const_1.Const.CTX_PARAM_MF_INTERNAL).value = this.internalContext.value;\r\n            //per spec the onevent and onerrors must be passed through to the response\r\n            responseContext.assign(Const_1.Const.ON_EVENT).value = requestContext.getIf(Const_1.Const.ON_EVENT).value;\r\n            responseContext.assign(Const_1.Const.ON_ERROR).value = requestContext.getIf(Const_1.Const.ON_ERROR).value;\r\n            xhrObject.open(this.ajaxType, this.resolveFinalUrl(formData), true);\r\n            //adding timeout\r\n            this.timeout ? xhrObject.timeout = this.timeout : null;\r\n            //a bug in the xhr stub library prevents the setRequestHeader to be properly executed on fake xhr objects\r\n            //normal browsers should resolve this\r\n            //tests can quietly fail on this one\r\n            fsExec(function () { return xhrObject.setRequestHeader(Const_1.Const.CONTENT_TYPE, _this.contentType + \"; charset=utf-8\"); });\r\n            fsExec(function () { return xhrObject.setRequestHeader(Const_1.Const.HEAD_FACES_REQ, Const_1.Const.VAL_AJAX); });\r\n            //probably not needed anymore, will test this\r\n            //some webkit based mobile browsers do not follow the w3c spec of\r\n            // setting the accept headers automatically\r\n            fsExec(function () { return xhrObject.setRequestHeader(Const_1.Const.REQ_ACCEPT, Const_1.Const.STD_ACCEPT); });\r\n            this.sendEvent(Const_1.Const.BEGIN);\r\n            this.sendRequest(formData);\r\n        }\r\n        catch (e) {\r\n            //_onError//_onError\r\n            this.handleError(e);\r\n        }\r\n        return this;\r\n    };\r\n    XhrRequest.prototype.cancel = function () {\r\n        try {\r\n            this.xhrObject.abort();\r\n        }\r\n        catch (e) {\r\n            this.handleError(e);\r\n        }\r\n    };\r\n    XhrRequest.prototype.resolve = function (data) {\r\n        monadish_1.Stream.of.apply(monadish_1.Stream, this.thenFunc).reduce(function (inputVal, thenFunc) {\r\n            return thenFunc(inputVal);\r\n        }, data);\r\n    };\r\n    XhrRequest.prototype.reject = function (data) {\r\n        monadish_1.Stream.of.apply(monadish_1.Stream, this.catchFuncs).reduce(function (inputVal, catchFunc) {\r\n            return catchFunc(inputVal);\r\n        }, data);\r\n    };\r\n    XhrRequest.prototype.catch = function (func) {\r\n        //this.$promise.catch(func);\r\n        this.catchFuncs.push(func);\r\n        return this;\r\n    };\r\n    XhrRequest.prototype.finally = function (func) {\r\n        //no ie11 support we probably are going to revert to shims for that one\r\n        //(<any>this.$promise).then(func).catch(func);\r\n        this.catchFuncs.push(func);\r\n        this.thenFunc.push(func);\r\n        return this;\r\n    };\r\n    XhrRequest.prototype.then = function (func) {\r\n        //this.$promise.then(func);\r\n        this.thenFunc.push(func);\r\n        return this;\r\n    };\r\n    /**\r\n     * attaches the internal event and processing\r\n     * callback within the promise to our xhr object\r\n     *\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    XhrRequest.prototype.registerXhrCallbacks = function (resolve, reject) {\r\n        var _this = this;\r\n        var xhrObject = this.xhrObject;\r\n        xhrObject.onabort = function () {\r\n            _this.onAbort(resolve, reject);\r\n        };\r\n        xhrObject.ontimeout = function () {\r\n            _this.onTimeout(resolve, reject);\r\n        };\r\n        xhrObject.onload = function () {\r\n            _this.onSuccess(_this.xhrObject, resolve, reject);\r\n        };\r\n        xhrObject.onloadend = function () {\r\n            _this.onDone(_this.xhrObject, resolve, reject);\r\n        };\r\n        xhrObject.onerror = function (errorData) {\r\n            _this.onError(errorData, resolve, reject);\r\n        };\r\n    };\r\n    /*\r\n     * xhr processing callbacks\r\n     *\r\n     * Those methods are the callbacks called by\r\n     * the xhr object depending on its own state\r\n     */\r\n    XhrRequest.prototype.onAbort = function (resolve, reject) {\r\n        reject();\r\n    };\r\n    XhrRequest.prototype.onTimeout = function (resolve, reject) {\r\n        this.sendEvent(Const_1.Const.STATE_EVT_TIMEOUT);\r\n        reject();\r\n    };\r\n    XhrRequest.prototype.onSuccess = function (data, resolve, reject) {\r\n        var _a, _b, _c;\r\n        this.sendEvent(Const_1.Const.COMPLETE);\r\n        //malforms always result in empty response xml\r\n        if (!((_b = (_a = this) === null || _a === void 0 ? void 0 : _a.xhrObject) === null || _b === void 0 ? void 0 : _b.responseXML)) {\r\n            this.handleMalFormedXML(resolve);\r\n            return;\r\n        }\r\n        jsf.ajax.response(this.xhrObject, (_c = this.responseContext.value, (_c !== null && _c !== void 0 ? _c : {})));\r\n    };\r\n    XhrRequest.prototype.handleMalFormedXML = function (resolve) {\r\n        var _a;\r\n        this.stopProgress = true;\r\n        var errorData = {\r\n            type: Const_1.Const.ERROR,\r\n            status: Const_1.Const.MALFORMEDXML,\r\n            responseCode: 200,\r\n            responseText: (_a = this.xhrObject) === null || _a === void 0 ? void 0 : _a.responseText,\r\n            source: {\r\n                id: this.source.id.value\r\n            }\r\n        };\r\n        try {\r\n            AjaxImpl_1.Implementation.sendError(errorData);\r\n        }\r\n        finally {\r\n            resolve(errorData);\r\n        }\r\n        //non blocking non clearing\r\n    };\r\n    XhrRequest.prototype.onDone = function (data, resolve, reject) {\r\n        if (this.stopProgress) {\r\n            return;\r\n        }\r\n        resolve(data);\r\n    };\r\n    XhrRequest.prototype.onError = function (errorData, resolve, reject) {\r\n        this.handleError(errorData);\r\n        reject();\r\n    };\r\n    /*\r\n     * other helpers\r\n     */\r\n    XhrRequest.prototype.sendEvent = function (evtType) {\r\n        var eventData = EventData_1.EventData.createFromRequest(this.xhrObject, this.requestContext, evtType);\r\n        try {\r\n            //user code error, we might cover\r\n            //this in onError but also we cannot swallow it\r\n            //we need to resolve the local handlers lazyly,\r\n            //because some frameworks might decorate them over the context in the response\r\n            var eventHandler = this.resolveHandlerFunc(Const_1.Const.ON_EVENT);\r\n            ;\r\n            AjaxImpl_1.Implementation.sendEvent(eventData, eventHandler);\r\n        }\r\n        catch (e) {\r\n            this.handleError(e);\r\n            throw e;\r\n        }\r\n    };\r\n    XhrRequest.prototype.handleError = function (exception) {\r\n        var errorData = ErrorData_1.ErrorData.fromClient(exception);\r\n        var eventHandler = this.resolveHandlerFunc(Const_1.Const.ON_ERROR);\r\n        AjaxImpl_1.Implementation.sendError(errorData, eventHandler);\r\n    };\r\n    /**\r\n     * resolves the event handlers lazly\r\n     * so that if some decoration happens in between we can deal with it\r\n     *\r\n     * @param funcName\r\n     */\r\n    XhrRequest.prototype.resolveHandlerFunc = function (funcName) {\r\n        return this.responseContext.getIf(funcName)\r\n            .orElse(this.requestContext.getIf(funcName).value)\r\n            .orElse(Const_1.Const.EMPTY_FUNC).value;\r\n    };\r\n    XhrRequest.prototype.resolveTargetUrl = function (srcFormElement) {\r\n        return (typeof srcFormElement.elements[Const_1.Const.ENCODED_URL] == 'undefined') ?\r\n            srcFormElement.action :\r\n            srcFormElement.elements[Const_1.Const.ENCODED_URL].value;\r\n    };\r\n    XhrRequest.prototype.sendRequest = function (formData) {\r\n        var isPost = this.ajaxType != Const_1.Const.REQ_TYPE_GET;\r\n        if (formData.isMultipartRequest) {\r\n            this.xhrObject.send((isPost) ? formData.toFormData() : null);\r\n        }\r\n        else {\r\n            this.xhrObject.send((isPost) ? formData.toString() : null);\r\n        }\r\n    };\r\n    XhrRequest.prototype.resolveFinalUrl = function (formData) {\r\n        var targetUrl = this.resolveTargetUrl(this.sourceForm.getAsElem(0).value);\r\n        return targetUrl + (this.ajaxType == Const_1.Const.REQ_TYPE_GET ? \"?\" + formData.toString() : \"\");\r\n    };\r\n    return XhrRequest;\r\n}());\r\nexports.XhrRequest = XhrRequest;\r\n","\"use strict\";\r\n/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar monadish_1 = require(\"../../ext/monadish\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar Stream_1 = require(\"../../ext/monadish/Stream\");\r\nvar DomQuery_1 = require(\"../../ext/monadish/DomQuery\");\r\nvar isString = monadish_1.Lang.isString;\r\n/**\r\n * we simplify now compared to the old form handling\r\n * given that we have a configuration in place we can recycle that\r\n * for the entire parameter generation\r\n * then we have two fallbacks one for the non multipart case\r\n * the other one for the multipart case\r\n *\r\n * From outside we work on a single form configuration\r\n * which we can use like any other config\r\n *\r\n * TODO make this code smaller we might have\r\n * enough leverage in the streams collectors\r\n * api just to do that.\r\n */\r\nvar XhrFormData = /** @class */ (function (_super) {\r\n    __extends(XhrFormData, _super);\r\n    /**\r\n     * by the time we hit this code, datasource alöready must be of type form\r\n     *\r\n     * @param dataSource either a form as domquery object or an encoded url string\r\n     * @param partialIdsArray partial ids to collect\r\n     */\r\n    function XhrFormData(dataSource, partialIdsArray) {\r\n        var _this = _super.call(this, {}) || this;\r\n        _this.dataSource = dataSource;\r\n        _this.partialIdsArray = partialIdsArray;\r\n        //a call to getViewState before must pass the encoded line\r\n        //a call from getViewState passes the form element as datasource\r\n        //so we have two call points\r\n        if (isString(dataSource)) {\r\n            _this.handleStringSource();\r\n        }\r\n        else {\r\n            _this.handleFormSource();\r\n        }\r\n        return _this;\r\n    }\r\n    XhrFormData.prototype.handleFormSource = function () {\r\n        //encode and append the issuing item if not a partial ids array of ids is passed\r\n        /*\r\n         * Spec. 13.3.1\r\n         * Collect and encode input elements.\r\n         * Additionally the hidden element javax.faces.ViewState\r\n         * Enhancement partial page submit\r\n         *\r\n         */\r\n        this.encodeSubmittableFields(this, this.dataSource, this.partialIdsArray);\r\n        if (this.getIf(Const_1.Const.P_VIEWSTATE).isPresent()) {\r\n            return;\r\n        }\r\n        this.applyViewState(this.dataSource);\r\n    };\r\n    XhrFormData.prototype.handleStringSource = function () {\r\n        this.mergeEncodedString(this.dataSource);\r\n        return;\r\n    };\r\n    XhrFormData.prototype.applyViewState = function (form) {\r\n        var _this = this;\r\n        form.byId(Const_1.Const.P_VIEWSTATE)\r\n            .ifPresentLazy(function (elem) {\r\n            var value = elem.inputValue.value;\r\n            _this.assignIf(!!value, Const_1.Const.P_VIEWSTATE).value = value;\r\n        });\r\n    };\r\n    XhrFormData.prototype.mergeEncodedString = function (encoded) {\r\n        var _this = this;\r\n        var splittedEntries = encoded.split(/\\&/gi);\r\n        Stream_1.Stream.of.apply(Stream_1.Stream, splittedEntries).map(function (line) { return line.split(/\\=/gi); })\r\n            .each(function (keyVal) {\r\n            _this.assign(keyVal[0]).value = keyVal[1] || null;\r\n        });\r\n    };\r\n    // noinspection JSUnusedGlobalSymbols\r\n    /**\r\n     * @returns a Form data representation\r\n     */\r\n    XhrFormData.prototype.toFormData = function () {\r\n        var ret = new FormData();\r\n        for (var key in this.value) {\r\n            if (this.value.hasOwnProperty(key)) {\r\n                ret.append(key, this.value[key]);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * returns an encoded string representation of our xhr form data\r\n     *\r\n     * @param defaultStr optional default value if nothing is there to encode\r\n     */\r\n    XhrFormData.prototype.toString = function (defaultStr) {\r\n        if (defaultStr === void 0) { defaultStr = \"\"; }\r\n        if (this.isAbsent()) {\r\n            return defaultStr;\r\n        }\r\n        var entries = [];\r\n        for (var key in this.value) {\r\n            if (this.value.hasOwnProperty(key)) {\r\n                //key value already encoded so no need to reencode them again\r\n                entries.push(key + \"=\" + this.value[key]);\r\n            }\r\n        }\r\n        return entries.join(\"&\");\r\n    };\r\n    /**\r\n     * determines fields to submit\r\n     * @param {Object} targetBuf - the target form buffer receiving the data\r\n     * @param {Node} parentItem - form element item is nested in\r\n     * @param {Array} partialIds - ids fo PPS\r\n     */\r\n    XhrFormData.prototype.encodeSubmittableFields = function (targetBuf, parentItem, partialIds) {\r\n        var toEncode = null;\r\n        if (this.partialIdsArray && this.partialIdsArray.length) {\r\n            //in case of our myfaces reduced ppr we only\r\n            //only submit the partials\r\n            //TODO maybe also the window id and other defaults lets see\r\n            //this is not a spec case anyway\r\n            this._value = {};\r\n            toEncode = new (DomQuery_1.DQ.bind.apply(DomQuery_1.DQ, __spreadArrays([void 0], this.partialIdsArray)))();\r\n        }\r\n        else {\r\n            if (parentItem.isAbsent())\r\n                throw \"NO_PARITEM\";\r\n            toEncode = parentItem;\r\n        }\r\n        //lets encode the form elements\r\n        this.shallowMerge(toEncode.querySelectorAll(\"input, checkbox, select, textarea\").encodeFormElement());\r\n    };\r\n    Object.defineProperty(XhrFormData.prototype, \"isMultipartRequest\", {\r\n        get: function () {\r\n            return this.dataSource instanceof DomQuery_1.DQ && this.dataSource.querySelectorAll(\"input[type='file']\").isPresent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return XhrFormData;\r\n}(monadish_1.Config));\r\nexports.XhrFormData = XhrFormData;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Asynchronous queue which starts to work\r\n * through the callbacks until the queue is empty\r\n *\r\n * Every callback must be of async runnable\r\n * which is sort of an extended promise which has\r\n * added a decicated cancel and start point\r\n *\r\n * This interface can be used as wrapper contract\r\n * for normal promises if needed.\r\n */\r\nvar AsynchronouseQueue = /** @class */ (function () {\r\n    function AsynchronouseQueue() {\r\n        this.runnableQueue = [];\r\n    }\r\n    Object.defineProperty(AsynchronouseQueue.prototype, \"isEmpty\", {\r\n        get: function () {\r\n            return !this.runnableQueue.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * enequeues an element and starts the\r\n     * asynchronous work loop if not already running\r\n     *\r\n     * @param element the element to be queued and processed\r\n     * @param delay possible delay after our usual process or drop if something newer is incoming algorithm\r\n     */\r\n    AsynchronouseQueue.prototype.enqueue = function (element, delay) {\r\n        var _this = this;\r\n        if (delay === void 0) { delay = 0; }\r\n        if (this.delayTimeout) {\r\n            clearTimeout(this.delayTimeout);\r\n            this.delayTimeout = null;\r\n        }\r\n        if (delay) {\r\n            this.delayTimeout = setTimeout(function () {\r\n                _this.appendElement(element);\r\n            });\r\n        }\r\n        else {\r\n            this.appendElement(element);\r\n        }\r\n    };\r\n    AsynchronouseQueue.prototype.dequeue = function () {\r\n        return this.runnableQueue.shift();\r\n    };\r\n    AsynchronouseQueue.prototype.cleanup = function () {\r\n        this.currentlyRunning = null;\r\n        this.runnableQueue.length = 0;\r\n    };\r\n    AsynchronouseQueue.prototype.appendElement = function (element) {\r\n        //only if the first element is added we start with a trigger\r\n        //otherwise a process already is running and not finished yet at that\r\n        //time\r\n        this.runnableQueue.push(element);\r\n        if (!this.currentlyRunning) {\r\n            this.runEntry();\r\n        }\r\n    };\r\n    AsynchronouseQueue.prototype.runEntry = function () {\r\n        var _this = this;\r\n        if (this.isEmpty) {\r\n            this.currentlyRunning = null;\r\n            return;\r\n        }\r\n        this.currentlyRunning = this.dequeue();\r\n        this.currentlyRunning\r\n            .catch(function (e) {\r\n            //in case of an error we always clean up the remaining calls\r\n            //to allow a clean recovery of the application\r\n            _this.cleanup();\r\n            throw e;\r\n        })\r\n            .then(\r\n        //the idea is to trigger the next over an event to reduce\r\n        //the number of recursive calls (stacks might be limited\r\n        //compared to ram)\r\n        //naturally give we have a DOM, the DOM is the natural event dispatch system\r\n        //which we can use, to decouple the calls from a recursive stack call\r\n        //(the browser engine will take care of that)\r\n        function () { return _this.callForNextElementToProcess(); }).start();\r\n    };\r\n    AsynchronouseQueue.prototype.cancel = function () {\r\n        try {\r\n            if (this.currentlyRunning) {\r\n                this.currentlyRunning.cancel();\r\n            }\r\n        }\r\n        finally {\r\n            this.cleanup();\r\n        }\r\n    };\r\n    AsynchronouseQueue.prototype.callForNextElementToProcess = function () {\r\n        this.runEntry();\r\n    };\r\n    AsynchronouseQueue.prototype.processNextElement = function () {\r\n        this.currentlyRunning = null;\r\n        if (!this.isEmpty) {\r\n            this.runEntry();\r\n        }\r\n    };\r\n    AsynchronouseQueue.EVT_NEXT = \"__mf_queue_next__\";\r\n    return AsynchronouseQueue;\r\n}());\r\nexports.AsynchronouseQueue = AsynchronouseQueue;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Monad_1 = require(\"../../ext/monadish/Monad\");\r\nvar Const_1 = require(\"../core/Const\");\r\nvar DomQuery_1 = require(\"../../ext/monadish/DomQuery\");\r\n/**\r\n * Extension which adds implementation specific\r\n * meta data to our dom qury\r\n *\r\n * Usage\r\n * el = new ExtDQ(oldReference)\r\n * nonce = el.nonce\r\n * windowId = el.getWindowId\r\n */\r\nvar ExtDomquery = /** @class */ (function (_super) {\r\n    __extends(ExtDomquery, _super);\r\n    function ExtDomquery() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(ExtDomquery, \"windowId\", {\r\n        get: function () {\r\n            return new ExtDomquery(document.body).windowId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExtDomquery, \"nonce\", {\r\n        get: function () {\r\n            return new ExtDomquery(document.body).nonce;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExtDomquery.prototype, \"windowId\", {\r\n        get: function () {\r\n            var fetchWindowIdFromURL = function () {\r\n                var href = window.location.href;\r\n                var windowId = \"windowId\";\r\n                var regex = new RegExp(\"[\\\\?&]\" + windowId + \"=([^&#\\\\;]*)\");\r\n                var results = regex.exec(href);\r\n                //initial trial over the url and a regexp\r\n                if (results != null)\r\n                    return results[1];\r\n                return null;\r\n            };\r\n            //byId ($)\r\n            if (this.value.isPresent()) {\r\n                var result = this.querySelectorAll(\"form input[name='\" + Const_1.Const.P_WIN_ID + \"']\");\r\n                if (result.length > 0) {\r\n                    throw Error(\"Multiple different windowIds found in document\");\r\n                }\r\n                return (result.isPresent()) ? result.getAsElem(0).value.value : fetchWindowIdFromURL();\r\n            }\r\n            else {\r\n                return fetchWindowIdFromURL();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExtDomquery.prototype, \"nonce\", {\r\n        /*\r\n        determines the jsfjs nonce and adds them to the namespace\r\n        * this is done once and only lazily\r\n        */\r\n        get: function () {\r\n            //already processed\r\n            var myfacesConfig = new Monad_1.Config(window.myfaces);\r\n            var nonce = myfacesConfig.assign(\"config\", \"cspMeta\", \"nonce\");\r\n            if (nonce.value) {\r\n                return nonce.value;\r\n            }\r\n            var curScript = new DomQuery_1.DQ(document.currentScript);\r\n            //since our baseline atm is ie11 we cannot use document.currentScript globally\r\n            if (curScript.attr(\"nonce\").value != null) {\r\n                //fastpath for modern browsers\r\n                return curScript.attr(\"nonce\").value;\r\n            }\r\n            var nonceScript = DomQuery_1.DQ.querySelectorAll(\"script[src], link[src]\").lazyStream\r\n                .filter(function (item) { return item.attr(\"nonce\").value != null && item.attr(\"src\") != null; })\r\n                .map((function (item) { return !item.attr(\"src\").value.match(/jsf\\.js\\?ln\\=javax\\.faces/gi); }))\r\n                .first();\r\n            if (nonceScript.isPresent()) {\r\n                nonce.value = DomQuery_1.DomQuery.byId(nonceScript.value).attr(\"nonce\").value;\r\n            }\r\n            return nonce.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ExtDomquery.searchJsfJsFor = function (item) {\r\n        return new ExtDomquery(document).searchJsfJsFor(item);\r\n    };\r\n    ExtDomquery.prototype.searchJsfJsFor = function (rexp) {\r\n        //perfect application for lazy stream\r\n        return DomQuery_1.DQ.querySelectorAll(\"script\").lazyStream\r\n            .filter(function (item) {\r\n            var _a;\r\n            return (_a = item.attr(\"src\").value, (_a !== null && _a !== void 0 ? _a : \"\")).search(/\\/javax\\.faces\\.resource.*\\/jsf\\.js.*separator/) != -1;\r\n        }).map(function (item) {\r\n            var result = item.attr(\"src\").value.match(rexp);\r\n            return decodeURIComponent(result[1]);\r\n        }).first();\r\n    };\r\n    ExtDomquery.prototype.globalEval = function (code, nonce) {\r\n        return _super.prototype.globalEval.call(this, code, (nonce !== null && nonce !== void 0 ? nonce : this.nonce));\r\n    };\r\n    return ExtDomquery;\r\n}(DomQuery_1.DQ));\r\nexports.ExtDomquery = ExtDomquery;\r\nexports.ExtDQ = DomQuery_1.DQ;\r\n","\"use strict\";\r\n/**\r\n * Typescript port of the jsf.push part in the myfaces implementation\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//TODO still work in progress\r\n//this is a 1:1 port for the time being\r\nvar Jsf_1 = require(\"../api/Jsf\");\r\nvar Const_1 = require(\"./core/Const\");\r\n/**\r\n * Implementation class for the push functionality\r\n */\r\nvar PushImpl;\r\n(function (PushImpl) {\r\n    var URL_PROTOCOL = window.location.protocol.replace(\"http\", \"ws\") + \"//\";\r\n    //we expose the member variables for testing purposes\r\n    //they are not directly touched outside of tests\r\n    /* socket map by token */\r\n    PushImpl.sockets = {};\r\n    /* component attributes by clientId */\r\n    PushImpl.components = {};\r\n    /* client ids by token (share websocket connection) */\r\n    PushImpl.clientIdsByTokens = {};\r\n    //needed for testing\r\n    function reset() {\r\n        PushImpl.sockets = {};\r\n        PushImpl.components = {};\r\n        PushImpl.clientIdsByTokens = {};\r\n    }\r\n    PushImpl.reset = reset;\r\n    /*\r\n     * Api implementations, exposed functions\r\n     */\r\n    /**\r\n     *\r\n     * @param {function} onopen The function to be invoked when the web socket is opened.\r\n     * @param {function} onmessage The function to be invoked when a message is received.\r\n     * @param {function} onclose The function to be invoked when the web socket is closed.\r\n     * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\r\n     */\r\n    function init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect) {\r\n        onclose = resolveFunction(onclose);\r\n        if (!window.WebSocket) { // IE6-9.\r\n            onclose(-1, channel);\r\n            return;\r\n        }\r\n        var channelToken = uri.substr(uri.indexOf('?') + 1);\r\n        if (!PushImpl.components[socketClientId]) {\r\n            PushImpl.components[socketClientId] = {\r\n                'channelToken': channelToken,\r\n                'onopen': resolveFunction(onopen),\r\n                'onmessage': resolveFunction(onmessage),\r\n                'onclose': onclose,\r\n                'behaviors': behaviorScripts,\r\n                'autoconnect': autoconnect\r\n            };\r\n            if (!PushImpl.clientIdsByTokens[channelToken]) {\r\n                PushImpl.clientIdsByTokens[channelToken] = [];\r\n            }\r\n            PushImpl.clientIdsByTokens[channelToken].push(socketClientId);\r\n            if (!PushImpl.sockets[channelToken]) {\r\n                PushImpl.sockets[channelToken] = new Socket(channelToken, getBaseURL(uri), channel);\r\n            }\r\n        }\r\n        if (autoconnect) {\r\n            Jsf_1.jsf.push.open(socketClientId);\r\n        }\r\n    }\r\n    PushImpl.init = init;\r\n    function open(socketClientId) {\r\n        var _a, _b;\r\n        getSocket((_b = (_a = PushImpl.components) === null || _a === void 0 ? void 0 : _a[socketClientId]) === null || _b === void 0 ? void 0 : _b.channelToken).open();\r\n    }\r\n    PushImpl.open = open;\r\n    function close(socketClientId) {\r\n        var _a;\r\n        getSocket((_a = PushImpl.components) === null || _a === void 0 ? void 0 : _a[socketClientId].channelToken).close();\r\n    }\r\n    PushImpl.close = close;\r\n    // Private helper classes\r\n    // Private classes functions ----------------------------------------------------------------------------------\r\n    /**\r\n     * Creates a reconnecting web socket. When the web socket successfully connects on first attempt, then it will\r\n     * automatically reconnect on timeout with cumulative intervals of 500ms with a maximum of 25 attempts (~3 minutes).\r\n     * The <code>onclose</code> function will be called with the error code of the last attempt.\r\n     * @constructor\r\n     * @param {string} channelToken the channel token associated with this websocket connection\r\n     * @param {string} url The URL of the web socket\r\n     * @param {string} channel The name of the web socket channel.\r\n     */\r\n    var Socket = /** @class */ (function () {\r\n        function Socket(channelToken, url, channel) {\r\n            this.channelToken = channelToken;\r\n            this.url = url;\r\n            this.channel = channel;\r\n            this.reconnectAttempts = 0;\r\n        }\r\n        Socket.prototype.open = function () {\r\n            if (this.socket && this.socket.readyState == 1) {\r\n                return;\r\n            }\r\n            this.socket = new WebSocket(this.url);\r\n            this.bindCallbacks();\r\n        };\r\n        Socket.prototype.onopen = function (event) {\r\n            if (!this.reconnectAttempts) {\r\n                var clientIds = PushImpl.clientIdsByTokens[this.channelToken];\r\n                for (var i = clientIds.length - 1; i >= 0; i--) {\r\n                    var socketClientId = clientIds[i];\r\n                    PushImpl.components[socketClientId]['onopen'](this.channel);\r\n                }\r\n            }\r\n            this.reconnectAttempts = 0;\r\n        };\r\n        Socket.prototype.onmmessage = function (event) {\r\n            var message = JSON.parse(event.data);\r\n            for (var i = PushImpl.clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\r\n                var socketClientId = PushImpl.clientIdsByTokens[this.channelToken][i];\r\n                if (document.getElementById(socketClientId)) {\r\n                    try {\r\n                        PushImpl.components[socketClientId]['onmessage'](message, this.channel, event);\r\n                    }\r\n                    catch (e) {\r\n                        //Ignore\r\n                    }\r\n                    var behaviors = PushImpl.components[socketClientId]['behaviors'];\r\n                    var functions = behaviors[message];\r\n                    if (functions && functions.length) {\r\n                        for (var j = 0; j < functions.length; j++) {\r\n                            try {\r\n                                functions[j](null);\r\n                            }\r\n                            catch (e) {\r\n                                //Ignore\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    PushImpl.clientIdsByTokens[this.channelToken].splice(i, 1);\r\n                }\r\n            }\r\n            if (PushImpl.clientIdsByTokens[this.channelToken].length == 0) {\r\n                //tag dissapeared\r\n                this.close();\r\n            }\r\n        };\r\n        Socket.prototype.onclose = function (event) {\r\n            var _a, _b;\r\n            if (!this.socket\r\n                || (event.code == 1000 && event.reason == Const_1.Const.REASON_EXPIRED)\r\n                || (event.code == 1008)\r\n                || (!this.reconnectAttempts)\r\n                || (this.reconnectAttempts >= Const_1.Const.MAX_RECONNECT_ATTEMPTS)) {\r\n                var clientIds = PushImpl.clientIdsByTokens[this.channelToken];\r\n                for (var i = clientIds.length - 1; i >= 0; i--) {\r\n                    var socketClientId = clientIds[i];\r\n                    PushImpl.components[socketClientId]['onclose']((_a = event) === null || _a === void 0 ? void 0 : _a.code, (_b = this) === null || _b === void 0 ? void 0 : _b.channel, event);\r\n                }\r\n            }\r\n            else {\r\n                setTimeout(this.open, Const_1.Const.RECONNECT_INTERVAL * this.reconnectAttempts++);\r\n            }\r\n        };\r\n        ;\r\n        Socket.prototype.close = function () {\r\n            if (this.socket) {\r\n                var s = this.socket;\r\n                this.socket = null;\r\n                s.close();\r\n            }\r\n        };\r\n        /**\r\n         * bind the callbacks to the socket callbacks\r\n         */\r\n        Socket.prototype.bindCallbacks = function () {\r\n            var _this = this;\r\n            this.socket.onopen = function (event) { return _this.onopen(event); };\r\n            this.socket.onmessage = function (event) { return _this.onmmessage(event); };\r\n            this.socket.onclose = function (event) { return _this.onclose(event); };\r\n        };\r\n        return Socket;\r\n    }());\r\n    // Private static functions ---------------------------------------------------------------------------------------\r\n    function getBaseURL(url) {\r\n        if (url.indexOf(\"://\") < 0) {\r\n            var base = window.location.hostname + \":\" + window.location.port;\r\n            return URL_PROTOCOL + base + url;\r\n        }\r\n        else {\r\n            return url;\r\n        }\r\n    }\r\n    /**\r\n     * Get socket associated with given channelToken.\r\n     * @param {string} channelToken The name of the web socket channelToken.\r\n     * @return {Socket} Socket associated with given channelToken.\r\n     * @throws {Error} When channelToken is unknown, you may need to initialize\r\n     *                 it first via <code>init()</code> function.\r\n     */\r\n    function getSocket(channelToken) {\r\n        var socket = PushImpl.sockets[channelToken];\r\n        if (socket) {\r\n            return socket;\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown channelToken: \" + channelToken);\r\n        }\r\n    }\r\n    function resolveFunction(fn) {\r\n        if (fn === void 0) { fn = function () {\r\n        }; }\r\n        return ((typeof fn !== \"function\") && (fn = window[fn]), fn);\r\n    }\r\n})(PushImpl = exports.PushImpl || (exports.PushImpl = {}));\r\n"],"sourceRoot":""}
{"version":3,"file":"jsf.js","mappings":"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","sources":["webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/DomQuery.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Lang.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Monad.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/SourcesCollectors.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/Stream.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/XmlQuery.ts","webpack://jsf.js_next_gen/./node_modules/mona-dish/src/main/typescript/index_core.ts","webpack://jsf.js_next_gen/./src/main/typescript/api/Jsf.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/AjaxImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/PushImpl.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/Const.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/core/ImplTypes.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/i18n/Messages.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Assertions.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/AsyncQueue.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/ExtDomQuery.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/util/Lang.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ErrorData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/EventData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/RequestDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResonseDataResolver.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/Response.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/ResponseProcessor.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrFormData.ts","webpack://jsf.js_next_gen/./src/main/typescript/impl/xhrCore/XhrRequest.ts","webpack://jsf.js_next_gen/webpack/bootstrap","webpack://jsf.js_next_gen/webpack/startup"],"sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\nimport {glob} from \"typedoc/dist/lib/utils/fs\";\n\n//import {observable, Observable, Subscriber} from \"rxjs\";\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait until a certain condition is reached\n * depening on the browser this uses either the mutation observer or a semi compatible interval as fallback\n * @param condition\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    const ret = new Promise<DomQuery>((success, error) => {\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n        if('undefined' != typeof window.MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                return error(MUT_ERROR);\n            }, options.timeout);\n            const callback: MutationCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n                const found = new DomQuery(mutationList.map((mut: MutationRecord) => mut.target)).first(condition);\n                if(found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    success(found);\n                }\n            }\n\n            const observer = new window.MutationObserver(callback);\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {... options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n            //we do the same but for now ignore the options on the dom query\n            let interval = setInterval(() => {\n                let found = null;\n                if(options.childList) {\n                    found = (condition(root)) ? root:  root.childNodes.first(condition);\n                } else if(options.subtree) {\n                    found = (condition(root)) ? root: root.querySelectorAll(\" * \").first(condition);\n                } else {\n                    found = (condition(root)) ? root: DomQuery.absent;\n                }\n                if(found.isPresent()) {\n                    if(timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                        success(found);\n                    }\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if(interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n    return ret;\n}\n\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_WHITELIST = (src: string) => {\n    return true;\n\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length ) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if(!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                    continue;\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matches ||\n            prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * concats the elements of two Dom Queries into a single one\n     * @param toAttach\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        //we now filter the doubles out\n        if(!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; //ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * special status of the datasource location pointer\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T |ITERATION_STATUS {\n        if((this.dataPos+cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while(!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T |ITERATION_STATUS;\n\n        for(let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if(inCache || this.filterFunc(lookupVal)) {\n                cnt --;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n       return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt?: number): ITERATION_STATUS | S {\n        //easy access trial\n        if(this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n        //slower method we have to look ahead forward one by one until we hit the end or\n        //have to move on\n        for(let lookAheadPos = 1, topLevelLookAhead = 1; lookAheadPos <= cnt; topLevelLookAhead++) {\n            let foundItem = null;\n            let item = this.inputDataSource.lookAhead(topLevelLookAhead);\n            if(item === ITERATION_STATUS.EO_STRM) {\n                return item as ITERATION_STATUS;\n            }\n            let mapped = this.mapFunc(item as T);\n\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n\n            //this is the inner loop which looks ahead on our flatmapped datasource\n            //we need an inner counter, but every look ahead also increases our loop\n            return currentDataSource.lookAhead(cnt);\n           /* for(let flatmapLookAhead = 1; lookAheadPos <= cnt && foundItem != ITERATION_STATUS.EO_STRM; flatmapLookAhead++, lookAheadPos++) {\n                foundItem = currentDataSource.lookAhead(flatmapLookAhead);\n                if(lookAheadPos >= cnt) {\n                    return foundItem;\n                }\n            }*/\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS{\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n///<reference types='../../types/typedefs'/>\n\nimport {Implementation} from \"../impl/AjaxImpl\";\nimport {PushImpl} from \"../impl/PushImpl\";\n\n//declare const Implementation: any;\n\nexport module jsf {\n    \"use strict\";\n\n    /*\n     * Version of the implementation for the jsf.js.\n     * <p />\n     * as specified within the jsf specifications jsf.html:\n     * <ul>\n     * <li>left two digits major release number</li>\n     * <li>middle two digits minor spec release number</li>\n     * <li>right two digits bug release number</li>\n     * </ul>\n     * @constant\n     */\n    export var specversion = 220000;\n    /**\n     * Implementation version as specified within the jsf specification.\n     * <p />\n     * A number increased with every implementation version\n     * and reset by moving to a new spec release number\n     *\n     * @constant\n     */\n    export var implversion = 0;\n\n    /**\n     * SeparatorChar as defined by UINamingContainer.getNamingContainerSeparatorChar()\n     * @type {Char}\n     */\n    export var separatorchar = getSeparatorChar();\n\n    /**\n     * This method is responsible for the return of a given project stage as defined\n     * by the jsf specification.\n     * <p/>\n     * Valid return values are:\n     * <ul>\n     *     <li>&quot;Production&quot;</li>\n     *     <li>&quot;Development&quot;</li>\n     *     <li>&quot;SystemTest&quot;</li>\n     *     <li>&quot;UnitTest&quot;</li>\n     * </li>\n     *\n     * @return {String} the current project state emitted by the server side method:\n     * <i>javax.faces.application.Application.getProjectStage()</i>\n     */\n    export function getProjectStage(): string {\n        return Implementation.getProjectStage();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * return a concatenated string of the encoded values!\n     *\n     * @throws an exception in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(formElement: Element | string): string {\n        return Implementation.getViewState(formElement);\n    }\n\n    /**\n     * returns the window identifier for the given node / window\n     * @return the window identifier or null if none is found\n     * @param rootNode\n     */\n    export function getClientWindow(rootNode?: Element | string): string {\n        return Implementation.getClientWindow(rootNode);\n    }\n\n    //private helper functions\n    function getSeparatorChar() {\n        return Implementation.getSeparatorChar();\n    }\n\n\n    export module ajax {\n        \"use strict\";\n\n        /**\n         * this function has to send the ajax requests\n         *\n         * following requestInternal conditions must be met:\n         * <ul>\n         *  <li> the requestInternal must be sent asynchronously! </li>\n         *  <li> the requestInternal must be a POST!!! requestInternal </li>\n         *  <li> the requestInternal url must be the form action attribute </li>\n         *  <li> all requests must be queued with a client side requestInternal queue to ensure the requestInternal ordering!</li>\n         * </ul>\n         *\n         * @param {String|Node} element: any dom element no matter being it html or jsf, from which the event is emitted\n         * @param {EVENT} event: any javascript event supported by that object\n         * @param {Map} options : map of options being pushed into the ajax cycle\n         */\n        export function request(element: Element, event?: Event, options?: Context) {\n            Implementation.request(element, event, options)\n            //Implementation.getInstance().requestInternal(element, event, options);\n        }\n\n        /**\n         * response handler\n         * @param request the request object having triggered this response\n         * @param context the request context\n         *\n         * TODO add info on what can be in the context\n         */\n        export function response(request: XMLHttpRequest, context?: Context) {\n            Implementation.response(request, context);\n        }\n\n        /**\n         * Adds an error handler to our global error queue.\n         * the error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         * with errorData being of following format:\n         * <ul>\n         *     <li> errorData.type : &quot;error&quot;</li>\n         *     <li> errorData.status : the error status message</li>\n         *     <li> errorData.serverErrorName : the server error name in case of a server error</li>\n         *     <li> errorData.serverErrorMessage : the server error message in case of a server error</li>\n         *     <li> errorData.source  : the issuing source element which triggered the requestInternal </li>\n         *     <li> eventData.responseCode: the response code (aka http requestInternal response code, 401 etc...) </li>\n         *     <li> eventData.responseText: the requestInternal response text </li>\n         *     <li> eventData.responseXML: the requestInternal response xml </li>\n         * </ul>\n         *\n         * @param {function} errorListener error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         */\n        export function addOnError(errorFunc: (data: ErrorData) => void) {\n            Implementation.addOnError(<any>errorFunc);\n        }\n\n        /**\n         * Adds a global event listener to the ajax event queue. The event listener must be a function\n         * of following format: <i>function eventListener(&lt;eventData&gt;)</i>\n         *\n         * @param {function} eventListener event must be of the format <i>function eventListener(&lt;eventData&gt;)</i>\n         */\n        export function addOnEvent(eventFunc: (data: EventData) => void) {\n            Implementation.addOnEvent(<any>eventFunc);\n        }\n    }\n\n    export module util {\n\n        /**\n         * varargs function which executes a chain of code (functions or any other code)\n         *\n         * if any of the code returns false, the execution\n         * is terminated prematurely skipping the rest of the code!\n         *\n         * @param {DomNode} source, the callee object\n         * @param {Event} event, the event object of the callee event triggering this function\n         * @param funcs ... arbitrary array of functions or strings\n         * @returns true if the chain has succeeded false otherwise\n         */\n        export function chain(source, event, ...funcs: Array<Function | string>): boolean {\n            return Implementation.chain(source, event, ...(funcs as EvalFuncs));\n        }\n    }\n\n    export module push {\n        /**\n         * @param {function} onopen The function to be invoked when the web socket is opened.\n         * @param {function} onmessage The function to be invoked when a message is received.\n         * @param {function} onclose The function to be invoked when the web socket is closed.\n         * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n         */\n        export function init(socketClientId: string,\n                    uri: string,\n                    channel: string,\n                    onopen: Function,\n                    onmessage: Function,\n                    onclose: Function,\n                    behaviorScripts: any,\n                    autoconnect: boolean) {\n            PushImpl.init(socketClientId, uri, channel, onopen, onmessage, onclose, behaviorScripts, autoconnect);\n        }\n\n        /**\n         * Open the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function open(socketClientId: string) {\n            PushImpl.open(socketClientId);\n        }\n\n        /**\n         * Close the web socket on the given channel.\n         * @param {string} channel The name of the web socket channel.\n         * @throws {Error} When channel is unknown.\n         */\n        export function close(socketClientId: string) {\n            PushImpl.close(socketClientId);\n        }\n\n    }\n\n    //We hook the old namespace system into our npm system\n    //if (\"undefined\" == window.jsf) {\n    //    window.jsf = jsf;\n    //}\n\n\n}\n\n\n\n//fullfill the window contract\nexport module myfaces {\n\n    /**\n     * AB function similar to mojarra and Primefaces\n     * not part of the spec but a convenience accessor method\n     * Code provided by Thomas Andraschko\n     *\n     * @param source the event source\n     * @param event the event\n     * @param eventName event name for java.javax.faces.behavior.evemnt\n     * @param execute execute list as passed down in jsf.ajax.request\n     * @param render\n     * @param options\n     */\n    export function ab(source: Element, event: Event, eventName: string, execute: string, render: string, options: Context = {}) {\n        if (eventName) {\n            options[\"javax.faces.behavior.event\"] = eventName;\n        }\n        if (execute) {\n            options[\"execute\"] = execute;\n        }\n        if (render) {\n            options[\"render\"] = render;\n        }\n\n        jsf.ajax.request(source, event, options);\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IListener} from \"./util/ListenerQueue\";\nimport {Response} from \"./xhrCore/Response\";\nimport {XhrRequest} from \"./xhrCore/XhrRequest\";\nimport {AsynchronousQueue} from \"./util/AsyncQueue\";\nimport {AssocArrayCollector, Config, DQ, Lang, LazyStream, Optional, Stream} from \"mona-dish\";\nimport {Assertions} from \"./util/Assertions\";\nimport {XhrFormData} from \"./xhrCore/XhrFormData\";\nimport {ExtDomquery} from \"./util/ExtDomQuery\";\nimport {ErrorData} from \"./xhrCore/ErrorData\";\nimport {EventData} from \"./xhrCore/EventData\";\nimport {ExtLang} from \"./util/Lang\";\nimport {\n    CTX_PARAM_EXECUTE,\n    CTX_PARAM_PASS_THR,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    CTX_PARAM_TR_TYPE,\n    IDENT_ALL,\n    IDENT_FORM,\n    IDENT_NONE,\n    IDENT_THIS,\n    MYFACES,\n    ON_ERROR,\n    ON_EVENT,\n    P_AJAX,\n    P_CLIENT_WINDOW,\n    P_EVT,\n    P_EXECUTE,\n    P_PARTIAL_SOURCE,\n    P_RENDER,\n    P_RESET_VALUES,\n    P_WINDOW_ID,\n    RENDER,\n    REQ_TYPE_POST,\n    SOURCE,\n    TAG_FORM\n} from \"./core/Const\";\nimport {\n    resolveDefaults,\n    resolveDelay,\n    resolveForm,\n    resolveTimeout\n} from \"./xhrCore/RequestDataResolver\";\n\n\ndeclare var jsf: any;\n\n/*\n * allowed project stages\n */\nenum ProjectStages {\n    Production = \"Production\",\n    Development = \"Development\",\n    SystemTest = \"SystemTest\",\n    UnitTest = \"UnitTest\"\n}\n\n/*\n *   blockfilter for the passthrough filtering; the attributes given here\n *   will not be transmitted from the options into the passthrough\n */\nenum BlockFilter {\n    onerror = \"onerror\",\n    onevent = \"onevent\",\n    render = \"render\",\n    execute = \"execute\",\n    myfaces = \"myfaces\",\n    delay = \"delay\",\n    timeout = \"timeout\",\n    windowId = \"windowId\"\n}\n\n/**\n * Core Implementation\n * to distinct between api and impl\n *\n * The original idea was to make the implementation pluggable\n * but this is pointless, you always can overwrite the thin api layer\n * however a dedicated api makes sense for readability reasons\n */\nexport module Implementation {\n\n    import trim = Lang.trim;\n    import getMessage = ExtLang.getMessage;\n    import getGlobalConfig = ExtLang.getGlobalConfig;\n    import assert = Assertions.assert;\n\n\n\n    let projectStage: string = null;\n    let separator: string = null;\n    let eventQueue = [];\n    let errorQueue = [];\n    export let requestQueue: AsynchronousQueue<XhrRequest> = null;\n    /*error reporting threshold*/\n    let threshold = \"ERROR\";\n\n    /**\n     * fetches the separator char from the given script tags\n     *\n     * @return {string} the separator char for the given script tags\n     */\n    export function getSeparatorChar(): string {\n        return resolveGlobalConfig()?.separator ??\n            this?.separator ??\n            (separator = ExtDomquery.searchJsfJsFor(/separator=([^&;]*)/).orElse(\":\").value);\n    }\n\n    /**\n     * this is for testing purposes only, since AjaxImpl is a module\n     * we need to reset for every unit test its internal states\n     */\n    export function reset() {\n        projectStage = null;\n        separator = null;\n        eventQueue = [];\n        errorQueue = [];\n        requestQueue = null;\n    }\n\n    /**\n     * @return the project stage also emitted by the server:\n     * it cannot be cached and must be delivered over the server\n     * The value for it comes from the requestInternal parameter of the jsf.js script called \"stage\".\n     */\n    export function getProjectStage(): string | null {\n        return resolveGlobalConfig()?.projectStage ??\n            this?.projectStage ??\n            (projectStage = resolveProjectStateFromURL());\n    }\n\n    /**\n     * resolves the project stage as url parameter\n     * @return the project stage or null\n     */\n    export function resolveProjectStateFromURL(): string | null {\n\n        /* run through all script tags and try to find the one that includes jsf.js */\n        const foundStage = ExtDomquery.searchJsfJsFor(/stage=([^&;]*)/).value as string;\n        return (foundStage in ProjectStages) ? foundStage : null;\n    }\n\n    /**\n     * implementation of the jsf.util.chain functionality\n     *\n     * @param source\n     * @param event\n     * @param funcs\n     */\n    export function chain(source: any, event: Event, ...funcs: EvalFuncs): boolean {\n        // we can use our lazy stream each functionality to run our chain here..\n        // by passing a boolean as return value into the onElem call\n        // we can stop early at the first false, just like the spec requests\n\n        return LazyStream.of(...funcs)\n            .map(func => resolveAndExecute(source, event, func))\n            // we use the return false == stop as an early stop\n            .onElem((opResult: boolean) => opResult)\n            .last().value;\n    }\n\n    /**\n     * this function has to send the ajax requests\n     *\n     * following request conditions must be met:\n     * <ul>\n     *  <li> the request must be sent asynchronously! </li>\n     *  <li> the request must be a POST!!! request </li>\n     *  <li> the request url must be the form action attribute </li>\n     *  <li> all requests must be queued with a client side request queue to ensure the request ordering!</li>\n     * </ul>\n     *\n     * @param el any dom element no matter being it html or jsf, from which the event is emitted\n     * @param event any javascript event supported by that object\n     * @param opts  map of options being pushed into the ajax cycle\n     *\n     * a) transformArguments out of the function\n     * b) passThrough handling with a map copy with a filter map block map\n     */\n    export function request(el: ElemDef, event?: Event, opts ?: Options) {\n\n        const {\n            resolvedEvent,\n            options,\n            elem,\n            elementId,\n            requestCtx,\n            internalCtx,\n            windowId,\n            isResetValues\n        } = resolveDefaults(event, opts, el);\n\n        Assertions.assertRequestIntegrity(options, elem);\n\n        requestCtx.assignIf(!!windowId, P_WINDOW_ID).value = windowId;\n\n        requestCtx.assign(CTX_PARAM_PASS_THR).value = filterPassthroughValues(options.value);\n\n        requestCtx.assignIf(!!resolvedEvent, CTX_PARAM_PASS_THR, P_EVT).value = resolvedEvent?.type;\n\n        /**\n         * ajax pass through context with the source\n         * onresolvedEvent and onerror\n         */\n        requestCtx.assign(SOURCE).value = elementId.value;\n\n        /**\n         * on resolvedEvent and onError...\n         * those values will be traversed later on\n         * also into the response context\n         */\n        requestCtx.assign(ON_EVENT).value = options.value?.onevent;\n        requestCtx.assign(ON_ERROR).value = options.value?.onerror;\n\n        /**\n         * lets drag the myfaces config params also in\n         */\n        requestCtx.assign(MYFACES).value = options.value?.myfaces;\n        /**\n         * fetch the parent form\n         *\n         * note we also add an override possibility here\n         * so that people can use dummy forms and work\n         * with detached objects\n         */\n        let form: DQ = resolveForm(requestCtx, elem, resolvedEvent);\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * javax.faces.partial.ajax must be set to true\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_AJAX).value = true;\n\n        /**\n         * binding contract the javax.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value = elementId.value;\n\n        /**\n         * if resetValues is set to true\n         * then we have to set javax.faces.resetValues as well\n         * as pass through parameter\n         * the value has to be explicitly true, according to\n         * the specs jsdoc\n         */\n        requestCtx.assignIf(isResetValues, CTX_PARAM_PASS_THR, P_RESET_VALUES).value = true;\n\n        //additional meta information to speed things up, note internal non jsf\n        //pass through options are stored under _mfInternal in the context\n        internalCtx.assign(CTX_PARAM_SRC_FRM_ID).value = form.id.value;\n        internalCtx.assign(CTX_PARAM_SRC_CTL_ID).value = elementId.value;\n        internalCtx.assign(CTX_PARAM_TR_TYPE).value = REQ_TYPE_POST;\n\n        //mojarra compatibility, mojarra is sending the form id as well\n        //this is not documented behavior but can be determined by running\n        //mojarra under blackbox conditions\n        //i assume it does the same as our formId_submit=1 so leaving it out\n        //wont hurt but for the sake of compatibility we are going to add it\n\n        requestCtx.assign(CTX_PARAM_PASS_THR, form.id.value).value = form.id.value;\n\n        assignClientWindowId(form, requestCtx);\n\n        assignExecute(options, requestCtx, form, elementId.value);\n        assignRender(options, requestCtx, form, elementId.value);\n\n        let delay: number = resolveDelay(options);\n        let timeout: number = resolveTimeout(options);\n\n        //now we enqueue the request as asynchronous runnable into our request\n        //queue and let the queue take over the rest\n        queueHandler.addRequestToQueue(elem, form, requestCtx, internalCtx, delay, timeout);\n    }\n\n    /**\n     * Spec. 13.3.3\n     * Examining the response markup and updating the DOM tree\n     * @param {XMLHttpRequest} request - the ajax request\n     * @param {Object} context - the ajax context\n     */\n    export function response(request: XMLHttpRequest, context: Context) {\n        Response.processResponse(request, context);\n    }\n\n    /**\n     * adds an error handler to the error queue\n     *\n     * @param errorListener the error listener handler\n     */\n    export function addOnError(errorListener: IListener<ErrorData>) {\n        /*error handling already done in the assert of the queue*/\n        errorQueue.push(errorListener);\n    }\n\n    /**\n     * adds an event handler to the event queue\n     *\n     * @param eventListener the event listener handler\n     */\n    export function addOnEvent(eventListener: IListener<EventData>) {\n        /*error handling already done in the assert of the queue*/\n        eventQueue.push(eventListener);\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * sends an event to the event handlers\n     *\n     * @param data the event data object hosting the event data according to the spec @see EventData for what is reachable\n     * @param localHandler an optional event handler, which is processed before the event handler chain\n     */\n    export function sendEvent(data: EventData, localHandler = function (data: EventData) {\n    }) {\n        /*now we serve the queue as well*/\n        localHandler(data);\n        eventQueue.forEach(fn => fn(data));\n    }\n\n    /**\n     * error handler behavior called internally\n     * and only into the impl it takes care of the\n     * internal message transformation to a myfaces internal error\n     * and then uses the standard send error mechanisms\n     * also a double error logging prevention is done as well\n     *\n     * @param request the request currently being processed\n     * @param context the context affected by this error\n     * @param exception the exception being thrown\n     * @param clearRequestQueue if set to true, clears the request queue of all pending requests\n     */\n    export function stdErrorHandler(request: XMLHttpRequest,\n                                    context: Config,\n                                    exception: Error,\n                                    clearRequestQueue = false) {\n        //newer browsers do not allow to hold additional values on native objects like exceptions\n        //we hence capsule it into the request, which is gced automatically\n        //on ie as well, since the stdErrorHandler usually is called between requests\n        //this is a valid approach\n        try {\n            if (threshold == \"ERROR\") {\n                let errorData = ErrorData.fromClient(exception);\n                sendError(errorData);\n            }\n        } finally {\n            if (clearRequestQueue) {\n                requestQueue.cleanup();\n            }\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * implementation triggering the error chain\n     *\n     *\n     *\n     *  handles the errors, in case of an onError exists within the context the onError is called as local error handler\n     *  the registered error handlers in the queue received an error message to be dealt with\n     *  and if the projectStage is at development an alert box is displayed\n     *\n     *  note: we have additional functionality here, via the global config myfaces.config.defaultErrorOutput a function can be provided\n     *  which changes the default output behavior from alert to something else\n     *\n     * @param errorData the error data to be displayed\n     * @param localHandler an optional local error handler which has to be processed before the error handler queue\n     */\n    export function sendError(errorData: ErrorData, localHandler = function (data: ErrorData) {\n    }) {\n\n        localHandler(errorData);\n        errorQueue.forEach((errorCallback: Function) => {\n            errorCallback(errorData);\n        });\n        let displayError: (string) => void = getGlobalConfig(\"defaultErrorOutput\", (console ? console.error : alert));\n        displayError(errorData);\n    }\n\n    /**\n     * @node optional element or id defining a rootnode where an element with the id \"javax.faces.windowId\" is hosted\n     * @return the client window id of the current window, if one is given if none is found, null is returned\n     */\n    export function getClientWindow(node ?: Element | string): string | null {\n        const ALTERED = \"___mf_id_altered__\";\n        const INIT = \"___init____\";\n\n        /**\n         * the search root for the dom element search\n         */\n        let searchRoot = new DQ(node || document.body).querySelectorAll(`form input [name='${P_CLIENT_WINDOW}']`);\n\n        /**\n         * lazy helper to fetch the window id from the window url\n         */\n        let fetchWindowIdFromUrl = () => ExtDomquery.searchJsfJsFor(/jfwid=([^&;]*)/).orElse(null).value;\n\n        /**\n         * functional double check based on stream reduction\n         * the values should be identical or on INIT value which is a premise to\n         * skip the first check\n         *\n         * @param value1\n         * @param value2\n         */\n        let differenceCheck = (value1: string, value2: string) => {\n            if(value1 == INIT) {\n                return value2;\n            } else if (value1 == ALTERED || value1 != value2) {\n                return ALTERED;\n            }\n            return value2;\n        };\n\n        /**\n         * helper for cleaner code, maps the value from an item\n         *\n         * @param item\n         */\n        let getValue = (item: DQ) => item.attr(\"value\").value;\n        /**\n         * fetch the window id from the forms\n         * window ids must be present in all forms\n         * or non existent. If they exist all of them must be the same\n         */\n\n        let formWindowId: Optional<string> = searchRoot.stream.map<string>(getValue).reduce(differenceCheck, INIT);\n\n\n        //if the resulting window id is set on altered then we have an unresolvable problem\n        assert(ALTERED != formWindowId.value, \"Multiple different windowIds found in document\");\n\n        /**\n         * return the window id or null\n         * prio, forms under node/document and if not given then from the url\n         */\n        return formWindowId.value != INIT ? formWindowId.value : fetchWindowIdFromUrl();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the javax.faces.ViewState element and encode its value as well!\n     * @return a concatenated string of the encoded values!\n     *\n     * @throws Error in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(form: Element | string): string {\n        /**\n         *  typecheck assert!, we opt for strong typing here\n         *  because it makes it easier to detect bugs\n         */\n\n        let element: DQ = DQ.byId(form, true);\n        if (!element.isTag(TAG_FORM)) {\n            throw new Error(getMessage(\"ERR_VIEWSTATE\"));\n        }\n\n        let formData = new XhrFormData(element);\n        return formData.toString();\n    }\n\n    /**\n     * this at the first sight looks like a weird construct, but we need to do it this way\n     * for testing, we cannot proxy addRequestToQueue from the testing frameworks directly\n     * but we need to keep it under unit tests.\n     */\n    export let queueHandler = {\n        /**\n         * public to make it shimmable for tests\n         *\n         * adds a new request to our queue for further processing\n         */\n        addRequestToQueue: function (elem: DQ, form: DQ, reqCtx: Config, respPassThr: Config, delay = 0, timeout = 0) {\n            requestQueue = requestQueue ?? new AsynchronousQueue<XhrRequest>();\n            requestQueue.enqueue(new XhrRequest(elem, form, reqCtx, respPassThr, [], timeout), delay);\n        }\n    };\n\n    //----------------------------------------------- Methods ---------------------------------------------------------------------\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the render parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignRender(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n        if (requestOptions.getIf(RENDER).isPresent()) {\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_RENDER, <string>requestOptions.getIf(RENDER).value, issuingForm, <any>sourceElementId);\n        }\n    }\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the execute parameters\n     *\n     * @param requestOptions the source options coming in as options object from jsf.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the jsf.ajax.request (id of it)\n     */\n    function assignExecute(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n\n        if (requestOptions.getIf(CTX_PARAM_EXECUTE).isPresent()) {\n            /*the options must be a blank delimited list of strings*/\n            /*compliance with Mojarra which automatically adds @this to an execute\n             * the spec rev 2.0a however states, if none is issued nothing at all should be sent down\n             */\n            requestOptions.assign(CTX_PARAM_EXECUTE).value = [requestOptions.getIf(CTX_PARAM_EXECUTE).value, IDENT_THIS].join(\" \");\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_PASS_THR).get({}), P_EXECUTE, <string>requestOptions.getIf(CTX_PARAM_EXECUTE).value, issuingForm, <any>sourceElementId);\n        } else {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_EXECUTE).value = sourceElementId;\n        }\n    }\n\n    /**\n     * apply the browser tab where the request was originating from\n     *\n     * @param form the form hosting the client window id\n     * @param targetContext the target context receiving the value\n     */\n    function assignClientWindowId(form: DQ, targetContext: Config) {\n        let clientWindow = jsf.getClientWindow(form.getAsElem(0).value);\n        if (clientWindow) {\n            targetContext.assign(CTX_PARAM_PASS_THR, P_CLIENT_WINDOW).value = clientWindow;\n        }\n    }\n\n    /**\n     * transforms the user values to the expected one\n     * with the proper none all form and this handling\n     * (note we also could use a simple string replace but then\n     * we would have had double entries under some circumstances)\n     *\n     * there are several standardized constants which need a special treatment\n     * like @all, @none, @form, @this\n     *\n     * @param targetConfig the target configuration receiving the final values\n     * @param targetKey the target key\n     * @param userValues the passed user values (aka input string which needs to be transformed)\n     * @param issuingForm the form where the issuing element originates\n     * @param issuingElementId the issuing element\n     */\n    function remapDefaultConstants(targetConfig: Config, targetKey: string, userValues: string, issuingForm: DQ, issuingElementId: string): Config {\n        //a cleaner implementation of the transform list method\n\n        let iterValues = (userValues) ? trim(userValues).split(/\\s+/gi) : [];\n        let ret = [];\n        let processed = {};\n\n        //the idea is simply to loop over all values and then replace\n        //their generic values and filter out doubles\n        //this is more readable than the old indexed based solution\n        //and not really slower because we had to build up the index in our old solution\n        //anyway\n        for (let cnt = 0; cnt < iterValues.length; cnt++) {\n            //avoid doubles\n            if (iterValues[cnt] in processed) {\n                continue;\n            }\n            switch (iterValues[cnt]) {\n                //@none no values should be sent\n                case IDENT_NONE:\n                    return targetConfig.delete(targetKey);\n                //@all is a pass through case according to the spec\n                case IDENT_ALL:\n                    targetConfig.assign(targetKey).value = IDENT_ALL;\n                    return targetConfig;\n                //@form pushes the issuing form id into our list\n                case IDENT_FORM:\n                    ret.push(issuingForm.id.value);\n                    processed[issuingForm.id.value] = true;\n                    break;\n                //@this is replaced with the current issuing element id\n                case IDENT_THIS:\n                    if (!(issuingElementId in processed)) {\n                        ret.push(issuingElementId);\n                        processed[issuingElementId] = true;\n                    }\n                    break;\n                default:\n                    ret.push(iterValues[cnt]);\n                    processed[iterValues[cnt]] = true;\n            }\n        }\n        //We now add the target as joined list\n        targetConfig.assign(targetKey).value = ret.join(\" \");\n        return targetConfig;\n    }\n\n    /**\n     * filter the options given with a blacklist so that only\n     * the values required for passthough land in the ajax request\n     *\n     * @param {Context} mappedOpts the options to be filtered\n     */\n    function filterPassthroughValues(mappedOpts: Context): Context {\n        //we now can use the full code reduction given by our stream api\n        //to filter\n        return Stream.ofAssoc(mappedOpts)\n            .filter(item => !(item[0] in BlockFilter))\n            .collect(new AssocArrayCollector());\n    }\n\n    function resolveGlobalConfig(): any {\n        return  window?.[MYFACES]?.config ?? {};\n    }\n\n    /**\n     * Private helper to execute a function or code fragment\n     * @param source the source of the caller passed into the function as this\n     * @param event an event which needs to be passed down into the function\n     * @param func either a function or code fragment\n     * @return a boolean value, if the passed function returns false, then the\n     * caller is basically notified that the execution can now stop (JSF requirement for chain)\n     * @private\n     */\n    function resolveAndExecute(source: any, event: Event, func: Function | string): boolean {\n        if (\"string\" != typeof func) {\n            //function is passed down as chain parameter, can be executed as is\n            return (<Function>func).call(source, event) !== false;\n        } else {\n            //either a function or a string can be passed in case of a string we have to wrap it into another function\n            //it it is not a plain executable code but a definition\n            let sourceCode = trim(<string>func);\n            if (sourceCode.indexOf(\"function \") == 0) {\n                sourceCode = `return ${sourceCode} (event)`;\n            }\n            return new Function(\"event\", sourceCode).call(source, event) !== false;\n        }\n    }\n}\n","/**\n * Typescript port of the jsf.push part in the myfaces implementation\n */\n\n//TODO still work in progress\n//this is a 1:1 port for the time being\nimport {jsf} from \"../api/Jsf\";\nimport {MAX_RECONNECT_ATTEMPTS, REASON_EXPIRED, RECONNECT_INTERVAL} from \"./core/Const\";\n\n\n/**\n * Implementation class for the push functionality\n */\nexport module PushImpl {\n\n\n\n    const URL_PROTOCOL = window.location.protocol.replace(\"http\", \"ws\") + \"//\";\n\n\n    //we expose the member variables for testing purposes\n    //they are not directly touched outside of tests\n\n    /* socket map by token */\n    export let sockets = {};\n    /* component attributes by clientId */\n    export let components = {};\n    /* client ids by token (share websocket connection) */\n    export let clientIdsByTokens = {};\n\n\n    //needed for testing\n    export function reset() {\n        sockets = {};\n        components = {}\n        clientIdsByTokens = {}\n    }\n\n    /*\n     * Api implementations, exposed functions\n     */\n\n    /**\n     *\n     * @param {function} onopen The function to be invoked when the web socket is opened.\n     * @param {function} onmessage The function to be invoked when a message is received.\n     * @param {function} onclose The function to be invoked when the web socket is closed.\n     * @param {boolean} autoconnect Whether or not to immediately open the socket. Defaults to <code>false</code>.\n     */\n    export function init(socketClientId: string,\n                         uri: string,\n                         channel: string,\n                         onopen: Function,\n                         onmessage: Function,\n                         onclose: Function,\n                         behaviorScripts: any,\n                         autoconnect: boolean) {\n        onclose = resolveFunction(onclose);\n\n        if (!window.WebSocket) { // IE6-9.\n            onclose(-1, channel);\n            return;\n        }\n\n        let channelToken = uri.substr(uri.indexOf('?') + 1);\n\n        if (!components[socketClientId]) {\n            components[socketClientId] = {\n                'channelToken': channelToken,\n                'onopen': resolveFunction(onopen),\n                'onmessage' : resolveFunction(onmessage),\n                'onclose': onclose,\n                'behaviors': behaviorScripts,\n                'autoconnect': autoconnect};\n            if (!clientIdsByTokens[channelToken]) {\n                clientIdsByTokens[channelToken] = [];\n            }\n            clientIdsByTokens[channelToken].push(socketClientId);\n            if (!sockets[channelToken]){\n                sockets[channelToken] = new Socket(channelToken,\n                    getBaseURL(uri), channel);\n            }\n        }\n\n        if (autoconnect) {\n            jsf.push.open(socketClientId);\n        }\n    }\n\n    export function open(socketClientId: string) {\n        getSocket(components?.[socketClientId]?.channelToken).open();\n    }\n\n    export function close(socketClientId: string) {\n        getSocket(components?.[socketClientId].channelToken).close();\n    }\n\n    // Private helper classes\n    // Private classes functions ----------------------------------------------------------------------------------\n    /**\n     * Creates a reconnecting web socket. When the web socket successfully connects on first attempt, then it will\n     * automatically reconnect on timeout with cumulative intervals of 500ms with a maximum of 25 attempts (~3 minutes).\n     * The <code>onclose</code> function will be called with the error code of the last attempt.\n     * @constructor\n     * @param {string} channelToken the channel token associated with this websocket connection\n     * @param {string} url The URL of the web socket\n     * @param {string} channel The name of the web socket channel.\n     */\n\n    class Socket {\n\n        socket: WebSocket;\n        reconnectAttempts = 0;\n\n        constructor(private channelToken: string, private url: string, private channel: string) {\n        }\n\n        open() {\n            if (this.socket && this.socket.readyState == 1) {\n                return;\n            }\n            this.socket = new WebSocket(this.url);\n\n            this.bindCallbacks();\n        }\n\n        onopen(event: any) {\n            if (!this.reconnectAttempts) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onopen'](this.channel);\n                }\n            }\n            this.reconnectAttempts = 0;\n        }\n\n        onmmessage(event: any) {\n            let message = JSON.parse(event.data);\n            for (let i = clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\n                let socketClientId = clientIdsByTokens[this.channelToken][i];\n                if (document.getElementById(socketClientId)) {\n                    try {\n                        components[socketClientId]['onmessage'](message, this.channel, event);\n                    } catch (e) {\n                        //Ignore\n                    }\n                    let behaviors = components[socketClientId]['behaviors'];\n                    let functions = behaviors[message];\n                    if (functions && functions.length) {\n                        for (let j = 0; j < functions.length; j++) {\n                            try {\n                                functions[j](null);\n                            } catch (e) {\n                                //Ignore\n                            }\n                        }\n                    }\n                } else {\n                    clientIdsByTokens[this.channelToken].splice(i, 1);\n                }\n            }\n            if (clientIdsByTokens[this.channelToken].length == 0) {\n                //tag dissapeared\n                this.close();\n            }\n        }\n\n        onclose(event: any) {\n            if (!this.socket\n                || (event.code == 1000 && event.reason == REASON_EXPIRED)\n                || (event.code == 1008)\n                || (!this.reconnectAttempts)\n                || (this.reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]['onclose'](event?.code, this?.channel, event);\n                }\n            } else {\n                setTimeout(this.open, RECONNECT_INTERVAL * this.reconnectAttempts++);\n            }\n        };\n\n        close() {\n            if (this.socket) {\n                let s = this.socket;\n                this.socket = null;\n                s.close();\n            }\n        }\n\n        /**\n         * bind the callbacks to the socket callbacks\n         */\n        private bindCallbacks() {\n            this.socket.onopen = (event: Event) => this.onopen(event);\n            this.socket.onmessage = (event: Event) => this.onmmessage(event);\n            this.socket.onclose = (event: Event) => this.onclose(event);\n        }\n    }\n\n    // Private static functions ---------------------------------------------------------------------------------------\n\n    function getBaseURL(url: string) {\n        if (url.indexOf(\"://\") < 0) {\n            let base = window.location.hostname + \":\" + window.location.port;\n            return URL_PROTOCOL + base + url;\n        } else {\n            return url;\n        }\n    }\n\n    /**\n     * Get socket associated with given channelToken.\n     * @param {string} channelToken The name of the web socket channelToken.\n     * @return {Socket} Socket associated with given channelToken.\n     * @throws {Error} When channelToken is unknown, you may need to initialize\n     *                 it first via <code>init()</code> function.\n     */\n    function getSocket(channelToken: string): Socket {\n        let socket = sockets[channelToken];\n        if (socket) {\n            return socket;\n        } else {\n            throw new Error(\"Unknown channelToken: \" + channelToken);\n        }\n    }\n\n    function resolveFunction(fn: Function | string = () => {\n    }): Function {\n        return <Function>((typeof fn !== \"function\") && (fn = window[fn]), fn);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * [export const] constants\n */\n\nexport const P_PARTIAL_SOURCE = \"javax.faces.source\";\nexport const PARTIAL_ID = \"partialId\";\nexport const P_VIEWSTATE = \"javax.faces.ViewState\";\nexport const P_VIEWROOT = \"javax.faces.ViewRoot\";\nexport const P_VIEWHEAD = \"javax.faces.ViewHead\";\nexport const P_VIEWBODY = \"javax.faces.ViewBody\";\n\n/*some useful definitions*/\n\nexport const EMPTY_FUNC = Object.freeze(() => {\n});\nexport const EMPTY_STR = \"\";\nexport const EMPTY_MAP = Object.freeze({});\n\nexport const HTML_VIEWSTATE = [\"<input type='hidden'\", \"id='\", P_VIEWSTATE, \"' name='\", P_VIEWSTATE, \"' value='' />\"].join(EMPTY_STR);\n\n\n/*internal identifiers for options*/\nexport const IDENT_ALL = \"@all\";\nexport const IDENT_NONE = \"@none\";\nexport const IDENT_THIS = \"@this\";\nexport const IDENT_FORM = \"@form\";\n\n\nexport const P_AJAX = \"javax.faces.partial.ajax\";\nexport const P_EXECUTE = \"javax.faces.partial.execute\";\nexport const P_RENDER = \"javax.faces.partial.render\";\nexport const P_EVT = \"javax.faces.partial.event\";\nexport const P_CLIENT_WINDOW = \"javax.faces.ClientWindow\";\nexport const P_RESET_VALUES = \"javax.faces.partial.resetValues\";\n\nexport const P_WINDOW_ID = \"javax.faces.windowId\";\n\nexport const RENDER = \"render\";\nexport const WINDOW_ID = \"windowId\";\n\n/* message types */\nexport const ERROR = \"error\";\nexport const EVENT = \"event\";\n\nexport const ON_ERROR = \"onerror\";\nexport const ON_EVENT = \"onevent\";\n\n/* event emitting stages */\nexport const BEGIN = \"begin\";\nexport const COMPLETE = \"complete\";\nexport const SUCCESS = \"success\";\n\nexport const SOURCE = \"source\";\nexport const STATUS = \"status\";\n\n\nexport const ERROR_NAME = \"error-name\";\nexport const ERROR_MESSAGE = \"error-message\";\n\n\nexport const RESPONSE_TEXT = \"responseText\";\nexport const RESPONSE_XML = \"responseXML\";\n\n/*ajax errors spec 14.4.2*/\nexport const HTTPERROR = \"httpError\";\nexport const EMPTY_RESPONSE = \"emptyResponse\";\nexport const MALFORMEDXML = \"malformedXML\";\nexport const SERVER_ERROR = \"serverError\";\nexport const CLIENT_ERROR = \"clientError\";\nexport const TIMEOUT_EVENT = \"timeout\";\n\nexport const CTX_PARAM_MF_INTERNAL = \"_mfInternal\";\n\nexport const CTX_PARAM_SRC_FRM_ID = \"_mfSourceFormId\";\nexport const CTX_PARAM_SRC_CTL_ID = \"_mfSourceControlId\";\nexport const CTX_PARAM_TR_TYPE = \"_mfTransportType\";\nexport const CTX_PARAM_PASS_THR = \"passThrgh\";\nexport const CTX_PARAM_DELAY = \"delay\";\nexport const CTX_PARAM_TIMEOUT = \"timeout\";\nexport const CTX_PARAM_RST = \"resetValues\";\nexport const CTX_PARAM_EXECUTE = \"execute\";\n\nexport const STAGE_DEVELOPMENT = \"Development\";\n\n\nexport const CONTENT_TYPE = \"Content-Type\";\nexport const HEAD_FACES_REQ = \"Faces-Request\";\nexport const REQ_ACCEPT = \"Accept\";\nexport const VAL_AJAX = \"partial/ajax\";\nexport const ENCODED_URL = \"javax.faces.encodedURL\";\nexport const REQ_TYPE_GET = \"GET\";\nexport const REQ_TYPE_POST = \"POST\";\nexport const STATE_EVT_BEGIN = \"begin\"; //TODO remove this\nexport const STATE_EVT_TIMEOUT = \"TIMEOUT_EVENT\";\nexport const STATE_EVT_COMPLETE = \"complete\"; //TODO remove this\nexport const URL_ENCODED = \"application/x-www-form-urlencoded\";\nexport const MULTIPART = \"multipart/form-data\";\nexport const NO_TIMEOUT = 0;\nexport const STD_ACCEPT = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";\n\nexport const TAG_HEAD = \"head\";\nexport const TAG_FORM = \"form\";\nexport const TAG_BODY = \"body\";\nexport const TAG_BEFORE = \"before\";\nexport const TAG_AFTER = \"after\";\n\nexport const TAG_ATTR = \"attribute\";\n\n\nexport const SEL_VIEWSTATE_ELEM = \"[name='\" + P_VIEWSTATE + \"']\";\nexport const SEL_CLIENT_WINDOW_ELEM = \"[name='\" + P_CLIENT_WINDOW + \"']\";\nexport const SEL_RESPONSE_XML = \"responseXML\";\n\nexport const PHASE_PROCESS_RESPONSE = \"processResponse\";\n\n\nexport const ERR_NO_PARTIAL_RESPONSE = \"Partial response not set\";\n\nexport const ATTR_URL = \"url\";\nexport const ATTR_NAME = \"name\";\nexport const ATTR_VALUE = \"value\";\nexport const ATTR_ID = \"id\";\n\n/*partial response types*/\nexport const RESP_PARTIAL = \"partial-response\";\n\n/*partial commands*/\nexport const CMD_CHANGES = \"changes\";\nexport const CMD_UPDATE = \"update\";\nexport const CMD_DELETE = \"delete\";\nexport const CMD_INSERT = \"insert\";\nexport const CMD_EVAL = \"eval\";\nexport const CMD_ERROR = \"error\";\nexport const CMD_ATTRIBUTES = \"attributes\";\nexport const CMD_EXTENSION = \"extension\";\nexport const CMD_REDIRECT = \"redirect\";\n\n/*other constants*/\n\nexport const UPDATE_FORMS = \"_updateForms\";\nexport const UPDATE_ELEMS = \"_updateElems\";\n\nexport const MYFACES = \"myfaces\";\n\nexport const SEL_SCRIPTS_STYLES = \"script, style, link\";\n\nexport const MF_NONE = \"__mf_none__\";\n\nexport const REASON_EXPIRED = \"Expired\";\n\nexport const APPLIED_VST = \"appliedViewState\";\nexport const APPLIED_CLIENT_WINDOW = \"appliedClientWindow\";\n\nexport const RECONNECT_INTERVAL = 500;\nexport const MAX_RECONNECT_ATTEMPTS = 25;\n\nexport const UNKNOWN = \"UNKNOWN\";\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {EMPTY_STR, P_VIEWSTATE} from \"./Const\";\n\nexport interface IdValueHolder {\n\n    readonly id: string;\n    readonly value: string;\n\n}\n\n/**\n * a helper class to isolate the\n * view state and client window and other\n * future states which follow a similar pattern\n */\nexport class StateHolder implements IdValueHolder {\n\n    nameSpace: string;\n\n    constructor(public id: string, public value: string) {\n        let viewStatePos = id.indexOf(P_VIEWSTATE);\n        this.nameSpace = viewStatePos > 0 ? id.substr(0, viewStatePos - 1) : EMPTY_STR;\n    }\n\n    get hasNameSpace(): boolean {\n        return !!(this?.nameSpace ?? EMPTY_STR).length;\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Messages {\n    MSG_TEST = \"Testmessage\";\n\n    /*Messages*/\n    /** @constant */\n    MSG_DEV_MODE = \"Note, this message is only sent, because project stage is development and no \" +\n        \"other error listeners are registered.\";\n    /** @constant */\n    MSG_AFFECTED_CLASS = \"Affected Class=\";\n    /** @constant */\n    MSG_AFFECTED_METHOD = \"Affected Method=\";\n    /** @constant */\n    MSG_ERROR_NAME = \"Error Name=\";\n    /** @constant */\n    MSG_ERROR_MESSAGE = \"Error Message=\";\n    /** @constant */\n    MSG_SERVER_ERROR_NAME = \"Server Error Name=\";\n\n    /** @constant */\n    MSG_ERROR_DESC = \"Error Description=\";\n    /** @constant */\n    MSG_ERROR_NO = \"Error Number=\";\n    /** @constant */\n    MSG_ERROR_LINENO = \"Error Line Number=\";\n\n    /*Errors and messages*/\n    /** @constant */\n    ERR_FORM = \"Sourceform could not be determined, either because element is not attached to a form or we have multiple forms with named elements of the same identifier or name, stopping the ajax processing\";\n    /** @constant */\n    ERR_VIEWSTATE = \"jsf.viewState= param value not of type form!\";\n    /** @constant */\n    ERR_TRANSPORT = \"Transport type {0} does not exist\";\n    /** @constant */\n    ERR_EVT_PASS = \"an event must be passed down (either a an event object null or undefined) \";\n    /** @constant */\n    ERR_CONSTRUCT = \"Parts of the response couldn't be retrieved when constructing the event data= {0} \";\n    /** @constant */\n    ERR_MALFORMEDXML = \"The server response could not be parsed, the server has returned with a response which is not xml !\";\n    /** @constant */\n    ERR_SOURCE_FUNC = \"source cannot be a function (probably source and event were not defined or set to null\";\n    /** @constant */\n    ERR_EV_OR_UNKNOWN = \"An event object or unknown must be passed as second parameter\";\n    /** @constant */\n    ERR_SOURCE_NOSTR = \"source cannot be a string\";\n    /** @constant */\n    ERR_SOURCE_DEF_NULL = \"source must be defined or null\";\n\n    //_Lang.js\n    /** @constant */\n    ERR_MUST_STRING = \"{0}: {1} namespace must be of type String\";\n    /** @constant */\n    ERR_REF_OR_ID = \"{0}: {1} a reference node or identifier must be provided\";\n    /** @constant */\n    ERR_PARAM_GENERIC = \"{0}: parameter {1} must be of type {2}\";\n    /** @constant */\n    ERR_PARAM_STR = \"{0}: {1} param must be of type string\";\n    /** @constant */\n    ERR_PARAM_STR_RE = \"{0}: {1} param must be of type string or a regular expression\";\n    /** @constant */\n    ERR_PARAM_MIXMAPS = \"{0}: both a source as well as a destination map must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED = \"{0}: an {1} and a {2} must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED1 = \"{0}: {1} must be set\";\n\n    /** @constant */\n    ERR_REPLACE_EL = \"replaceElements called while evalNodes is not an array\";\n\n    /** @constant */\n    ERR_EMPTY_RESPONSE = \"{0}: The response cannot be null or empty!\";\n    /** @constant */\n    ERR_ITEM_ID_NOTFOUND = \"{0}: item with identifier {1} could not be found\";\n    /** @constant */\n    ERR_PPR_IDREQ = \"{0}: Error in PPR Insert, id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID = \"{0}: Error in PPR Insert, before id or after id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_1 = \"{0}: Error in PPR Insert, before  node of id {1} does not exist in document\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_2 = \"{0}: Error in PPR Insert, after  node of id {1} does not exist in document\";\n\n    /** @constant */\n    ERR_PPR_DELID = \"{0}: Error in delete, id not in xml markup\";\n    /** @constant */\n    ERR_PPR_UNKNOWNCID = \"{0}:  Unknown Html-Component-ID= {1}\";\n\n    /** @constant */\n    ERR_NO_VIEWROOTATTR = \"{0}: Changing of ViewRoot attributes is not supported\";\n    /** @constant */\n    ERR_NO_HEADATTR = \"{0}: Changing of Head attributes is not supported\";\n    /** @constant */\n    ERR_RED_URL = \"{0}: Redirect without url\";\n\n    /** @constant */\n    ERR_REQ_FAILED_UNKNOWN = \"Request failed with unknown status\";\n\n    /** @constant */\n    ERR_REQU_FAILED = \"Request failed with status {0} and reason {1}\";\n\n    /** @constant */\n    UNKNOWN = \"UNKNOWN\";\n}","import {Config, Lang, XMLQuery} from \"mona-dish\";\n\nimport {DQ} from \"mona-dish\";\nimport {ExtLang} from \"./Lang\";\nimport getMessage = ExtLang.getMessage;\nimport makeException = ExtLang.makeException;\nimport {\n    ATTR_URL,\n    EMPTY_RESPONSE,\n    EMPTY_STR, ERR_NO_PARTIAL_RESPONSE, MALFORMEDXML,\n    ON_ERROR,\n    ON_EVENT,\n    PHASE_PROCESS_RESPONSE,\n    RESP_PARTIAL\n} from \"../core/Const\";\n\n/**\n * a set of internal code assertions\n * which raise an error\n *\n */\nexport module Assertions {\n\n    export function assertRequestIntegrity(options: Config, elem: DQ): void | never {\n        /*assert if the onerror is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_ERROR).value);\n        /*assert if the onevent is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_EVENT).value);\n        //improve the error messages if an empty elem is passed\n        //Assertions.assertElementExists(elem);\n        assert(elem.isPresent(), getMessage(\"ERR_MUST_BE_PROVIDED1\", \"{0}: source  must be provided or exist\", \"source element id\"), \"jsf.ajax.request\", \"ArgNotSet\",  )\n    }\n\n    export function assertUrlExists(node: XMLQuery): void | never {\n        if (node.attr(ATTR_URL).isAbsent()) {\n            throw Assertions.raiseError(new Error(), getMessage(\"ERR_RED_URL\", null, \"_Ajaxthis.processRedirect\"), \"processRedirect\");\n        }\n    }\n\n    /**\n     * checks the xml for various issues which can occur\n     * and prevent a proper processing\n     */\n    export function assertValidXMLResponse(responseXML: XMLQuery) : void | never  {\n        assert(!responseXML.isAbsent(), EMPTY_RESPONSE, PHASE_PROCESS_RESPONSE);\n        assert(!responseXML.isXMLParserError(),  responseXML.parserErrorText(EMPTY_STR), PHASE_PROCESS_RESPONSE);\n        assert(responseXML.querySelectorAll(RESP_PARTIAL).isPresent(), ERR_NO_PARTIAL_RESPONSE, PHASE_PROCESS_RESPONSE);\n    }\n\n    /**\n     * internal helper which raises an error in the\n     * format we need for further processing\n     *\n     * @param error\n     * @param message the message\n     * @param caller\n     * @param title the title of the error (optional)\n     * @param name the name of the error (optional)\n     */\n    export function raiseError(error: any, message: string, caller ?: string, title ?: string, name ?: string): Error {\n\n        let finalTitle = title ?? MALFORMEDXML;\n        let finalName = name ?? MALFORMEDXML;\n        let finalMessage = message ?? EMPTY_STR;\n\n        //TODO clean up the messy makeException, this is a perfect case for encapsulation and sane defaults\n        return makeException(error, finalTitle, finalName, \"Response\", caller || (((<any>arguments).caller) ? (<any>arguments).caller.toString() : \"_raiseError\"), finalMessage);\n    }\n\n    /*\n     * using the new typescript 3.7 compiler assertion functionality to improve compiler hinting\n     * we are not fully there yet, but soon\n     */\n\n    export function assert(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value {\n        if(!value) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n\n    export function assertType(value: any, theType: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Type Assertion Error\"): asserts value {\n        if((!!value) && !Lang.assertType(value,theType)) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n    export function assertFunction(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value is Function {\n        assertType(value, \"function\", msg, caller, title);\n    }\n}\n\n\n","import {AsyncRunnable} from \"./AsyncRunnable\";\n\n/**\n * Asynchronous queue which starts to work\n * through the callbacks until the queue is empty\n *\n * Every callback must be of async runnable\n * which is sort of an extended promise which has\n * added a decicated cancel and start point\n *\n * This interface can be used as wrapper contract\n * for normal promises if needed.\n */\nexport class AsynchronousQueue<T extends AsyncRunnable<any>> {\n\n    private runnableQueue = [];\n    private delayTimeout: null | ReturnType<typeof setTimeout>;\n\n    currentlyRunning: AsyncRunnable<any>;\n\n    constructor() {\n    }\n\n    get isEmpty(): boolean {\n        return !this.runnableQueue.length;\n    }\n\n    /**\n     * enequeues an element and starts the\n     * asynchronous work loop if not already running\n     *\n     * @param element the element to be queued and processed\n     * @param delay possible delay after our usual process or drop if something newer is incoming algorithm\n     */\n    enqueue(element: T, delay = 0) {\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n            this.delayTimeout = null;\n        }\n        if (delay) {\n            this.delayTimeout = setTimeout(() => {\n                this.appendElement(element);\n            });\n        } else {\n            this.appendElement(element);\n        }\n    }\n\n    dequeue(): T {\n        return this.runnableQueue.shift();\n    }\n\n    cleanup() {\n        this.currentlyRunning = null;\n        this.runnableQueue.length = 0;\n    }\n\n    private appendElement(element: T) {\n        //only if the first element is added we start with a trigger\n        //otherwise a process already is running and not finished yet at that\n        //time\n        this.runnableQueue.push(element);\n        if (!this.currentlyRunning) {\n            this.runEntry();\n        }\n    }\n\n    private runEntry() {\n        if (this.isEmpty) {\n            this.currentlyRunning = null;\n            return;\n        }\n        this.currentlyRunning = this.dequeue();\n        this.currentlyRunning\n            .catch((e) => {\n                //in case of an error we always clean up the remaining calls\n                //to allow a clean recovery of the application\n                this.cleanup();\n                throw e;\n            })\n            .then(\n                //the idea is to trigger the next over an event to reduce\n                //the number of recursive calls (stacks might be limited\n                //compared to ram)\n                //naturally give we have a DOM, the DOM is the natural event dispatch system\n                //which we can use, to decouple the calls from a recursive stack call\n                //(the browser engine will take care of that)\n                () => this.callForNextElementToProcess()\n            ).start();\n    }\n\n    cancel() {\n        try {\n            if (this.currentlyRunning) {\n                this.currentlyRunning.cancel();\n            }\n        } finally {\n            this.cleanup();\n        }\n    }\n\n    private callForNextElementToProcess() {\n        this.runEntry();\n    }\n}","import {Config, IValueHolder, Optional, DomQuery, DQ} from \"mona-dish\";\nimport {EMPTY_STR, P_WINDOW_ID} from \"../core/Const\";\n\ndeclare let window: any;\n\n\n/**\n * detects whether a source is a jsf.js request\n *\n * @param source the source string for the jsf.js request\n * @return true if a jsf.js loading pattern is detected\n * @constructor\n */\nconst IS_JSF_SOURCE = (source?: string): boolean => {\n    return source && !!(source?.search(/\\/javax\\.faces\\.resource.*\\/jsf\\.js.*/) != -1 ||\n        source?.search(/\\/jsf\\-development\\.js.*/) != -1 ||\n        source?.search(/\\/jsf\\-uncompressed\\.js.*/) != -1 ||\n        source?.search(/\\/jsf[^\\.]\\.js.*ln\\=javax.faces.*/gi) != -1);\n}\n\n/**\n * namespace myfaces.testscripts can be used as extension point for internal\n * tests, those will be handled similarly to jsf.js regarding\n * reload blocking on ajax requests\n *\n * @param source the source to check\n * @constructor\n */\nconst IS_INTERNAL_SOURCE = (source: string): boolean => {\n    return  source.search(/\\/jsf[^\\.]\\.js.*ln\\=myfaces.testscripts.*/gi) != -1;\n}\n\n\nconst ATTR_SRC = 'src';\n\n/**\n * Extension which adds implementation specific\n * meta data to our dom query\n *\n * Usage\n * el = new ExtDQ(oldReference)\n * nonce = el.nonce\n * windowId = el.getWindowId\n */\nexport class ExtDomquery extends DQ {\n\n    static get windowId() {\n        return new ExtDomquery(document.body).windowId;\n    }\n\n    static get nonce(): string {\n        return new ExtDomquery(document.body).nonce;\n    }\n\n    get windowId(): string | null {\n\n        const fetchWindowIdFromURL = function (): string | null {\n            let href = window.location.href;\n            let windowId = \"windowId\";\n            let regex = new RegExp(\"[\\\\?&]\" + windowId + \"=([^&#\\\\;]*)\");\n            let results = regex.exec(href);\n            //initial trial over the url and a regexp\n            if (results != null) return results[1];\n            return null;\n        };\n\n        //byId ($)\n        if (this.value.isPresent()) {\n            let result = this.querySelectorAll(\"form input[name='\" + P_WINDOW_ID + \"']\");\n            if (result.length > 0) {\n                throw Error(\"Multiple different windowIds found in document\");\n            }\n\n            return (result.isPresent()) ? (<HTMLInputElement>result.getAsElem(0).value).value : fetchWindowIdFromURL();\n        } else {\n            return fetchWindowIdFromURL();\n        }\n    }\n\n    /*\n    * determines the jsf.js nonce and adds them to the namespace\n    * this is done once and only lazily\n    */\n    get nonce(): string | null {\n        //already processed\n        let myfacesConfig = new Config(window.myfaces);\n        let nonce: IValueHolder<string> = myfacesConfig.getIf(\"config\", \"cspMeta\", \"nonce\");\n        if (nonce.value) {\n            return <string>nonce.value;\n        }\n\n        let curScript = new DQ(document.currentScript);\n        //since our baseline atm is ie11 we cannot use document.currentScript globally\n        if (curScript.attr(\"nonce\").value != null) {\n            // fastpath for modern browsers\n            return curScript.attr(\"nonce\").value;\n        }\n        // fallback if the currentScript method fails, we just search the jsf tags for nonce, this is\n        // the last possibility\n        let nonceScript = DQ\n            .querySelectorAll(\"script[src], link[src]\")\n            .lazyStream\n            .filter((item) => item.attr(\"nonce\").value != null && item.attr(ATTR_SRC) != null)\n            .map(item => IS_JSF_SOURCE(item.attr(ATTR_SRC).value))\n            .first();\n\n        if (nonceScript.isPresent()) {\n            nonce.value = DomQuery.byId(nonceScript.value, true).attr(\"nonce\").value;\n        }\n        return <string>nonce.value;\n    }\n\n    static searchJsfJsFor(item: RegExp): Optional<String> {\n        return new ExtDomquery(document).searchJsfJsFor(item);\n    }\n\n    /**\n     * searches the embedded jsf.js for items like separator char etc..\n     * expects a match as variable under position 1 in the result match\n     * @param rexp\n     */\n    searchJsfJsFor(rexp: RegExp): Optional<string> {\n        //perfect application for lazy stream\n        return DQ.querySelectorAll(\"script[src], link[src]\").lazyStream\n                .filter(item => IS_JSF_SOURCE(item.attr(ATTR_SRC).value))\n                .map(item => item.attr(ATTR_SRC).value.match(rexp))\n                .filter(item => item != null && item.length > 1)\n                .map((result: string[]) => {\n                    return decodeURIComponent(result[1]);\n                }).first();\n    }\n\n    globalEval(code: string, nonce ?: string): DQ {\n        return super.globalEval(code, nonce ?? this.nonce);\n    }\n\n    /**\n     * decorated run scripts which takes our jsf extensions into consideration\n     * (standard DomQuery will let you pass anything)\n     * @param whilteListed\n     */\n    runScripts(whilteListed?: (src: string) => boolean): DomQuery {\n        const whitelistFunc = (src: string): boolean => {\n            return (whilteListed?.(src) ?? true) && !IS_JSF_SOURCE(src)  && !IS_INTERNAL_SOURCE(src);\n        };\n        return super.runScripts(whitelistFunc);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        const ret = DomQuery.byId(selector, deep);\n        //return new ExtDomquery(ret);\n        return ret;\n    }\n}\n\nexport const ExtDQ = DQ;","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * todo replace singleton with module definition\n *\n */\n\nimport {Lang as LangBase, Config, Optional, DomQuery, DQ, Stream} from \"mona-dish\";\nimport {Messages} from \"../i18n/Messages\";\nimport {EMPTY_STR, TAG_FORM} from \"../core/Const\";\nimport {getEventTarget} from \"../xhrCore/RequestDataResolver\";\n\nexport module ExtLang {\n\n    let installedLocale: Messages;\n    let nameSpace = \"impl/util/Lang/\";\n\n    export function getLanguage(): string {\n        //TODO global config override\n\n        let language: string = (<any>navigator).languages?.[0] ?? navigator?.language;\n        language = language.split(\"-\")[0];\n        return language;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optional<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function failSaveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        return LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * under some conditions it makes sense to swallow errors and return a default value in the error case\n     * classical example the optional resolution of values in a chain (thankfully now covered by Typescript itself)\n     * another example which we have in our system is that some operations fail only under test due to test framework\n     * limitations while they cannot fail in the real world.\n     *\n     * @param resolverProducer a producer function which produces a value in the non error case\n     * @param defaultValue the default value in case of a fail of the function\n     */\n    export function failSaveExecute<T>(resolverProducer: () => any, defaultValue: T = null): void {\n        LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * returns a given localized message upon a given key\n     * basic java log like templating functionality is included\n     *\n     * @param {String} key the key for the message\n     * @param {String} defaultMessage optional default message if none was found\n     *\n     * Additionally you can pass additional arguments, which are used\n     * in the same way java log templates use the params\n     *\n     * @param templateParams the param list to be filled in\n     */\n    export function getMessage(key: string, defaultMessage?: string, ...templateParams: Array<string>): string {\n        installedLocale = installedLocale ?? new Messages();\n\n        let msg = installedLocale[key] ?? defaultMessage ?? key;\n\n        Stream.of(...templateParams).each((param, cnt) => {\n            msg = msg.replace(new RegExp([\"\\\\{\", cnt, \"\\\\}\"].join(EMPTY_STR), \"g\"), param);\n        });\n\n        return msg;\n    }\n\n    /**\n     * transforms a key value pair into a string\n     * @param key the key\n     * @param val the value\n     * @param delimiter the delimiter\n     */\n    export function keyValToStr(key: string, val: string, delimiter: string = \"\\n\") {\n        return [key, val].join(delimiter);\n    }\n\n    /**\n     * creates an exeption with additional internal parameters\n     * for extra information\n     *\n     * @param error\n     * @param {String} title the exception title\n     * @param {String} name  the exception name\n     * @param {String} callerCls the caller class\n     * @param {String} callFunc the caller function\n     * @param {String} message the message for the exception\n     */\n    export function makeException(error: Error, title: string, name: string, callerCls: string, callFunc: string, message: string): Error {\n\n        return new Error(message + (callerCls ?? nameSpace) + callFunc ?? (EMPTY_STR + (<any>arguments).caller.toString()));\n\n    }\n\n    /**\n     * fetches a global config entry\n     * @param {String} configName the name of the configuration entry\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getGlobalConfig(configName: string, defaultValue: any): any {\n        /**\n         * note we could use exists but this is an heavy operation, since the config name usually\n         * given this function here is called very often\n         * is a single entry without . in between we can do the lighter shortcut\n         */\n        return (<any>window)?.myfaces?.config?.[configName] ?? defaultValue;\n    }\n\n    /**\n     * fetches the form in an fuzzy manner depending\n     * on an element or event target.\n     *\n     * The idea is that according to the jsf spec\n     * the enclosing form of the issuing element needs to be fetched.\n     *\n     * This is fine, but since then html5 came into the picture with the form attribute the element\n     * can be anywhere referencing its parent form.\n     *\n     * Also theoretically you can have the case of an issuing element enclosing a set of forms\n     * (not really often used, but theoretically it could be input button allows to embed html for instance)\n     *\n     * So the idea is not to limit the issuing form determination to the spec case\n     * but also cover the theoretical and html5 corner case.\n     *\n     * @param elem\n     * @param event\n     */\n    export function getForm(elem: Element, event ?: Event): DQ | never {\n\n        let queryElem = new DQ(elem);\n        let eventTarget = new DQ(getEventTarget(event));\n\n        if (queryElem.isTag(TAG_FORM)) {\n            return queryElem;\n        }\n\n        //html 5 for handling\n        if (queryElem.attr(TAG_FORM).isPresent()) {\n            let formId = queryElem.attr(TAG_FORM).value;\n            let foundForm = DQ.byId(formId, true);\n            if (foundForm.isPresent()) {\n                return foundForm;\n            }\n        }\n\n        let form = queryElem.parents(TAG_FORM)\n            .orElseLazy(() => queryElem.byTagName(TAG_FORM, true))\n            .orElseLazy(() => eventTarget.parents(TAG_FORM))\n            .orElseLazy(() => eventTarget.byTagName(TAG_FORM))\n            .first();\n\n        assertFormExists(form);\n\n        return form;\n    }\n\n    /**\n     * gets the local or global options with local ones having higher priority\n     * if no local or global one was found then the default value is given back\n     *\n     * @param {String} configName the name of the configuration entry\n     * @param {String} localOptions the local options root for the configuration myfaces as default marker is added implicitely\n     *\n     * @param {Object} defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getLocalOrGlobalConfig(localOptions: Config, configName: string, defaultValue: any): any {\n        return localOptions.value?.myfaces?.config?.[configName] ??\n            (<any>window)?.myfaces?.config?.[configName] ??\n            defaultValue;\n    }\n\n    /**\n     * assert that the form exists and throw an exception in the case it does not\n     * (TODO move this into the assertions)\n     *\n     * @param form the form to check for\n     */\n    function assertFormExists(form: DomQuery): void | never {\n        if (form.isAbsent()) {\n            throw makeException(new Error(), null, null, \"Impl\", \"getForm\", getMessage(\"ERR_FORM\"));\n        }\n    }\n\n}","import {\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    RESPONSE_TEXT,\n    RESPONSE_XML,\n    SOURCE,\n    STATUS,\n    UNKNOWN\n} from \"../core/Const\";\nimport {Config} from \"mona-dish\";\n\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport getMessage = ExtLang.getMessage;\n\n\nexport enum ErrorType {\n    SERVER_ERROR = \"serverError\",\n    HTTP_ERROR = \"httpError\",\n    CLIENT_ERROR = \"clientErrror\",\n    TIMEOUT = \"timeout\"\n}\n\n/**\n * the spec has a problem of having the error\n * object somewhat underspecified, there is no clear\n * description of the required contents.\n * I want to streamline it with mojarra here\n * hence we are going to move\n * everything into the same attributes,\n * I will add deprecated myfaces backwards compatibility attributes as well\n */\nexport class ErrorData extends EventData {\n\n    type: string = \"error\";\n    source: string;\n    errorName: string;\n    errorMessage: string;\n\n    responseText: string;\n    responseXML: any;\n\n    status: string;\n    typeDetails: ErrorType;\n\n    //TODO backwards compatible attributes\n    serverErrorName: string;\n    serverErrorMessage: string;\n    message: string;\n\n    constructor(source: string, errorName: string, errorMessage: string, responseText: string = null, responseXML: any = null, responseCode: string = \"200\", status: string = \"UNKNOWN\", type = ErrorType.CLIENT_ERROR) {\n        super();\n        this.source = source;\n        this.type = \"error\";\n        this.errorName = errorName;\n        this.message = this.errorMessage = errorMessage;\n        this.responseCode = responseCode;\n        this.responseText = responseText;\n        this.status = status;\n        this.typeDetails = type;\n\n        if (type == ErrorType.SERVER_ERROR) {\n            this.serverErrorName = this.errorName;\n            this.serverErrorMessage = this.errorMessage;\n        }\n    }\n\n    static fromClient(e: Error): ErrorData {\n        return new ErrorData(\"client\", e?.name ?? '', e?.message ?? '', e?.stack ?? '');\n    }\n\n    static fromHttpConnection(source: any, name: string, message: string, responseText, responseCode: number, status: string = 'UNKNOWN'): ErrorData {\n        return new ErrorData(source, name, message, responseText, responseCode, `${responseCode}`, status, ErrorType.HTTP_ERROR);\n    }\n\n    static fromGeneric(context: Config, errorCode: number, errorType: ErrorType = ErrorType.SERVER_ERROR): ErrorData {\n\n        let getMsg = this.getMsg;\n\n        let source = getMsg(context, SOURCE);\n        let errorName = getMsg(context, ERROR_NAME);\n        let errorMessage = getMsg(context, ERROR_MESSAGE);\n        let status = getMsg(context, STATUS);\n        let responseText = getMsg(context, RESPONSE_TEXT);\n        let responseXML = getMsg(context, RESPONSE_XML);\n        return new ErrorData(source, errorName, errorMessage, responseText, responseXML, errorCode + EMPTY_STR, status, errorType);\n    }\n\n    private static getMsg(context, param) {\n        return getMessage(context.getIf(param).orElse(UNKNOWN).value);\n    }\n\n    static fromServerError(context: Config): ErrorData {\n        return this.fromGeneric(context, -1);\n    }\n\n}","import {Config, DQ} from \"mona-dish\";\nimport {BEGIN, CTX_PARAM_PASS_THR, EVENT, P_PARTIAL_SOURCE, SOURCE} from \"../core/Const\";\n\nexport class EventData {\n    type: string;\n    status: string;\n    source: any;\n    responseCode: string;\n    responseText: string;\n    responseXML: Document;\n\n    static createFromRequest(request: XMLHttpRequest, context: Config, /*event name*/ name: string): EventData {\n\n        let eventData = new EventData();\n\n        eventData.type = EVENT;\n        eventData.status = name;\n\n        let sourceId: string = context.getIf(SOURCE)\n            .orElse(context.getIf(P_PARTIAL_SOURCE).value)\n            .orElse(context.getIf(CTX_PARAM_PASS_THR, P_PARTIAL_SOURCE).value).value;\n        if (sourceId) {\n            eventData.source = DQ.byId(sourceId, true).first().value.value;\n        }\n\n        if (name !== BEGIN) {\n            eventData.responseCode = request?.status?.toString();\n            eventData.responseText = request?.responseText;\n            eventData.responseXML = request?.responseXML;\n        }\n        return eventData;\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ} from \"mona-dish\";\nimport {\n    CTX_PARAM_DELAY,\n    CTX_PARAM_TIMEOUT,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ENCODED_URL,\n    MF_NONE,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST\n} from \"../core/Const\";\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {ExtDomquery} from \"../util/ExtDomQuery\";\n\n/**\n * Resolver functions for various aspects of the request data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * resolves the event handlers lazly\n * so that if some decoration happens in between we can deal with it\n *\n * @param requestContext\n * @param responseContext\n * @param funcName\n */\nexport function resolveHandlerFunc(requestContext: Config, responseContext: Config, funcName: string) {\n    return responseContext.getIf(funcName)\n        .orElse(requestContext.getIf(funcName).value)\n        .orElse(EMPTY_FUNC).value;\n}\n\nexport function resolveTargetUrl(srcFormElement: HTMLFormElement) {\n    return (typeof srcFormElement.elements[ENCODED_URL] == 'undefined') ?\n        srcFormElement.action :\n        srcFormElement.elements[ENCODED_URL].value;\n}\n\nexport function resolveFinalUrl(sourceForm: DomQuery, formData: XhrFormData, ajaxType = REQ_TYPE_POST) {\n    let targetUrl = resolveTargetUrl(<HTMLFormElement>sourceForm.getAsElem(0).value);\n\n    return targetUrl + (ajaxType == REQ_TYPE_GET ? \"?\" + formData.toString() : EMPTY_STR);\n}\n\n/**\n * form resolution the same way our old implementation did\n * it is either the id or the parent form of the element or an embedded form\n * of the element\n *\n * @param requestCtx\n * @param elem\n * @param event\n */\nexport function resolveForm(requestCtx: Config, elem: DQ, event: Event): DQ {\n    const configId = requestCtx.value?.myfaces?.form ?? MF_NONE; //requestCtx.getIf(MYFACES, \"form\").orElse(MF_NONE).value;\n    return DQ\n        .byId(configId, true)\n        .orElseLazy(() => ExtLang.getForm(elem.getAsElem(0).value, event));\n}\n\nexport function resolveTimeout(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n    return options.getIf(CTX_PARAM_TIMEOUT).value ?? getCfg(options.value, CTX_PARAM_TIMEOUT, 0);\n}\n\n/**\n * resolve the delay from the options and/or the request context and or the configuration\n *\n * @param options ... the options object, in most cases it will host the delay value\n */\nexport function resolveDelay(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n\n    return options.getIf(CTX_PARAM_DELAY).value ?? getCfg(options.value, CTX_PARAM_DELAY, 0);\n}\n\n/**\n * resolves the window Id from various sources\n *\n * @param options\n */\nexport function resolveWindowId(options: Config) {\n    return options?.value?.windowId ?? ExtDomquery.windowId;\n}\n\n/**\n * cross port from the dojo lib\n * browser save event resolution\n * @param evt the event object\n * (with a fallback for ie events if none is present)\n */\nexport function getEventTarget(evt: Event): Element {\n    //ie6 and 7 fallback\n    let finalEvent = evt;\n    /**\n     * evt source is defined in the jsf events\n     * seems like some component authors use our code\n     * so we add it here see also\n     * https://issues.apache.org/jira/browse/MYFACES-2458\n     * not entirely a bug but makes sense to add this\n     * behavior. I dont use it that way but nevertheless it\n     * does not break anything so why not\n     * */\n    let t = finalEvent?.srcElement ?? finalEvent?.target ?? (<any>finalEvent)?.source;\n    while ((t) && (t.nodeType != 1)) {\n        t = t.parentNode;\n    }\n    return t;\n}\n\n/**\n * resolves a bunch of default values\n * which can be further processed from the given\n * call parameters of jsf.ajax.request\n *\n * @param event\n * @param opts\n * @param el\n */\nexport function resolveDefaults(event: Event, opts: any = {}, el: Element | string = null) {\n    //deep copy the options, so that further transformations to not backfire into the callers\n    const resolvedEvent = event,\n        options = new Config(opts).deepCopy,\n        elem = DQ.byId(el || <Element>resolvedEvent.target, true),\n        elementId = elem.id, requestCtx = new Config({}),\n        internalCtx = new Config({}), windowId = resolveWindowId(options),\n        isResetValues = true === options.value?.resetValues;\n\n    return {resolvedEvent, options, elem, elementId, requestCtx, internalCtx, windowId, isResetValues};\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, XMLQuery} from \"mona-dish\";\n\nimport {Assertions} from \"../util/Assertions\";\nimport {DQ} from \"mona-dish\";\nimport {\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    SEL_RESPONSE_XML,\n    SOURCE,\n    TAG_FORM,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\n\n/**\n * Resolver functions for various aspects of the response data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * fetches the response XML\n * as XML Query object\n *\n * @param request the request hosting the responseXML\n *\n * Throws an error in case of non existent or wrong xml data\n *\n */\nexport function resolveResponseXML(request: Config): XMLQuery {\n    let ret = new XMLQuery(request.getIf(SEL_RESPONSE_XML).value);\n    Assertions.assertValidXMLResponse(ret);\n\n    return ret;\n}\n\n/**\n * Splits the incoming passthrough context apart\n * in an internal and an external nomalized context\n * the internal one is just for our internal processing\n *\n * @param context the root context as associative array\n */\nexport function resolveContexts(context: { [p: string]: any }): any {\n    /**\n     * we split the context apart into the external one and\n     * some internal values\n     */\n    let externalContext = Config.fromNullable(context);\n    let internalContext = externalContext.getIf(CTX_PARAM_MF_INTERNAL);\n    if (!internalContext.isPresent()) {\n        internalContext = Config.fromNullable({});\n    }\n\n    /**\n     * prepare storage for some deferred operations\n     */\n    internalContext.assign(UPDATE_FORMS).value = [];\n    internalContext.assign(UPDATE_ELEMS).value = [];\n    return {externalContext, internalContext};\n}\n\n/**\n * fetches the source element out of our conexts\n *\n * @param context the external context which shpuld host the source id\n * @param internalContext internal passthrough fall back\n *\n */\nexport function resolveSourceElement(context: Config, internalContext: Config): DQ {\n    let elemId = resolveSourceElementId(context, internalContext);\n    return DQ.byId(elemId.value, true);\n}\n\n/**\n * fetches the source form if it still exists\n * also embedded forms and parent forms are taken into consideration\n * as fallbacks\n *\n * @param internalContext\n * @param elem\n */\nexport function resolveSourceForm(internalContext: Config, elem: DQ): DQ {\n    let sourceFormId = internalContext.getIf(CTX_PARAM_SRC_FRM_ID);\n    let sourceForm = new DQ(sourceFormId.isPresent() ? document.forms[sourceFormId.value] : null);\n\n    sourceForm = sourceForm.orElse(elem.parents(TAG_FORM))\n        .orElse(elem.querySelectorAll(TAG_FORM))\n        .orElse(DQ.querySelectorAll(TAG_FORM));\n\n    return sourceForm;\n}\n\nfunction resolveSourceElementId(context: Config, internalContext: Config): Optional<string> {\n    //?internal context?? used to be external one\n    return internalContext.getIf(CTX_PARAM_SRC_CTL_ID)\n        .orElseLazy(() => context.getIf(SOURCE, \"id\").value);\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DQ, XMLQuery} from \"mona-dish\";\nimport {ResponseProcessor} from \"./ResponseProcessor\";\n\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {\n    CMD_ATTRIBUTES,\n    CMD_CHANGES,\n    CMD_DELETE,\n    CMD_ERROR,\n    CMD_EVAL,\n    CMD_EXTENSION,\n    CMD_INSERT,\n    CMD_REDIRECT,\n    CMD_UPDATE,\n    P_VIEWBODY,\n    P_VIEWHEAD,\n    P_VIEWROOT,\n    PARTIAL_ID,\n    RESP_PARTIAL,\n    RESPONSE_XML,\n    TAG_AFTER,\n    TAG_BEFORE\n} from \"../core/Const\";\nimport {resolveContexts, resolveResponseXML} from \"./ResonseDataResolver\";\n\n\n\nexport module Response {\n\n\n    /**\n     * Standardized jsf.js response\n     * this one is called straight from jsf.js.response\n     *\n     * The processing follows the spec by going for the responseXML\n     * and processing its tags\n     *\n     * @param {XMLHttpRequest} request (xhrRequest) - xhr request object\n     * @param ASSOC_ARR<any> context (Map) - AJAX context\n     *\n     */\n    export function processResponse(request: XMLHttpRequest, context: Context) {\n\n        let req = Config.fromNullable(request);\n        let {externalContext, internalContext} = resolveContexts(context);\n        let responseXML: XMLQuery = resolveResponseXML(req);\n        let responseProcessor = new ResponseProcessor(req, externalContext, internalContext);\n\n        internalContext.assign(RESPONSE_XML).value = responseXML;\n\n        //we now process the partial tags, or in none given raise an error\n        responseXML.querySelectorAll(RESP_PARTIAL)\n            .each(item => processPartialTag(<XMLQuery>item, responseProcessor, internalContext));\n\n        //we now process the viewstates, client windows and the evals deferred\n        //the reason for this is that often it is better\n        //to wait until the document has caught up before\n        //doing any evals even on embedded scripts\n        //usually this does not matter, the client window comes in almost last always anyway\n        //we maybe drop this deferred assignment in the future, but myfaces did it until now\n        responseProcessor.fixViewStates();\n        responseProcessor.fixClientWindow();\n        responseProcessor.globalEval();\n\n        responseProcessor.done();\n    }\n\n    /**\n     * highest node partial-response from there the main operations are triggered\n     */\n     function processPartialTag(node: XMLQuery, responseProcessor: IResponseProcessor, internalContext) {\n\n        internalContext.assign(PARTIAL_ID).value = node.id;\n        const SEL_SUB_TAGS = [CMD_ERROR, CMD_REDIRECT, CMD_CHANGES].join(\",\");\n\n        //now we can process the main operations\n        node.getIf(SEL_SUB_TAGS).each((node: XMLQuery) => {\n            switch (node.tagName.value) {\n                case CMD_ERROR:\n                    responseProcessor.error(node);\n                    break;\n                case CMD_REDIRECT:\n                    responseProcessor.redirect(node);\n                    break;\n                case CMD_CHANGES:\n                    processChangesTag(node, responseProcessor);\n                    break;\n            }\n        });\n\n    }\n\n    let processInsert = function (responseProcessor: IResponseProcessor, node: XMLQuery) {\n         //path1 insert after as child tags\n         if(node.querySelectorAll([TAG_BEFORE, TAG_AFTER].join(\",\")).length) {\n             responseProcessor.insertWithSubtags(node);\n         } else { //insert before after with id\n             responseProcessor.insert(node);\n         }\n\n    };\n\n    /**\n     * next level changes tag\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processChangesTag(node: XMLQuery, responseProcessor: IResponseProcessor): boolean {\n        const ALLOWED_TAGS = [CMD_UPDATE, CMD_EVAL, CMD_INSERT, CMD_DELETE, CMD_ATTRIBUTES, CMD_EXTENSION].join(\",\");\n        node.getIf(ALLOWED_TAGS).each(\n            (node: XMLQuery) => {\n                switch (node.tagName.value) {\n                    case CMD_UPDATE:\n                        processUpdateTag(node, responseProcessor);\n                        break;\n\n                    case CMD_EVAL:\n                        responseProcessor.eval(node);\n                        break;\n\n                    case CMD_INSERT:\n                        processInsert(responseProcessor, node);\n                        break;\n\n                    case CMD_DELETE:\n                        responseProcessor.delete(node);\n                        break;\n\n                    case CMD_ATTRIBUTES:\n                        responseProcessor.attributes(node);\n                        break;\n\n                    case CMD_EXTENSION:\n                        break;\n                }\n            }\n        );\n        return true;\n    }\n\n    /**\n     * checks and stores a state update for delayed processing\n     *\n     * @param responseProcessor the response processor to perform the store operation\n     * @param node the xml node to check for the state\n     *\n     * @private\n     */\n    function storeState(responseProcessor: IResponseProcessor, node: XMLQuery) {\n        return responseProcessor.processViewState(node) || responseProcessor.processClientWindow(node);\n    }\n\n    /**\n     * branch tag update.. drill further down into the updates\n     * special case viewstate in that case it is a leaf\n     * and the viewstate must be processed\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function processUpdateTag(node: XMLQuery, responseProcessor: IResponseProcessor) {\n         //early state storing, if no state we perform a normal update cycle\n        if (!storeState(responseProcessor, node)) {\n            handleElementUpdate(node, responseProcessor);\n        }\n    }\n\n    /**\n     * element update\n     *\n     * @param node\n     * @param responseProcessor\n     */\n     function handleElementUpdate(node: XMLQuery, responseProcessor: IResponseProcessor) {\n        let cdataBlock = node.cDATAAsString;\n        switch (node.id.value) {\n            case P_VIEWROOT :\n                responseProcessor.replaceViewRoot(DQ.fromMarkup(cdataBlock.substring(cdataBlock.indexOf(\"<html\"))));\n                break;\n\n            case P_VIEWHEAD:\n                responseProcessor.replaceHead(DQ.fromMarkup(cdataBlock));\n                break;\n\n            case P_VIEWBODY:\n                responseProcessor.replaceBody(DQ.fromMarkup(cdataBlock));\n                break;\n\n            default://htmlItem replacement\n                responseProcessor.update(node, cdataBlock);\n                break;\n\n        }\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ, Lang, Stream, XMLQuery} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\nimport {Assertions} from \"../util/Assertions\";\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {ErrorData} from \"./ErrorData\";\nimport {StateHolder} from \"../core/ImplTypes\";\nimport {EventData} from \"./EventData\";\n\nimport {\n    APPLIED_CLIENT_WINDOW,\n    APPLIED_VST,\n    ATTR_ID,\n    ATTR_NAME,\n    ATTR_URL,\n    ATTR_VALUE,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    HTML_VIEWSTATE,\n    ON_ERROR,\n    ON_EVENT, P_CLIENT_WINDOW,\n    P_PARTIAL_SOURCE,\n    P_VIEWSTATE,\n    RESPONSE_XML, SEL_CLIENT_WINDOW_ELEM,\n    SEL_SCRIPTS_STYLES,\n    SEL_VIEWSTATE_ELEM,\n    SOURCE,\n    SUCCESS,\n    TAG_AFTER,\n    TAG_ATTR,\n    TAG_BEFORE,\n    TAG_BODY,\n    TAG_FORM,\n    TAG_HEAD,\n    UPDATE_ELEMS,\n    UPDATE_FORMS\n} from \"../core/Const\";\nimport trim = Lang.trim;\nimport {ExtDomquery} from \"../util/ExtDomQuery\";\n\n/**\n * Response processor\n *\n * Each  XML tag is either a node or a leaf\n * or both\n *\n * the processor provides a set of operations\n * which are executed on a single leaf node per operation\n * and present the core functionality of our response\n *\n * Note the response processor is stateful hence we bundle it in a class\n * to reduce code we keep references tot contexts in place\n */\nexport class ResponseProcessor implements IResponseProcessor {\n\n    constructor(private request: Config, private externalContext: Config, private internalContext: Config) {\n\n    }\n\n    replaceHead(shadowDocument: XMLQuery | DQ) {\n        let shadowHead = shadowDocument.querySelectorAll(TAG_HEAD);\n        if (!shadowHead.isPresent()) {\n            return;\n        }\n\n        let oldHead = DQ.querySelectorAll(TAG_HEAD);\n\n        //delete all to avoid script and style overlays\n        oldHead.querySelectorAll(SEL_SCRIPTS_STYLES).delete();\n\n        this.storeForEval(shadowHead);\n    }\n\n    /**\n     * replaces the body in the expected manner\n     * which means the entire body content is refreshed\n     * however also the body attributes must be transferred\n     * keeping event handlers etc... in place\n     *\n     * @param shadowDocument .. an incoming shadow document hosting the new nodes\n     */\n    replaceBody(shadowDocument: XMLQuery | DQ) {\n\n        let shadowBody = shadowDocument.querySelectorAll(TAG_BODY);\n        if (!shadowBody.isPresent()) {\n            return;\n        }\n\n        let shadowInnerHTML: string = <string>shadowBody.html().value;\n\n        let resultingBody = <DQ>DQ.querySelectorAll(TAG_BODY).html(shadowInnerHTML);\n        let updateForms = resultingBody.querySelectorAll(TAG_FORM);\n\n        resultingBody.copyAttrs(shadowBody);\n\n        this.storeForPostProcessing(updateForms, resultingBody);\n    }\n\n    /**\n     * Leaf Tag eval... process whatever is in the evals cdata block\n     *\n     * @param node the node to eval\n     */\n    eval(node: XMLQuery) {\n        DQ.globalEval(node.cDATAAsString);\n    }\n\n    /**\n     * processes an incoming error from the response\n     * which is hosted under the &lt;error&gt; tag\n     * @param node the node hosting the error in our response xml\n     * @param node the node in the xml hosting the error message\n     */\n    error(node: XMLQuery) {\n        /**\n         * <error>\n         *      <error-name>String</error-name>\n         *      <error-message><![CDATA[message]]></error-message>\n         * <error>\n         */\n\n        let mergedErrorData = new Config({});\n        mergedErrorData.assign(SOURCE).value = this.externalContext.getIf(P_PARTIAL_SOURCE).get(0).value;\n        mergedErrorData.assign(ERROR_NAME).value = node.querySelectorAll(ERROR_NAME).textContent(EMPTY_STR);\n        mergedErrorData.assign(ERROR_MESSAGE).value = node.querySelectorAll(ERROR_MESSAGE).cDATAAsString;\n\n        let hasResponseXML = this.internalContext.get(RESPONSE_XML).isPresent();\n\n        //we now store the response xml also in the error data for further details\n        mergedErrorData.assignIf(hasResponseXML, RESPONSE_XML).value = this.internalContext.getIf(RESPONSE_XML).value.get(0).value;\n\n        // error post processing and enrichment (standard messages from keys)\n        let errorData = ErrorData.fromServerError(mergedErrorData);\n\n        // we now trigger an internally stored onError function which might be a attached to the context\n        // either we haven an internal on error, or an on error has been bassed via params from the outside\n        // in both cases they are attached to our contexts\n\n        this.triggerOnError(errorData);\n        Implementation.sendError(errorData);\n    }\n\n    private triggerOnError(errorData: ErrorData) {\n        this.externalContext.getIf(ON_ERROR).orElse(this.internalContext.getIf(ON_ERROR).value).orElse(EMPTY_FUNC).value(errorData);\n    }\n\n    /**\n     * process the redirect operation\n     *\n     * @param node\n     */\n    redirect(node: XMLQuery) {\n        Assertions.assertUrlExists(node);\n\n        let redirectUrl = trim(node.attr(ATTR_URL).value);\n        if (redirectUrl != EMPTY_STR) {\n            (<any>window).location.href = redirectUrl;\n        }\n    }\n\n    /**\n     * processes the update operation and updates the node with the cdata block\n     * @param node the xml response node hosting the update info\n     * @param cdataBlock the cdata block with the new html code\n     */\n    update(node: XMLQuery, cdataBlock: string) {\n        let result = ExtDomquery.byId(node.id.value, true).outerHTML(cdataBlock, false, false);\n        let sourceForm = result?.parents(TAG_FORM).orElse(result.byTagName(TAG_FORM, true));\n        if (sourceForm) {\n            this.storeForPostProcessing(sourceForm, result);\n        }\n    }\n\n    delete(node: XMLQuery) {\n        DQ.byId(node.id.value, true).delete();\n    }\n\n    /**\n     * attributes leaf tag... process the attributes\n     *\n     * @param node\n     */\n    attributes(node: XMLQuery) {\n        let elem = DQ.byId(node.id.value, true);\n\n        node.byTagName(TAG_ATTR).each((item: XMLQuery) => {\n            elem.attr(item.attr(ATTR_NAME).value).value = item.attr(ATTR_VALUE).value;\n        });\n    }\n\n    /**\n     * @param shadowDocument a shadow document which is needed for further processing\n     */\n    replaceViewRoot(shadowDocument: XMLQuery) {\n        this.replaceHead(shadowDocument);\n        this.replaceBody(shadowDocument);\n    }\n\n    /**\n     * insert handling, either before or after\n     *\n     * @param node\n     */\n    insert(node: XMLQuery) {\n        //let insertId = node.id; //not used atm\n\n        let before = node.attr(TAG_BEFORE);\n        let after = node.attr(TAG_AFTER);\n\n        let insertNodes = DQ.fromMarkup(<any>node.cDATAAsString);\n\n        if (before.isPresent()) {\n            DQ.byId(before.value, true).insertBefore(insertNodes);\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n        if (after.isPresent()) {\n            let domQuery = DQ.byId(after.value, true);\n            domQuery.insertAfter(insertNodes);\n\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n    }\n\n    /**\n     * handler for the case &lt;insert <&lt; before id=\"...\n     *\n     * @param node the node hosting the insert data\n     */\n    insertWithSubtags(node: XMLQuery) {\n        let before = node.querySelectorAll(TAG_BEFORE);\n        let after = node.querySelectorAll(TAG_AFTER);\n\n        before.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertBefore(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n\n        after.each(item => {\n            let insertId = item.attr(ATTR_ID);\n            let insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertAfter(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n    }\n\n    /**\n     * process the viewState update, update the affected\n     * forms with their respective new viewstate values\n     *\n     */\n    processViewState(node: XMLQuery): boolean {\n        if (ResponseProcessor.isViewStateNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_VST, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n        return false;\n    }\n\n    processClientWindow(node: XMLQuery): boolean {\n        if (ResponseProcessor.isClientWindowNode(node)) {\n            let state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_CLIENT_WINDOW, node.id.value).value = new StateHolder(node.id.value, state);\n            return true;\n        }\n    }\n\n    /**\n     * generic global eval which runs the embedded css and scripts\n     */\n    globalEval() {\n        let updateElems = new ExtDomquery(...this.internalContext.getIf(UPDATE_ELEMS).value);\n        updateElems.runCss();\n        updateElems.runScripts();\n    }\n\n    /**\n     * post processing viewstate fixing\n     */\n    fixViewStates() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_VST).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendViewStateToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    fixClientWindow() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_CLIENT_WINDOW).orElse({}).value)\n            .each((item: Array<any>) => {\n                let value: StateHolder = item[1];\n                let nameSpace = DQ.byId(value.nameSpace, true).orElse(document.body);\n                let affectedForms = nameSpace.byTagName(TAG_FORM);\n                let affectedForms2 = nameSpace.filter(item => item.tagName.orElse(EMPTY_STR).value.toLowerCase() == TAG_FORM);\n\n                this.appendClientWindowToForms(new DomQuery(affectedForms, affectedForms2), value.value);\n            });\n    }\n\n    /**\n     * all processing done we can close the request and send the appropriate events\n     */\n    done() {\n        let eventData = EventData.createFromRequest(this.request.value, this.externalContext, SUCCESS);\n\n        //because some frameworks might decorate them over the context in the response\n        let eventHandler = this.externalContext.getIf(ON_EVENT).orElse(this.internalContext.getIf(ON_EVENT).value).orElse(EMPTY_FUNC).value;\n        Implementation.sendEvent(eventData, eventHandler);\n    }\n\n    /**\n     * proper viewstate -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param viewState the final viewstate\n     */\n    private appendViewStateToForms(forms: DQ, viewState: string) {\n        this.assignState(forms, SEL_VIEWSTATE_ELEM, viewState);\n    }\n\n\n    /**\n     * proper clientwindow -> form assignment\n     *\n     * @param forms the forms to append the viewstate to\n     * @param clientWindow the final viewstate\n     */\n    private appendClientWindowToForms(forms: DQ, clientWindow: string) {\n        this.assignState(forms, SEL_CLIENT_WINDOW_ELEM, clientWindow);\n    }\n\n    /**\n     * generic append state which appends a certain state as hidden element to an existing set of forms\n     *\n     * @param forms the forms to append or change to\n     * @param selector the selector for the state\n     * @param state the state itself which needs to be assigned\n     *\n     * @private\n     */\n    private assignState(forms: DQ, selector: string, state: string) {\n        forms.each((form: DQ) => {\n            let stateHolders = form.querySelectorAll(selector)\n                .orElseLazy(() => ResponseProcessor.newViewStateElement(form));\n\n            stateHolders.attr(\"value\").value = state;\n        });\n    }\n\n    /**\n     * Helper to Create a new JSF ViewState Element\n     *\n     * @param parent, the parent node to attach the viewstate element to\n     * (usually a form node)\n     */\n    private static newViewStateElement(parent: DQ): DQ {\n        let newViewState = DQ.fromMarkup(HTML_VIEWSTATE);\n        newViewState.appendTo(parent);\n        return newViewState;\n    }\n\n    /**\n     * Stores certain aspects of the dom for later post processing\n     *\n     * @param updateForms the update forms which should receive standardized internal jsf data\n     * @param toBeEvaled the resulting elements which should be evaled\n     */\n    private storeForPostProcessing(updateForms: DQ, toBeEvaled: DQ) {\n        this.storeForUpdate(updateForms);\n        this.storeForEval(toBeEvaled);\n    }\n\n    /**\n     * helper to store a given form for the update post processing (viewstate)\n     *\n     * @param updateForms the dom query object pointing to the forms which need to be updated\n     */\n    private storeForUpdate(updateForms: DQ) {\n        this.internalContext.assign(UPDATE_FORMS).value.push(updateForms);\n    }\n\n    /**\n     * same for eval (js and css)\n     *\n     * @param toBeEvaled\n     */\n    private storeForEval(toBeEvaled: DQ) {\n        this.internalContext.assign(UPDATE_ELEMS).value.push(toBeEvaled);\n    }\n\n    /**\n     * check whether a given XMLQuery node is an explicit viewstate node\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isViewStateNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_VIEWSTATE ||\n            node?.id?.value?.indexOf([separatorChar, P_VIEWSTATE].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_VIEWSTATE, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n    /**\n     * incoming client window node also needs special processing\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isClientWindowNode(node: XMLQuery): boolean {\n        let separatorChar = (<any>window).jsf.separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == P_CLIENT_WINDOW ||\n            node?.id?.value?.indexOf([separatorChar, P_CLIENT_WINDOW].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([P_CLIENT_WINDOW, separatorChar].join(EMPTY_STR)) != -1);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ArrayCollector, Config, DomQueryCollector, Lang, LazyStream} from \"mona-dish\";\n\nimport {Stream, DQ} from \"mona-dish\";\nimport isString = Lang.isString;\nimport {EMPTY_STR, P_VIEWSTATE} from \"../core/Const\";\n\n\n/**\n * A unified form data class\n * which builds upon our configuration.\n *\n * We cannot use standard html5 forms everywhere\n * due to api constraints on the HTML Form object in IE11\n * and due to the url encoding constraint given by the jsf.js spec\n *\n * TODO not ideal. too many encoding calls\n * probably only one needed and one overlay!\n * the entire fileinput storing probably is redundant now\n * that domquery has been fixed\n */\nexport class XhrFormData extends Config {\n\n    private fileInputs = {};\n\n    /**\n     * data collector from a given form\n     *\n     * @param dataSource either a form as DomQuery object or an encoded url string\n     * @param partialIdsArray partial ids to collect, to reduce the data sent down\n     */\n    constructor(private dataSource: DQ | string, private partialIdsArray?: string[]) {\n        super({});\n        //a call to getViewState before must pass the encoded line\n        //a call from getViewState passes the form element as datasource\n        //so we have two call points\n        if (isString(dataSource)) {\n            this.assignEncodedString(<string>this.dataSource);\n        } else {\n            this.handleFormSource();\n        }\n    }\n\n    /**\n     * generic application of ids\n     * @param executes\n     */\n    applyFileInputs(...executes: Array<string>) {\n\n        let fetchInput = (id: string): DQ => {\n            if (id == \"@all\") {\n                return DQ.querySelectorAllDeep(\"input[type='file']\");\n            } else if (id == \"@form\") {\n                return (<DQ>this.dataSource).querySelectorAllDeep(\"input[type='file']\");\n            } else {\n                let element = DQ.byId(id, true);\n                return this.getFileInputs(element);\n            }\n        };\n\n        let inputExists = (item: DQ) => {\n            return item.isPresent();\n        };\n\n        let applyInput = (item: DQ) => {\n            this.fileInputs[this.resolveSubmitIdentifier(<HTMLInputElement>item.getAsElem(0).value)] = true;\n        };\n\n        LazyStream.of(...executes)\n            .map(fetchInput)\n            .filter(inputExists)\n            .each(applyInput);\n    }\n\n    private getFileInputs(rootElment: DQ): DQ {\n        const rootFileInputs = rootElment\n            .filter(elem => elem.matchesSelector(\"input[type='file']\"))\n        const childFileInputs = rootElment\n            .querySelectorAll(\"input[type='file']\");\n\n        let ret = rootFileInputs.concat(childFileInputs);\n        return ret;\n    }\n\n    private handleFormSource() {\n        //encode and append the issuing item if not a partial ids array of ids is passed\n        /*\n         * Spec. 13.3.1\n         * Collect and encode input elements.\n         * Additionally the hidden element javax.faces.ViewState\n         * Enhancement partial page submit\n         *\n         */\n        this.encodeSubmittableFields(this, <DQ>this.dataSource, this.partialIdsArray);\n\n        if (this.getIf(P_VIEWSTATE).isPresent()) {\n            return;\n        }\n\n        this.applyViewState(<DQ>this.dataSource);\n    }\n\n    /**\n     * special case viewstate handling\n     *\n     * @param form the form holding the viewstate value\n     */\n    private applyViewState(form: DQ) {\n        let viewState = form.byId(P_VIEWSTATE, true).inputValue;\n        this.appendIf(viewState.isPresent(), P_VIEWSTATE).value = viewState.value;\n    }\n\n    /**\n     * assignes a url encoded string to this xhrFormData object\n     * as key value entry\n     * @param encoded\n     */\n    assignEncodedString(encoded: string) {\n        //TODO reevaluate this method\n        //this code filters out empty strings as key value pairs\n        let keyValueEntries = decodeURIComponent(encoded).split(/&/gi)\n                .filter(item => !!(item || '')\n                .replace(/\\s+/g,''));\n        this.assignString(keyValueEntries);\n    }\n\n    assignString(keyValueEntries: string[]) {\n        let toMerge = new Config({});\n\n        function splitToKeyVal(line: string) {\n            return line.split(/=(.*)/gi);\n        }\n\n        function fixKeyWithoutVal(keyVal: string[]) {\n            return keyVal.length < 3 ? [keyVal?.[0] ?? [], keyVal?.[1] ?? []] : keyVal;\n        }\n\n        Stream.of(...keyValueEntries)\n            //split only the first =\n            .map(line => splitToKeyVal(line))\n            //special case of having keys without values\n            .map(keyVal => fixKeyWithoutVal(keyVal))\n            .each(keyVal => {\n                toMerge.append(keyVal[0] as string).value = keyVal?.splice(1)?.join(\"\") ?? \"\";\n            });\n        //merge with overwrite but no append! (aka no double entries are allowed)\n        this.shallowMerge(toMerge);\n    }\n\n// noinspection JSUnusedGlobalSymbols\n    /**\n     * @returns a Form data representation\n     */\n    toFormData(): FormData {\n        let ret: any = new FormData();\n\n        LazyStream.of(...Object.keys(this.value))\n            .filter(key => !(key in this.fileInputs))\n            .each(key => {\n                Stream.of(...this.value[key]).each(item => ret.append(key, item));\n            });\n        Stream.of<string>(...Object.keys(this.fileInputs)).each((key: string) => {\n            DQ.querySelectorAllDeep(`[name='${key}'], [id=\"${key}\"]`).eachElem((elem: HTMLInputElement) => {\n                let identifier = this.resolveSubmitIdentifier(elem);\n                if (!elem?.files?.length) {\n                    ret.append(identifier, elem.value);\n                    return;\n                }\n\n                ret.append(identifier, elem.files[0]);\n            })\n        });\n        return ret;\n    }\n\n    resolveSubmitIdentifier(elem: HTMLInputElement) {\n        let identifier = elem.name;\n        identifier = ((elem?.name ?? \"\").replace(/s+/gi, \"\") == \"\") ? elem.id : identifier;\n        return identifier;\n    }\n\n    /**\n     * returns an encoded string representation of our xhr form data\n     *\n     * @param defaultStr optional default value if nothing is there to encode\n     */\n    toString(defaultStr = EMPTY_STR): string {\n        if (this.isAbsent()) {\n            return defaultStr;\n        }\n        let entries = LazyStream.of(...Object.keys(this.value))\n            .filter(key => this.value.hasOwnProperty(key))\n            .flatMap(key => Stream.of(...this.value[key]).map(val => [key, val]).collect(new ArrayCollector()))\n            .map(keyVal => {\n                return `${encodeURIComponent(keyVal[0])}=${encodeURIComponent(keyVal[1])}`;\n            })\n            .collect(new ArrayCollector());\n\n        return entries.join(\"&\")\n    }\n\n    /**\n     * determines fields to submit\n     * @param {Object} targetBuf - the target form buffer receiving the data\n     * @param {Node} parentItem - form element item is nested in\n     * @param {Array} partialIds - ids fo PPS\n     */\n    private encodeSubmittableFields(targetBuf: Config,\n                                    parentItem: DQ, partialIds ?: string[]) {\n        let toEncode = null;\n        if (this.partialIdsArray && this.partialIdsArray.length) {\n            //in case of our myfaces reduced ppr we only\n            //only submit the partials\n            this._value = {};\n            toEncode = new DQ(...this.partialIdsArray);\n\n        } else {\n            if (parentItem.isAbsent()) throw \"NO_PARITEM\";\n            toEncode = parentItem;\n        }\n\n        //lets encode the form elements\n\n        this.shallowMerge(toEncode.deepElements.encodeFormElement());\n    }\n\n    /**\n     * checks if the given datasource is a multipart request source\n     * multipart is only needed if one of the executes is a file input\n     * since file inputs are stateless, they fall out of the viewstate\n     * and need special handling\n     */\n    get isMultipartRequest(): boolean {\n        return !!Object.keys(this.fileInputs).length;\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncRunnable} from \"../util/AsyncRunnable\";\nimport {Config, DQ, Stream} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\n\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ErrorData} from \"./ErrorData\";\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {\n    BEGIN,\n    COMPLETE,\n    CONTENT_TYPE,\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_PASS_THR,\n    ERROR,\n    HEAD_FACES_REQ,\n    MALFORMEDXML,\n    NO_TIMEOUT,\n    ON_ERROR,\n    ON_EVENT, P_EXECUTE,\n    REQ_ACCEPT,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST,\n    STATE_EVT_TIMEOUT,\n    STD_ACCEPT,\n    URL_ENCODED,\n    VAL_AJAX\n} from \"../core/Const\";\nimport {resolveFinalUrl, resolveHandlerFunc} from \"./RequestDataResolver\";\nimport failSaveExecute = ExtLang.failSaveExecute;\n\n/**\n * JSFed XHR Request Wrapper\n * as Asyncrunnable for our Asynchronous queue\n *\n * The idea is that we basically just enqueue\n * a single ajax request into our queue\n * and let the queue do the processing.\n *\n */\n\ndeclare let jsf: any;\n\nexport class XhrRequest implements AsyncRunnable<XMLHttpRequest> {\n\n    private responseContext: Config;\n\n    private stopProgress = false;\n\n    /**\n     * helper support so that we do not have to drag in Promise shims\n     */\n    private catchFuncs: Array<Function> = [];\n    private thenFunc: Array<Function> = [];\n\n    /**\n     * Reqired Parameters\n     *\n     * @param source the issuing element\n     * @param sourceForm the form which is related to the issuing element\n     * @param requestContext the request context with allö pass through values\n     *\n     * Optional Parameters\n     *\n     * @param partialIdsArray an optional restricting partial ids array for encoding\n     * @param timeout optional xhr timeout\n     * @param ajaxType optional request type, default \"POST\"\n     * @param contentType optional content type, default \"application/x-www-form-urlencoded\"\n     * @param xhrObject optional xhr object which must fullfill the XMLHTTPRequest api, default XMLHttpRequest\n     */\n    constructor(\n        private source: DQ,\n        private sourceForm: DQ,\n        private requestContext: Config,\n        private internalContext: Config,\n        private partialIdsArray = [],\n        private timeout = NO_TIMEOUT,\n        private ajaxType = REQ_TYPE_POST,\n        private contentType = URL_ENCODED,\n        private xhrObject = new XMLHttpRequest()\n    ) {\n        /*\n        * we omit promises here\n        * some browsers do not support it and we do not need shim code\n        */\n        this.registerXhrCallbacks((data: any) => {\n            this.resolve(data)\n        }, (data: any) => {\n            this.reject(data)\n        });\n    }\n\n    start(): AsyncRunnable<XMLHttpRequest> {\n\n        let ignoreErr = failSaveExecute;\n        let xhrObject = this.xhrObject;\n\n        let executesArr = () => {\n            return this.requestContext.getIf(CTX_PARAM_PASS_THR, P_EXECUTE).get(\"none\").value.split(/\\s+/gi);\n        };\n        try {\n\n            let formElement = this.sourceForm.getAsElem(0).value;\n            let viewState = jsf.getViewState(formElement);\n            //encoded we need to decode\n            //We generated a base representation of the current form\n            let formData: XhrFormData = new XhrFormData(this.sourceForm);\n            //in case someone has overloaded the viewstate with addtional decorators we merge\n            //that in, there is no way around it, the spec allows it and getViewState\n            //must be called, so whatever getViewState delivers has higher priority then\n            //whatever the formData object delivers\n            formData.assignEncodedString(viewState);\n            formData.applyFileInputs(...executesArr());\n\n            this.contentType = formData.isMultipartRequest ? \"undefined\" : this.contentType;\n\n            //next step the pass through parameters are merged in for post params\n            let requestContext = this.requestContext;\n            let passThroughParams = requestContext.getIf(CTX_PARAM_PASS_THR);\n            formData.shallowMerge(passThroughParams, true, true);\n\n            this.responseContext = passThroughParams.deepCopy;\n\n            //we have to shift the internal passthroughs around to build up our response context\n            let responseContext = this.responseContext;\n\n            responseContext.assign(CTX_PARAM_MF_INTERNAL).value = this.internalContext.value;\n\n            //per spec the onevent and onerrors must be passed through to the response\n            responseContext.assign(ON_EVENT).value = requestContext.getIf(ON_EVENT).value;\n            responseContext.assign(ON_ERROR).value = requestContext.getIf(ON_ERROR).value;\n\n            xhrObject.open(this.ajaxType, resolveFinalUrl(this.sourceForm, formData, this.ajaxType), true);\n\n            //adding timeout\n            this.timeout ? xhrObject.timeout = this.timeout : null;\n\n            //a bug in the xhr stub library prevents the setRequestHeader to be properly executed on fake xhr objects\n            //normal browsers should resolve this\n            //tests can quietly fail on this one\n            if(this.contentType != \"undefined\") {\n                ignoreErr(() => xhrObject.setRequestHeader(CONTENT_TYPE, `${this.contentType}; charset=utf-8`));\n            }\n\n            ignoreErr(() => xhrObject.setRequestHeader(HEAD_FACES_REQ, VAL_AJAX));\n\n            //probably not needed anymore, will test this\n            //some webkit based mobile browsers do not follow the w3c spec of\n            // setting the accept headers automatically\n            ignoreErr(() => xhrObject.setRequestHeader(REQ_ACCEPT, STD_ACCEPT));\n\n            this.sendEvent(BEGIN);\n\n            this.sendRequest(formData);\n\n        } catch (e) {\n            //_onError//_onError\n            this.handleError(e);\n        }\n        return this;\n    }\n\n    cancel() {\n        try {\n            this.xhrObject.abort();\n        } catch (e) {\n            this.handleError(e);\n        }\n    }\n\n    resolve(data: any) {\n        Stream.of(...this.thenFunc).reduce((inputVal: any, thenFunc: any) => {\n            return thenFunc(inputVal);\n        }, data);\n    }\n\n    reject(data: any) {\n        Stream.of(...this.catchFuncs).reduce((inputVal: any, catchFunc: any) => {\n            return catchFunc(inputVal);\n        }, data);\n    }\n\n    catch(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.catch(func);\n        this.catchFuncs.push(func);\n        return this;\n    }\n\n    finally(func: () => void): AsyncRunnable<XMLHttpRequest> {\n        //no ie11 support we probably are going to revert to shims for that one\n        //(<any>this.$promise).then(func).catch(func);\n        this.catchFuncs.push(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    then(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        //this.$promise.then(func);\n        this.thenFunc.push(func);\n        return this;\n    }\n\n    /**\n     * attaches the internal event and processing\n     * callback within the promise to our xhr object\n     *\n     * @param resolve\n     * @param reject\n     */\n    protected registerXhrCallbacks(resolve: Consumer<any>, reject: Consumer<any>) {\n        let xhrObject = this.xhrObject;\n\n        xhrObject.onabort = () => {\n            this.onAbort(resolve, reject);\n        };\n        xhrObject.ontimeout = () => {\n            this.onTimeout(resolve, reject);\n        };\n        xhrObject.onload = () => {\n            this.onSuccess(this.xhrObject, resolve, reject)\n        };\n        xhrObject.onloadend = () => {\n            this.onDone(this.xhrObject, resolve, reject);\n        };\n        xhrObject.onerror = (errorData: any) => {\n            this.onError(errorData, resolve, reject);\n        };\n    }\n\n    /*\n     * xhr processing callbacks\n     *\n     * Those methods are the callbacks called by\n     * the xhr object depending on its own state\n     */\n\n    protected onAbort(resolve: Consumer<any>, reject: Consumer<any>) {\n        reject();\n    }\n\n    protected onTimeout(resolve: Consumer<any>, reject: Consumer<any>) {\n        this.sendEvent(STATE_EVT_TIMEOUT);\n        reject();\n    }\n\n    protected onSuccess(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n\n        this.sendEvent(COMPLETE);\n\n        //malforms always result in empty response xml\n        if (!this?.xhrObject?.responseXML) {\n            this.handleMalFormedXML(resolve, reject);\n            return;\n        }\n\n        jsf.ajax.response(this.xhrObject, this.responseContext.value ?? {});\n    }\n\n    private handleMalFormedXML(resolve: Function, reject: Function) {\n        this.stopProgress = true;\n        let errorData = {\n            type: ERROR,\n            status: MALFORMEDXML,\n            responseCode: 200,\n            responseText: this.xhrObject?.responseText,\n            source: {\n                id: this.source.id.value\n            }\n        };\n        try {\n            this.handleError(errorData, true);\n        } finally {\n            //we issue a resolve in this case to allow the system to recover\n            resolve(errorData);\n            //reject();\n        }\n        //non blocking non clearing\n    }\n\n    protected onDone(data: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        if (this.stopProgress) {\n            return;\n        }\n        resolve(data);\n    }\n\n    protected onError(errorData: any, resolve: Consumer<any>, reject: Consumer<any>) {\n        this.handleError(errorData);\n        reject();\n    }\n\n    /*\n     * other helpers\n     */\n    private sendEvent(evtType: string) {\n        let eventData = EventData.createFromRequest(this.xhrObject, this.requestContext, evtType);\n        try {\n            //user code error, we might cover\n            //this in onError but also we cannot swallow it\n            //we need to resolve the local handlers lazyly,\n            //because some frameworks might decorate them over the context in the response\n            let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_EVENT);\n\n            Implementation.sendEvent(eventData, eventHandler);\n        } catch (e) {\n            this.handleError(e);\n            throw e;\n        }\n    }\n\n    private handleError(exception, responseFormatError: boolean = false) {\n        let errorData = (responseFormatError) ? ErrorData.fromHttpConnection(exception.source, exception.type, exception.status, exception.responseText, exception.responseCode, exception.status) : ErrorData.fromClient(exception);\n\n        let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_ERROR);\n        Implementation.sendError(errorData, eventHandler);\n    }\n\n    protected sendRequest(formData: XhrFormData) {\n        let isPost = this.ajaxType != REQ_TYPE_GET;\n        if (formData.isMultipartRequest) {\n            //in case of a multipart request we send in a formData object as body\n            this.xhrObject.send((isPost) ? formData.toFormData() : null);\n        } else {\n            //in case of a normal request we send it normally\n            this.xhrObject.send((isPost) ? formData.toString() : null);\n        }\n    }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(486);\n"],"names":["Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","MUT_ERROR","Error","window","MutationObserver","setTimeout","mutationList","observer","found","DomQuery","map","mut","target","first","isPresent","clearTimeout","eachElem","item","observe","setInterval","childNodes","querySelectorAll","absent","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_WHITELIST","src","rootNode","pos","_limits","Optional","isAbsent","foundElement","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","filter","byId","collect","ArrayCollector","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","i","filterSelector","matched","lazyStream","match","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","responseText","replace","onerror","data","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","DomQueryCollector","idx","notFound","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","ofAssoc","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","topLevelLookAhead","toDatasource","ds","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","jsf","ajax","specversion","implversion","separatorchar","Implementation","getSeparatorChar","getProjectStage","getViewState","formElement","getClientWindow","request","event","response","context","addOnError","errorFunc","addOnEvent","eventFunc","util","chain","funcs","init","socketClientId","uri","channel","onopen","onmessage","onclose","behaviorScripts","autoconnect","PushImpl","close","myfaces","ab","execute","render","ProjectStages","BlockFilter","getMessage","ExtLang","getGlobalConfig","assert","Assertions","eventQueue","errorQueue","resolveProjectStateFromURL","foundStage","ExtDomquery","searchJsfJsFor","sendError","errorData","localHandler","errorCallback","alert","displayError","remapDefaultConstants","targetConfig","targetKey","userValues","issuingForm","issuingElementId","iterValues","processed","IDENT_NONE","IDENT_ALL","IDENT_FORM","IDENT_THIS","resolveGlobalConfig","MYFACES","config","resolveAndExecute","sourceCode","requestQueue","separator","projectStage","opResult","opts","mappedOpts","resolveDefaults","resolvedEvent","elementId","requestCtx","internalCtx","windowId","isResetValues","assertRequestIntegrity","P_WINDOW_ID","CTX_PARAM_PASS_THR","P_EVT","SOURCE","ON_EVENT","onevent","ON_ERROR","requestOptions","targetContext","sourceElementId","form","resolveForm","P_PARTIAL_SOURCE","P_AJAX","P_RESET_VALUES","CTX_PARAM_SRC_FRM_ID","CTX_PARAM_SRC_CTL_ID","CTX_PARAM_TR_TYPE","REQ_TYPE_POST","clientWindow","P_CLIENT_WINDOW","assignClientWindowId","CTX_PARAM_EXECUTE","P_EXECUTE","RENDER","P_RENDER","assignRender","delay","resolveDelay","resolveTimeout","queueHandler","addRequestToQueue","Response","processResponse","errorListener","eventListener","sendEvent","stdErrorHandler","exception","clearRequestQueue","ErrorData","fromClient","cleanup","ALTERED","INIT","formWindowId","body","TAG_FORM","XhrFormData","reqCtx","respPassThr","AsynchronousQueue","enqueue","XhrRequest","URL_PROTOCOL","location","protocol","sockets","components","clientIdsByTokens","resolveFunction","WebSocket","channelToken","substr","Socket","url","base","hostname","port","getBaseURL","getSocket","reconnectAttempts","socket","readyState","bindCallbacks","clientIds","onmmessage","parse","getElementById","functions","j","splice","reason","REASON_EXPIRED","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL","PARTIAL_ID","P_VIEWSTATE","P_VIEWROOT","P_VIEWHEAD","P_VIEWBODY","EMPTY_FUNC","freeze","EMPTY_STR","EMPTY_MAP","HTML_VIEWSTATE","WINDOW_ID","ERROR","EVENT","BEGIN","COMPLETE","SUCCESS","STATUS","ERROR_NAME","ERROR_MESSAGE","RESPONSE_TEXT","RESPONSE_XML","HTTPERROR","EMPTY_RESPONSE","MALFORMEDXML","SERVER_ERROR","CLIENT_ERROR","TIMEOUT_EVENT","CTX_PARAM_MF_INTERNAL","CTX_PARAM_DELAY","CTX_PARAM_TIMEOUT","CTX_PARAM_RST","STAGE_DEVELOPMENT","CONTENT_TYPE","HEAD_FACES_REQ","REQ_ACCEPT","VAL_AJAX","ENCODED_URL","REQ_TYPE_GET","STATE_EVT_BEGIN","STATE_EVT_TIMEOUT","STATE_EVT_COMPLETE","URL_ENCODED","MULTIPART","NO_TIMEOUT","STD_ACCEPT","TAG_HEAD","TAG_BODY","TAG_BEFORE","TAG_AFTER","TAG_ATTR","SEL_VIEWSTATE_ELEM","SEL_CLIENT_WINDOW_ELEM","SEL_RESPONSE_XML","PHASE_PROCESS_RESPONSE","ERR_NO_PARTIAL_RESPONSE","ATTR_URL","ATTR_NAME","ATTR_VALUE","ATTR_ID","RESP_PARTIAL","CMD_CHANGES","CMD_UPDATE","CMD_DELETE","CMD_INSERT","CMD_EVAL","CMD_ERROR","CMD_ATTRIBUTES","CMD_EXTENSION","CMD_REDIRECT","UPDATE_FORMS","UPDATE_ELEMS","SEL_SCRIPTS_STYLES","MF_NONE","APPLIED_VST","APPLIED_CLIENT_WINDOW","UNKNOWN","viewStatePos","nameSpace","StateHolder","Messages","MSG_TEST","MSG_DEV_MODE","MSG_AFFECTED_CLASS","MSG_AFFECTED_METHOD","MSG_ERROR_NAME","MSG_ERROR_MESSAGE","MSG_SERVER_ERROR_NAME","MSG_ERROR_DESC","MSG_ERROR_NO","MSG_ERROR_LINENO","ERR_FORM","ERR_VIEWSTATE","ERR_TRANSPORT","ERR_EVT_PASS","ERR_CONSTRUCT","ERR_MALFORMEDXML","ERR_SOURCE_FUNC","ERR_EV_OR_UNKNOWN","ERR_SOURCE_NOSTR","ERR_SOURCE_DEF_NULL","ERR_MUST_STRING","ERR_REF_OR_ID","ERR_PARAM_GENERIC","ERR_PARAM_STR","ERR_PARAM_STR_RE","ERR_PARAM_MIXMAPS","ERR_MUST_BE_PROVIDED","ERR_MUST_BE_PROVIDED1","ERR_REPLACE_EL","ERR_EMPTY_RESPONSE","ERR_ITEM_ID_NOTFOUND","ERR_PPR_IDREQ","ERR_PPR_INSERTBEFID","ERR_PPR_INSERTBEFID_1","ERR_PPR_INSERTBEFID_2","ERR_PPR_DELID","ERR_PPR_UNKNOWNCID","ERR_NO_VIEWROOTATTR","ERR_NO_HEADATTR","ERR_RED_URL","ERR_REQ_FAILED_UNKNOWN","ERR_REQU_FAILED","makeException","msg","caller","title","raiseError","assertFunction","assertUrlExists","assertValidXMLResponse","responseXML","finalTitle","finalName","finalMessage","runnableQueue","delayTimeout","appendElement","dequeue","shift","currentlyRunning","runEntry","isEmpty","catch","then","callForNextElementToProcess","cancel","IS_JSF_SOURCE","search","ATTR_SRC","fetchWindowIdFromURL","href","results","RegExp","exec","curScript","currentScript","nonceScript","rexp","decodeURIComponent","ExtDQ","installedLocale","defaultMessage","templateParams","param","callerCls","callFunc","getLanguage","language","navigator","languages","failSaveResolve","failSaveExecute","keyValToStr","delimiter","configName","getForm","queryElem","eventTarget","getEventTarget","formId","foundForm","assertFormExists","getLocalOrGlobalConfig","localOptions","ErrorType","errorName","errorMessage","responseCode","status","typeDetails","serverErrorName","serverErrorMessage","stack","fromHttpConnection","HTTP_ERROR","fromGeneric","errorCode","errorType","getMsg","fromServerError","EventData","createFromRequest","eventData","sourceId","resolveTargetUrl","srcFormElement","elements","action","resolveWindowId","requestContext","responseContext","funcName","sourceForm","ajaxType","configId","getCfg","finalEvent","srcElement","deepCopy","resetValues","externalContext","internalContext","elemId","resolveSourceElementId","sourceFormId","forms","req","resolveContexts","resolveResponseXML","responseProcessor","ResponseProcessor","SEL_SUB_TAGS","redirect","ALLOWED_TAGS","processViewState","processClientWindow","storeState","cdataBlock","cDATAAsString","replaceViewRoot","replaceHead","replaceBody","update","handleElementUpdate","processUpdateTag","eval","insertWithSubtags","insert","processInsert","processChangesTag","processPartialTag","fixViewStates","fixClientWindow","shadowDocument","shadowHead","storeForEval","shadowBody","shadowInnerHTML","resultingBody","updateForms","storeForPostProcessing","mergedErrorData","hasResponseXML","triggerOnError","redirectUrl","before","after","insertNodes","insertId","isViewStateNode","state","isClientWindowNode","updateElems","affectedForms","affectedForms2","appendViewStateToForms","appendClientWindowToForms","eventHandler","viewState","assignState","newViewStateElement","newViewState","toBeEvaled","storeForUpdate","separatorChar","partialIdsArray","fileInputs","assignEncodedString","handleFormSource","applyFileInputs","fetchInput","getFileInputs","inputExists","applyInput","resolveSubmitIdentifier","executes","rootElment","rootFileInputs","childFileInputs","encodeSubmittableFields","applyViewState","encoded","keyValueEntries","assignString","line","splitToKeyVal","fixKeyWithoutVal","toFormData","identifier","defaultStr","encodeURIComponent","targetBuf","parentItem","partialIds","toEncode","deepElements","xhrObject","stopProgress","catchFuncs","thenFunc","registerXhrCallbacks","reject","ignoreErr","isMultipartRequest","passThroughParams","resolveFinalUrl","sendRequest","handleError","abort","inputVal","catchFunc","finally","onabort","onAbort","ontimeout","onTimeout","onSuccess","onloadend","onDone","onError","handleMalFormedXML","evtType","resolveHandlerFunc","responseFormatError","isPost","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}